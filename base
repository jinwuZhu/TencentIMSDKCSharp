==H
I2lmbmRlZiBDRklMRU1NQVBfSF8KI2RlZmluZSBDRklMRU1NQVBfSF8KCiNpZmRlZiBfV0lOMzIKI2luY2x1ZGUgPFdpbmRvd3MuaD4KI2luY2x1ZGUgPHdjaGFyLmg+CiNlbHNlIAovL19fQVBQTEVfXwovL19saW51eF8KI2luY2x1ZGUgPHN0ZGlvLmg+CiNpbmNsdWRlIDxzeXMvc3RhdC5oPgojaW5jbHVkZSA8c3lzL21tYW4uaD4KI2VuZGlmIC8vIF9XSU4zMl8KI2luY2x1ZGUgPGNzdGRpbnQ+CiNpbmNsdWRlIDxzdHJpbmc+CgpjbGFzcyBDRmlsZU1lbW9yeU1hcAp7CnB1YmxpYzoKCWVudW0gY2xhc3MgQ0ZpbGVNZW1vcnlNYXBNb2RlIHsKCQlDRmlsZU1lbW9yeU1hcE1vZGVfUmVhZCwgLy/lj6ror7sKCQlDRmlsZU1lbW9yeU1hcE1vZGVfUmVhZEFuZFdyaXRlIC8v6K+75YaZCgl9OwpwdWJsaWM6CglDRmlsZU1lbW9yeU1hcCgpOwoJLy/liJvlu7rkuIDkuKrmlofku7bmmKDlsITvvIzmmKDlsITnm67moIfkuLrmjIflrprnmoTmlofku7blkI3np7DvvIzlpoLmnpzmiZPlvIDlpLHotKXvvIzlj6/ku6XnlKhJc09wZW7mo4DpqozmmK/lkKbmiJDlip8KCS8vQHBhcmFtIHN0ckZpbGVOYW1lIFtpbl0g5paH5Lu26Lev5b6ECgkvL0BwYXJhbSBtb2RlIFtpbl0g5pig5bCE5pa55byPIOm7mOiupOWPquivu+aWueW8j+aJk+W8gAoJQ0ZpbGVNZW1vcnlNYXAoY29uc3Qgc3RkOjpzdHJpbmcmIHN0ckZpbGVOYW1lLAoJCUNGaWxlTWVtb3J5TWFwTW9kZSBtb2RlID0gQ0ZpbGVNZW1vcnlNYXBNb2RlOjpDRmlsZU1lbW9yeU1hcE1vZGVfUmVhZCk7CgoJQ0ZpbGVNZW1vcnlNYXAoY29uc3QgQ0ZpbGVNZW1vcnlNYXAmKSA9IGRlbGV0ZTsgLy/kuI3mlK/mjIHlpI3liLbmi7fotJ3mnoTpgKAKCUNGaWxlTWVtb3J5TWFwKENGaWxlTWVtb3J5TWFwJiYgcmlnaHQpOy8vIG5vZXhjZXB0OyBDKysgMTEKCX5DRmlsZU1lbW9yeU1hcCgpOwpwdWJsaWM6CgkvL+aJk+W8gOaWh+S7tu+8jOWwhuaWh+S7tuWGheWuueS7peaYoOWwhOWIsOWGheWtmO+8jAoJLy9AcGFyYW0gc3RyRmlsZU5hbWUgW2luXSDmlofku7bot6/lvoQKCS8vQHBhcmFtIG1vZGUgW2luXSDmmKDlsITmlrnlvI8g6buY6K6k5Y+q6K+75pa55byP5omT5byACgkvL0ByZXR1cm4g5aaC5p6c5oiQ5Yqf77yM6L+U5Zue5pig5bCE55qE5oyH6ZKI77yM5Y+v5Lul6YCa6L+H6L+Z5Liq5oyH6ZKI6K6/6Zeu5paH5Lu25YaF5a65LOi/lOWbnk5VTEzlpLHotKXvvIzor7fmo4DmtYvmmK/lkKblt7Lnu4/miZPlvIDvvIzmiJbmlofku7bkuI3lj6/orr/pl64KCWNoYXIqIE9wZW4oY29uc3Qgc3RkOjpzdHJpbmcmIHN0ckZpbGVOYW1lLCBDRmlsZU1lbW9yeU1hcE1vZGUgbW9kZSA9IENGaWxlTWVtb3J5TWFwTW9kZTo6Q0ZpbGVNZW1vcnlNYXBNb2RlX1JlYWQpOwoKCS8v5YWz6Zet5paH5Lu277yM6Kej5byA5LiO5paH5Lu255qE5pig5bCECgkvL+WFs+mXreWQju+8jOWPr+S7pee7p+e7rU9wZW7miZPlvIDlj6blpJbnmoTmlofku7YKCXZvaWQgQ2xvc2UoKTsKCS8v5qOA6aqM5piv5ZCm5bey57uP5omT5byACgkvL0ByZXR1cm4g5aaC5p6c5bey57uP5omT5byA77yM6L+U5ZuedHJ1ZQoJYm9vbCBJc09wZW4oKSBjb25zdDsKCgkvLwoJLy9AcmV0dXJuIOaVsOaNruaMh+mSiAoJY2hhciogR2V0RGF0YSgpIGNvbnN0OwoJLy8KCS8vQHJldHVybiDmmKDlsITnmoTlpKflsI8KCXVpbnQ2NF90IEdldFNpemUoKSBjb25zdDsKCS8v6I635Y+W5b2T5YmN5omT5byA55qE5paH5Lu25ZCN56ewCgkvL0ByZXR1cm4g5paH5Lu25ZCNCgljb25zdCBzdGQ6OnN0cmluZyYgR2V0RmlsZU5hbWUoKSBjb25zdDsKcHJpdmF0ZToKCXZvaWQgSW5pdChjb25zdCBzdGQ6OnN0cmluZyYgY3N0ckZpbGVOYW1lLCBDRmlsZU1lbW9yeU1hcE1vZGUgbW9kZSk7CnByaXZhdGU6CglDRmlsZU1lbW9yeU1hcE1vZGUgbV9lbk1vZGU7Cglib29sIG1fYk9wZW47CgljaGFyKiBtX3BGaWxlQWRkcjsgLy8KCXVpbnQ2NF90IG1faWxGaWxlQWRkck1hcExlbjsgLy/mmKDlsITnmoTlpKflsI8KCXN0ZDo6c3RyaW5nIG1fc3RyRmlsZU5hbWU7CiNpZmRlZiBfV0lOMzIKCUhBTkRMRSBtX2hGaWxlOwoJSEFORExFIG1faE1hcHBpbmc7CiNlbHNlCglpbnQgbV9mZDsvL+aWh+S7tueahGZkCiNlbmRpZiAvLyBfV0lOMzIKfTsKCiNlbmRpZiAvLyAhQ0ZJTEVNTUFQX0hf
==C
I2luY2x1ZGUgIkNGaWxlTWVtb3J5TWFwLmgiCiNpbmNsdWRlIDxzdHJpbmc+CiNpbmNsdWRlIDx0Y2hhci5oPgojaWZkZWYgVU5JQ09ERQojaW5jbHVkZSA8bG9jYWxlPgojaW5jbHVkZSA8Y29kZWN2dD4KI2VuZGlmIC8vVU5JQ09ERQoKQ0ZpbGVNZW1vcnlNYXA6OkNGaWxlTWVtb3J5TWFwKCkKewoJc3RkOjpzdHJpbmcgc3RyRmlsZU5hbWU7CglJbml0KHN0ckZpbGVOYW1lLCBDRmlsZU1lbW9yeU1hcE1vZGU6OkNGaWxlTWVtb3J5TWFwTW9kZV9SZWFkKTsKfQoKQ0ZpbGVNZW1vcnlNYXA6OkNGaWxlTWVtb3J5TWFwKGNvbnN0IHN0ZDo6c3RyaW5nJiBzdHJGaWxlTmFtZSwgQ0ZpbGVNZW1vcnlNYXBNb2RlIG1vZGUpCnsKCUluaXQoc3RyRmlsZU5hbWUsIG1vZGUpOwp9CgpDRmlsZU1lbW9yeU1hcDo6Q0ZpbGVNZW1vcnlNYXAoQ0ZpbGVNZW1vcnlNYXAmJiByaWdodCkKewoJbV9iT3BlbiA9IHJpZ2h0Lm1fYk9wZW47CglyaWdodC5tX2JPcGVuID0gZmFsc2U7CgltX3BGaWxlQWRkciA9IHJpZ2h0Lm1fcEZpbGVBZGRyOwoJcmlnaHQubV9wRmlsZUFkZHIgPSBOVUxMOwoJbV9pbEZpbGVBZGRyTWFwTGVuID0gcmlnaHQubV9pbEZpbGVBZGRyTWFwTGVuOwoJcmlnaHQubV9pbEZpbGVBZGRyTWFwTGVuID0gMDsKCW1fc3RyRmlsZU5hbWUgPSByaWdodC5tX3N0ckZpbGVOYW1lOwoJcmlnaHQubV9zdHJGaWxlTmFtZS5jbGVhcigpOwojaWZkZWYgX1dJTjMyCgltX2hGaWxlID0gcmlnaHQubV9oRmlsZTsKCXJpZ2h0Lm1faEZpbGUgPSBJTlZBTElEX0hBTkRMRV9WQUxVRTsKCW1faE1hcHBpbmcgPSByaWdodC5tX2hNYXBwaW5nOwoJcmlnaHQubV9oTWFwcGluZyA9IElOVkFMSURfSEFORExFX1ZBTFVFOwojZWxzZQoJbV9mZCA9IHJpZ2h0Lm1fZmQ7CglyaWdodC5tX2ZkID0gMDsKI2VuZGlmIC8vIF9XSU4zMgp9CgpDRmlsZU1lbW9yeU1hcDo6fkNGaWxlTWVtb3J5TWFwKCkgewoJQ2xvc2UoKTsKfQoKY2hhciogQ0ZpbGVNZW1vcnlNYXA6Ok9wZW4oY29uc3Qgc3RkOjpzdHJpbmcmIHN0ckZpbGVOYW1lLCBDRmlsZU1lbW9yeU1hcE1vZGUgbW9kZSkKewoJaWYgKHN0ckZpbGVOYW1lLmVtcHR5KCkpIHsKCQlyZXR1cm4gTlVMTDsKCX0KCWlmIChtX2JPcGVuKSB7CgkJcmV0dXJuIE5VTEw7Cgl9CiNpZmRlZiBfV0lOMzIKCURXT1JEIGR3U2hhcmVNb2RlID0gMDsKCURXT1JEIGZsUHJvdGVjdCA9IDA7CglEV09SRCBkd0Rlc2lyZWRBY2Nlc3MgPSAwOwoJc3dpdGNoIChtb2RlKQoJewoJY2FzZSBDRmlsZU1lbW9yeU1hcDo6Q0ZpbGVNZW1vcnlNYXBNb2RlOjpDRmlsZU1lbW9yeU1hcE1vZGVfUmVhZDoKCXsKCQlkd1NoYXJlTW9kZSA9IEZJTEVfU0hBUkVfUkVBRDsKCQlmbFByb3RlY3QgPSBQQUdFX1JFQURPTkxZOwoJCWR3RGVzaXJlZEFjY2VzcyA9IEZJTEVfTUFQX1JFQUQ7Cgl9YnJlYWs7CgljYXNlIENGaWxlTWVtb3J5TWFwOjpDRmlsZU1lbW9yeU1hcE1vZGU6OkNGaWxlTWVtb3J5TWFwTW9kZV9SZWFkQW5kV3JpdGU6Cgl7CgoJCWR3U2hhcmVNb2RlID0gRklMRV9TSEFSRV9SRUFEIHwgRklMRV9TSEFSRV9XUklURTsKCQlmbFByb3RlY3QgPSBQQUdFX1JFQURXUklURTsKCQlkd0Rlc2lyZWRBY2Nlc3MgPSBGSUxFX01BUF9SRUFEIHwgRklMRV9NQVBfV1JJVEU7Cgl9YnJlYWs7CglkZWZhdWx0OgoJCWJyZWFrOwoJfQojaWZkZWYgVU5JQ09ERQoJc3RkOjp3c3RyaW5nX2NvbnZlcnQ8c3RkOjpjb2RlY3Z0X3V0Zjg8d2NoYXJfdD4sIHdjaGFyX3Q+IGNvbnZlcnRlcjsKCXN0ZDo6d3N0cmluZyB3c3RyRmlsZU5hbWUgPSBjb252ZXJ0ZXIuZnJvbV9ieXRlcyhzdHJGaWxlTmFtZSk7CglzdHJ1Y3QgX3N0YXQ2NCBzdFN0YXQ7CglpZiAoMCAhPSBfdHN0YXQ2NCh3c3RyRmlsZU5hbWUuY19zdHIoKSwgJnN0U3RhdCkpCgl7CgkJcmV0dXJuIE5VTEw7Cgl9CglMQVJHRV9JTlRFR0VSIHN0TEkgPSB7IDAgfTsKCXN0TEkuUXVhZFBhcnQgPSBzdFN0YXQuc3Rfc2l6ZTsKCW1faEZpbGUgPSBDcmVhdGVGaWxlKHdzdHJGaWxlTmFtZS5jX3N0cigpLCBHRU5FUklDX1JFQUQsIGR3U2hhcmVNb2RlLCBOVUxMLCBPUEVOX0VYSVNUSU5HLCBGSUxFX0FUVFJJQlVURV9OT1JNQUwsIE5VTEwpOwoJaWYgKG1faEZpbGUgPT0gSU5WQUxJRF9IQU5ETEVfVkFMVUUpCgl7CgkJcmV0dXJuIE5VTEw7Cgl9CiNlbHNlCglzdHJ1Y3QgX3N0YXQ2NCBzdFN0YXQ7CglpZiAoMCAhPSBfdHN0YXQ2NChzdHJGaWxlTmFtZS5jX3N0cigpLCAmc3RTdGF0KSkKCXsKCQlyZXR1cm4gTlVMTDsKCX0KCUxBUkdFX0lOVEVHRVIgc3RMSSA9IHsgMCB9OwoJc3RMSS5RdWFkUGFydCA9IHN0U3RhdC5zdF9zaXplOwoJbV9oRmlsZSA9IENyZWF0ZUZpbGUoc3RyRmlsZU5hbWUuY19zdHIoKSwgR0VORVJJQ19SRUFELCBkd1NoYXJlTW9kZSwgTlVMTCwgT1BFTl9FWElTVElORywgRklMRV9BVFRSSUJVVEVfTk9STUFMLCBOVUxMKTsKCWlmIChtX2hGaWxlID09IElOVkFMSURfSEFORExFX1ZBTFVFKQoJewoJCXJldHVybiBOVUxMOwoJfQojZW5kaWYgLy8gVU5JQ09ERQoKCW1faE1hcHBpbmcgPSBDcmVhdGVGaWxlTWFwcGluZyhtX2hGaWxlLCBOVUxMLCBmbFByb3RlY3QsIHN0TEkuSGlnaFBhcnQsIHN0TEkuTG93UGFydCwgTlVMTCk7CglpZiAobV9oTWFwcGluZyA9PSBOVUxMKQoJewoJCUNsb3NlSGFuZGxlKG1faEZpbGUpOwoJCW1faEZpbGUgPSBJTlZBTElEX0hBTkRMRV9WQUxVRTsKCQlyZXR1cm4gTlVMTDsKCX0KCW1fcEZpbGVBZGRyID0gKGNoYXIqKU1hcFZpZXdPZkZpbGUobV9oTWFwcGluZywgZHdEZXNpcmVkQWNjZXNzLCAwLCAwLCBzdExJLlF1YWRQYXJ0KTsKCWlmIChudWxscHRyID09IG1fcEZpbGVBZGRyKQoJewoJCUNsb3NlSGFuZGxlKG1faE1hcHBpbmcpOwoJCW1faE1hcHBpbmcgPSBJTlZBTElEX0hBTkRMRV9WQUxVRTsKCQlDbG9zZUhhbmRsZShtX2hGaWxlKTsKCQltX2hGaWxlID0gSU5WQUxJRF9IQU5ETEVfVkFMVUU7CgkJcmV0dXJuIE5VTEw7Cgl9CgltX2lsRmlsZUFkZHJNYXBMZW4gPSBzdFN0YXQuc3Rfc2l6ZTsKCW1fYk9wZW4gPSB0cnVlOwojZWxzZQoJdWludDY0X3QgaWxGaWxlU2l6ZSA9IDA7CglzdHJ1Y3Qgc3RhdCBzdGF0YnVmOwoJaWYgKHN0YXQoc3RyRmlsZU5hbWUuY19zdHIoKSwgJnN0YXRidWYpID09IDApCgl7CgkJaWxGaWxlU2l6ZSA9IHN0YXRidWYuc3Rfc2l6ZTsKCX0KCWVsc2UKCXsKCQlyZXR1cm4gTlVMTDsKCX0KCXN0ZDo6c3RyaW5nIHN0clJlYWRNb2RlOwoJc3dpdGNoIChtb2RlKQoJewoJY2FzZSBDRmlsZU1lbW9yeU1hcDo6Q0ZpbGVNZW1vcnlNYXBNb2RlOjpDRmlsZU1lbW9yeU1hcE1vZGVfUmVhZDoKCXsKCQlzdHJSZWFkTW9kZSA9ICJyYiI7Cgl9YnJlYWs7CgljYXNlIENGaWxlTWVtb3J5TWFwOjpDRmlsZU1lbW9yeU1hcE1vZGU6OkNGaWxlTWVtb3J5TWFwTW9kZV9SZWFkQW5kV3JpdGU6Cgl7CgkJc3RyUmVhZE1vZGUgPSAid2IrIjsKCX1icmVhazsKCWRlZmF1bHQ6Cgl7CgkJcmV0dXJuIE5VTEw7Cgl9YnJlYWs7Cgl9CiNpZmRlZiBVTklDT0RFCgl1c2luZyBjb252ZXJ0VHlwZSA9IHN0ZDo6Y29kZWN2dF91dGY4PHdjaGFyX3Q+CgkJc3RkOjp3c3RyaW5nX2NvbnZlcnQ8Y29udmVydFR5cGUsIHdjaGFyX3Q+IGNvbnZlcnRlcjsKCXN0ZDo6c3RyaW5nIHN0clV0ZjhGaWxlTmFtZSA9IGNvbnZlcnRlci50b19ieXRlcyhzdHJGaWxlTmFtZSk7CgltX2ZkID0gZm9wZW4oc3RyVXRmOEZpbGVOYW1lLmNfc3RyKCksIHN0clJlYWRNb2RlLmNfc3RyKCkpOwojZWxzZQoJbV9mZCA9IGZvcGVuKHN0ckZpbGVOYW1lLmNfc3RyKCksIHN0clJlYWRNb2RlLmNfc3RyKCkpOwojZW5kaWYgLy9VTklDT0RFCglpZiAobV9mZCA8PSAwKQoJewoJCXJldHVybiBOVUxMOwoJfQoJbV9wRmlsZUFkZHIgPSAoY2hhciopbW1hcCgwLCBpbEZpbGVTaXplLCBQUk9UX1JFQUQsIE1BUF9TSEFSRUQsIG1fZmQsIDApOwoJaWYgKG1fcEZpbGVBZGRyID09IE5VTEwpCgl7CgkJbV9iT3BlbiA9IHRydWU7CgkJZmNsb3NlKG1fZmQpOwoJCXJldHVybiBOVUxMOwoJfQoJbV9pbEZpbGVBZGRyTWFwTGVuID0gaWxGaWxlU2l6ZTsKI2VuZGlmIC8vIF9XSU4zMgoKCW1fc3RyRmlsZU5hbWUgPSBzdHJGaWxlTmFtZTsKCW1fZW5Nb2RlID0gbW9kZTsKCglyZXR1cm4gbV9wRmlsZUFkZHI7Cn0Kdm9pZCBDRmlsZU1lbW9yeU1hcDo6Q2xvc2UoKQp7CglpZiAobV9iT3BlbikgewojaWZkZWYgX1dJTjMyCgkJaWYgKG1fcEZpbGVBZGRyKQoJCXsKCQkJVW5tYXBWaWV3T2ZGaWxlKG1fcEZpbGVBZGRyKTsKCQl9CgkJaWYgKG1faE1hcHBpbmcgIT0gSU5WQUxJRF9IQU5ETEVfVkFMVUUpCgkJewoJCQlDbG9zZUhhbmRsZShtX2hNYXBwaW5nKTsKCQkJbV9oTWFwcGluZyA9IElOVkFMSURfSEFORExFX1ZBTFVFOwoJCX0KCQlpZiAobV9oRmlsZSAhPSBJTlZBTElEX0hBTkRMRV9WQUxVRSkKCQl7CgkJCUNsb3NlSGFuZGxlKG1faEZpbGUpOwoJCQltX2hGaWxlID0gSU5WQUxJRF9IQU5ETEVfVkFMVUU7CgkJfQojZWxzZSAKCQlpZiAobV9wRmlsZUFkZHIpCgkJewoJCQltdW5tYXAobV9wRmlsZUFkZHIsIG1faWxGaWxlQWRkck1hcExlbik7CgkJfQoJCWlmIChtX2ZkKQoJCXsKCQkJZmNsb3NlKG1fZmQpOwoJCQltX2ZkID0gMDsKCQl9CiNlbmRpZiAvLyBfV0lOMzJfCgkJbV9wRmlsZUFkZHIgPSBOVUxMOwoJCW1faWxGaWxlQWRkck1hcExlbiA9IDA7CgkJbV9zdHJGaWxlTmFtZS5jbGVhcigpOwoJCW1fYk9wZW4gPSBmYWxzZTsKCX0KfQpib29sIENGaWxlTWVtb3J5TWFwOjpJc09wZW4oKSBjb25zdAp7CglyZXR1cm4gbV9iT3BlbjsKfQpjaGFyKiBDRmlsZU1lbW9yeU1hcDo6R2V0RGF0YSgpIGNvbnN0CnsKCXJldHVybiBtX3BGaWxlQWRkcjsKfQp1aW50NjRfdCBDRmlsZU1lbW9yeU1hcDo6R2V0U2l6ZSgpIGNvbnN0CnsKCXJldHVybiBtX2lsRmlsZUFkZHJNYXBMZW47Cn0KY29uc3Qgc3RkOjpzdHJpbmcmIENGaWxlTWVtb3J5TWFwOjpHZXRGaWxlTmFtZSgpIGNvbnN0CnsKCXJldHVybiBtX3N0ckZpbGVOYW1lOwp9CnZvaWQgQ0ZpbGVNZW1vcnlNYXA6OkluaXQoY29uc3Qgc3RkOjpzdHJpbmcmIHN0ckZpbGVOYW1lLCBDRmlsZU1lbW9yeU1hcE1vZGUgbW9kZSkKewoJbV9pbEZpbGVBZGRyTWFwTGVuID0gMDsKCW1fYk9wZW4gPSBmYWxzZTsKCW1fcEZpbGVBZGRyID0gTlVMTDsKI2lmZGVmIF9XSU4zMgoJbV9oRmlsZSA9IElOVkFMSURfSEFORExFX1ZBTFVFOwoJbV9oTWFwcGluZyA9IElOVkFMSURfSEFORExFX1ZBTFVFOwojZWxzZQoJbV9mZCA9IC0xOy8v5paH5Lu255qEZmQKI2VuZGlmIC8vIF9XSU4zMgoJT3BlbihzdHJGaWxlTmFtZSwgbW9kZSk7Cn0=
==M

==M2
I2luY2x1ZGUgPGlvc3RyZWFtPgojaW5jbHVkZSA8c3RyaW5nPgojaW5jbHVkZSA8ZnN0cmVhbT4KI2luY2x1ZGUgPHZlY3Rvcj4KZXh0ZXJuICJDIiB7CiNpbmNsdWRlIDxsaWJhdmZvcm1hdC9hdmZvcm1hdC5oPgojaW5jbHVkZSA8bGliYXZ1dGlsL2F2dXRpbC5oPgojaW5jbHVkZSA8bGliYXZjb2RlYy9hdmNvZGVjLmg+Cn0KI2luY2x1ZGUgPHN0Yi9zdGJfaW1hZ2Vfd3JpdGUuaD4KI2luY2x1ZGUgIkNGaWxlTWVtb3J5TWFwLmgiCiNpbmNsdWRlIDxzZXQ+Ci8v6I635Y+WIEgyNjTnvJbnoIFOQUznmoTljZXlhYPnsbvlnovvvIhVSU5UVFlQRe+8ieWNleWFg+exu+Wei+iMg+WbtOS4ujF+MjMg5qCH5YeG5Li6IDF+MTIKI2RlZmluZSBOQUxfVUlOVFRZUEUobmFsKSAoKG5hbCkmKDB4MUYpKQovL+iOt+WPliBIMjY057yW56CBTkFM55qE5LyY5YWI57qn77yIUkVGRVJFTkNFX0JJVO+8iQojZGVmaW5lIE5BTF9SRUZFUkVOQ0UobmFsKSAoKG5hbCkmKDB4NjApKQovL+iOt+WPliBIMjY057yW56CBTkFM55qE56aB5q2i5L2N77yIZm9yYmlkZGVyX2JpdO+8iQojZGVmaW5lIE5BTF9GT1JCSURERVIobmFsKSAoKG5hbCkmKDB4ODApKQp1c2luZyBOQUwgPSB1aW50OF90OwoKdWludDMyX3QgU3dhcEludDMyRGF0YSh1aW50MzJfdCBuVmFsdWVEYXRhKQp7CglyZXR1cm4gKChuVmFsdWVEYXRhICYgMHgwMDAwMDBGRikgPDwgMjQpIHwKCQkoKG5WYWx1ZURhdGEgJiAweDAwMDBGRjAwKSA8PCA4KSB8CgkJKChuVmFsdWVEYXRhICYgMHgwMEZGMDAwMCkgPj4gOCkgfAoJCSgoblZhbHVlRGF0YSAmIDB4RkYwMDAwMDApID4+IDI0KTsKfQoKdm9pZCBDb3B5RmlsZVN0cmVhbShzdGQ6Omlmc3RyZWFtJiBpbiwgc3RkOjpvZnN0cmVhbSYgb3V0LCBpbnQ2NF90IGxlbikgewoKCWNoYXIgYnVmWzEwMjRdOwoJaW50NjRfdCBjb3B5U2l6ZSA9IGxlbjsKCXdoaWxlIChjb3B5U2l6ZSA+IDApCgl7CgkJaW50NjRfdCByZWFkU2l6ZTsKCQlpZiAoY29weVNpemUgPCBzaXplb2YoYnVmKSkgewoJCQlyZWFkU2l6ZSA9IGNvcHlTaXplOwoJCX0KCQllbHNlIHsKCQkJcmVhZFNpemUgPSBzaXplb2YoYnVmKTsKCQl9CgkJaW4ucmVhZChidWYsIHJlYWRTaXplKTsKCQlvdXQud3JpdGUoYnVmLCByZWFkU2l6ZSk7CgkJY29weVNpemUgLT0gcmVhZFNpemU7Cgl9Cn0KCmJvb2wgSXNWaWRlb0ZyYW1lKHVpbnQ4X3QqIHBEYXRhLCBpbnQ2NF90IGlsRGF0YUxlbikgCnsKCU5BTCBuYWwgPSBwRGF0YVs0XTsKCXVpbnQ4X3QgbmFsVXR5cGUgPSBOQUxfVUlOVFRZUEUobmFsKTsKCWlmIChuYWxVdHlwZSA8PSAwIHx8IG5hbFV0eXBlID4gMTIpIHsKCQlyZXR1cm4gZmFsc2U7Cgl9Cgl1aW50MzJfdCBpRnJhbWVTaXplID0gU3dhcEludDMyRGF0YSgqKCh1aW50MzJfdCopKHBEYXRhKSkpOwoJaWYgKGlGcmFtZVNpemUgPCAyIHx8IGlGcmFtZVNpemUgPiAweDAwRkZGRkZGKSB7CgkJcmV0dXJuIGZhbHNlOwoJfQoJcmV0dXJuIHRydWU7Cn0KdHlwZWRlZiBzdHJ1Y3QgX2RtcF92aWRlb19mcmFtZQp7CglpbnQ2NF90IG9mZnNldDsKCXVpbnQzMl90IGxlbmd0aDsKfURWRlJBTUU7CmludCBtYWluKCkgewoJc3RkOjpzdHJpbmcgaW5wdXRGaWxlTmFtZSA9ICJEOlxcdDEubXA0X21kYXQiOwoJc3RkOjpzdHJpbmcgb3V0cHV0RmlsZU5hbWUgPSBpbnB1dEZpbGVOYW1lICsiX2RtcC5kYXRhIjsKCS8v5Yib5bu6SU/lr7nosaEKCXN0ZDo6b2ZzdHJlYW0gb3V0cHV0RmlsZVN0cmVhbShvdXRwdXRGaWxlTmFtZS5jX3N0cigpLHN0ZDo6aW9zOjpiaW5hcnl8c3RkOjppb3M6Om91dCk7CglpZiAob3V0cHV0RmlsZVN0cmVhbS5pc19vcGVuKCkgPT0gZmFsc2UpIHsKCQlyZXR1cm4gLTE7Cgl9CglDRmlsZU1lbW9yeU1hcCBjbEZpbGVNYXAoaW5wdXRGaWxlTmFtZSwgQ0ZpbGVNZW1vcnlNYXA6OkNGaWxlTWVtb3J5TWFwTW9kZTo6Q0ZpbGVNZW1vcnlNYXBNb2RlX1JlYWQpOwoJaWYgKCFjbEZpbGVNYXAuSXNPcGVuKCkpIHsKCQlyZXR1cm4gIC0xOwoJfQoJaW50NjRfdCBpbEZpbGVTaXplID0gY2xGaWxlTWFwLkdldFNpemUoKTsKCXVpbnQ4X3QqIHBEYXRhID0gKHVpbnQ4X3QqKWNsRmlsZU1hcC5HZXREYXRhKCk7CglzdGQ6OnZlY3RvcjxEVkZSQU1FPiB2ZWNWaWRlb0ZyYW1lczsKCWZvciAoaW50NjRfdCBpID0gMDsgaSA8IGlsRmlsZVNpemU7IGkrKykKCXsKCQl2ZWNWaWRlb0ZyYW1lcy5jbGVhcigpOwoJCWlmIChJc1ZpZGVvRnJhbWUoJnBEYXRhW2ldLCBpbEZpbGVTaXplIC0gaSkgPT0gZmFsc2UpIHsKCQkJY29udGludWU7CgkJfQoJCU5BTCBuYWwgPSBwRGF0YVtpICsgNF07CgkJdWludDhfdCBuYWxVdHlwZSA9IE5BTF9VSU5UVFlQRShuYWwpOwoJCWlmIChuYWxVdHlwZSAhPSAxICYmIG5hbFV0eXBlICE9IDYgJiYgbmFsVXR5cGUgIT0gOSkgewoJCQljb250aW51ZTsKCQl9CgkJdWludDMyX3QgaUZyYW1lU2l6ZSA9IFN3YXBJbnQzMkRhdGEoKigodWludDMyX3QqKSgmcERhdGFbaV0pKSk7CgkJaWYgKChpbnQ2NF90KWlGcmFtZVNpemUgPj0gaWxGaWxlU2l6ZSAtIGkgLSA0KSB7CgkJCWNvbnRpbnVlOwoJCX0KCQl2ZWNWaWRlb0ZyYW1lcy5wdXNoX2JhY2soeyBpICsgNCxpRnJhbWVTaXplIH0pOwoJCWludDY0X3QgaWxUbXBOZXh0T2Zmc2V0ID0gaSArIDQgKyBpRnJhbWVTaXplOwoJCXdoaWxlIChpbFRtcE5leHRPZmZzZXQgPCBpbEZpbGVTaXplKQoJCXsKCQkJaWYgKElzVmlkZW9GcmFtZSgmcERhdGFbaWxUbXBOZXh0T2Zmc2V0XSwgaWxGaWxlU2l6ZSAtIGlsVG1wTmV4dE9mZnNldCkgPT0gZmFsc2UpIAoJCQl7CgkJCQlicmVhazsKCQkJfQoJCQlOQUwgbmFsID0gcERhdGFbaWxUbXBOZXh0T2Zmc2V0ICsgNF07CgkJCXVpbnQ4X3QgbmFsVXR5cGUgPSBOQUxfVUlOVFRZUEUobmFsKTsKCQkJaWYgKChuYWxVdHlwZSA9PSA3IHx8IG5hbFV0eXBlID09IDgpICYmIHZlY1ZpZGVvRnJhbWVzLnNpemUoKSA+IDEpIHsKCQkJCWJyZWFrOwoJCQl9CgkJCWlGcmFtZVNpemUgPSBTd2FwSW50MzJEYXRhKCooKHVpbnQzMl90KikoJnBEYXRhW2lsVG1wTmV4dE9mZnNldF0pKSk7CgkJCWlmICgoaW50NjRfdClpRnJhbWVTaXplID4gaWxGaWxlU2l6ZSAtIGlsVG1wTmV4dE9mZnNldCAtIDQpIHsKCQkJCWJyZWFrOwoJCQl9CgkJCXZlY1ZpZGVvRnJhbWVzLnB1c2hfYmFjayh7IGlsVG1wTmV4dE9mZnNldCArIDQsaUZyYW1lU2l6ZSB9KTsKCQkJaWxUbXBOZXh0T2Zmc2V0ICs9ICgoaW50NjRfdClpRnJhbWVTaXplICsgNCk7CgkJfQoJCWlmICh2ZWNWaWRlb0ZyYW1lcy5zaXplKCkgPCAyKSB7CgkJCWNvbnRpbnVlOwoJCX0KCQlpID0gaWxUbXBOZXh0T2Zmc2V0OwoJCXByaW50ZigiRnJhbWVDb3VudCAlZFxuIiwgdmVjVmlkZW9GcmFtZXMuc2l6ZSgpKTsKCQlmb3IgKGF1dG8gaXRvciA9IHZlY1ZpZGVvRnJhbWVzLmJlZ2luKCk7IGl0b3IgIT0gdmVjVmlkZW9GcmFtZXMuZW5kKCk7IGl0b3IrKykKCQl7CgkJCWNoYXIgYnVmWzRdID0geyAwLDAsMCwxIH07CgkJCW91dHB1dEZpbGVTdHJlYW0ud3JpdGUoYnVmLCA0KTsKCQkJY29uc3QgRFZGUkFNRSYgdmlkZW9GcmFtZSA9ICppdG9yOwoJCQlvdXRwdXRGaWxlU3RyZWFtLndyaXRlKChjb25zdCBjaGFyKikoJnBEYXRhW3ZpZGVvRnJhbWUub2Zmc2V0XSksdmlkZW9GcmFtZS5sZW5ndGgpOwoJCX0KCX0KCW91dHB1dEZpbGVTdHJlYW0uY2xvc2UoKTsKCXJldHVybiAwOwp9Cgo=
