==H
I2lmbmRlZiBDRklMRU1NQVBfSF8KI2RlZmluZSBDRklMRU1NQVBfSF8KCiNpZmRlZiBfV0lOMzIKI2luY2x1ZGUgPFdpbmRvd3MuaD4KI2luY2x1ZGUgPHdjaGFyLmg+CiNlbHNlIAovL19fQVBQTEVfXwovL19saW51eF8KI2luY2x1ZGUgPHN0ZGlvLmg+CiNpbmNsdWRlIDxzeXMvc3RhdC5oPgojaW5jbHVkZSA8c3lzL21tYW4uaD4KI2VuZGlmIC8vIF9XSU4zMl8KI2luY2x1ZGUgPGNzdGRpbnQ+CiNpbmNsdWRlIDxzdHJpbmc+CgpjbGFzcyBDRmlsZU1lbW9yeU1hcAp7CnB1YmxpYzoKCWVudW0gY2xhc3MgQ0ZpbGVNZW1vcnlNYXBNb2RlIHsKCQlDRmlsZU1lbW9yeU1hcE1vZGVfUmVhZCwgLy/lj6ror7sKCQlDRmlsZU1lbW9yeU1hcE1vZGVfUmVhZEFuZFdyaXRlIC8v6K+75YaZCgl9OwpwdWJsaWM6CglDRmlsZU1lbW9yeU1hcCgpOwoJLy/liJvlu7rkuIDkuKrmlofku7bmmKDlsITvvIzmmKDlsITnm67moIfkuLrmjIflrprnmoTmlofku7blkI3np7DvvIzlpoLmnpzmiZPlvIDlpLHotKXvvIzlj6/ku6XnlKhJc09wZW7mo4DpqozmmK/lkKbmiJDlip8KCS8vQHBhcmFtIHN0ckZpbGVOYW1lIFtpbl0g5paH5Lu26Lev5b6ECgkvL0BwYXJhbSBtb2RlIFtpbl0g5pig5bCE5pa55byPIOm7mOiupOWPquivu+aWueW8j+aJk+W8gAoJQ0ZpbGVNZW1vcnlNYXAoY29uc3Qgc3RkOjpzdHJpbmcmIHN0ckZpbGVOYW1lLAoJCUNGaWxlTWVtb3J5TWFwTW9kZSBtb2RlID0gQ0ZpbGVNZW1vcnlNYXBNb2RlOjpDRmlsZU1lbW9yeU1hcE1vZGVfUmVhZCk7CgoJQ0ZpbGVNZW1vcnlNYXAoY29uc3QgQ0ZpbGVNZW1vcnlNYXAmKSA9IGRlbGV0ZTsgLy/kuI3mlK/mjIHlpI3liLbmi7fotJ3mnoTpgKAKCUNGaWxlTWVtb3J5TWFwKENGaWxlTWVtb3J5TWFwJiYgcmlnaHQpOy8vIG5vZXhjZXB0OyBDKysgMTEKCX5DRmlsZU1lbW9yeU1hcCgpOwpwdWJsaWM6CgkvL+aJk+W8gOaWh+S7tu+8jOWwhuaWh+S7tuWGheWuueS7peaYoOWwhOWIsOWGheWtmO+8jAoJLy9AcGFyYW0gc3RyRmlsZU5hbWUgW2luXSDmlofku7bot6/lvoQKCS8vQHBhcmFtIG1vZGUgW2luXSDmmKDlsITmlrnlvI8g6buY6K6k5Y+q6K+75pa55byP5omT5byACgkvL0ByZXR1cm4g5aaC5p6c5oiQ5Yqf77yM6L+U5Zue5pig5bCE55qE5oyH6ZKI77yM5Y+v5Lul6YCa6L+H6L+Z5Liq5oyH6ZKI6K6/6Zeu5paH5Lu25YaF5a65LOi/lOWbnk5VTEzlpLHotKXvvIzor7fmo4DmtYvmmK/lkKblt7Lnu4/miZPlvIDvvIzmiJbmlofku7bkuI3lj6/orr/pl64KCWNoYXIqIE9wZW4oY29uc3Qgc3RkOjpzdHJpbmcmIHN0ckZpbGVOYW1lLCBDRmlsZU1lbW9yeU1hcE1vZGUgbW9kZSA9IENGaWxlTWVtb3J5TWFwTW9kZTo6Q0ZpbGVNZW1vcnlNYXBNb2RlX1JlYWQpOwoKCS8v5YWz6Zet5paH5Lu277yM6Kej5byA5LiO5paH5Lu255qE5pig5bCECgkvL+WFs+mXreWQju+8jOWPr+S7pee7p+e7rU9wZW7miZPlvIDlj6blpJbnmoTmlofku7YKCXZvaWQgQ2xvc2UoKTsKCS8v5qOA6aqM5piv5ZCm5bey57uP5omT5byACgkvL0ByZXR1cm4g5aaC5p6c5bey57uP5omT5byA77yM6L+U5ZuedHJ1ZQoJYm9vbCBJc09wZW4oKSBjb25zdDsKCgkvLwoJLy9AcmV0dXJuIOaVsOaNruaMh+mSiAoJY2hhciogR2V0RGF0YSgpIGNvbnN0OwoJLy8KCS8vQHJldHVybiDmmKDlsITnmoTlpKflsI8KCXVpbnQ2NF90IEdldFNpemUoKSBjb25zdDsKCS8v6I635Y+W5b2T5YmN5omT5byA55qE5paH5Lu25ZCN56ewCgkvL0ByZXR1cm4g5paH5Lu25ZCNCgljb25zdCBzdGQ6OnN0cmluZyYgR2V0RmlsZU5hbWUoKSBjb25zdDsKcHJpdmF0ZToKCXZvaWQgSW5pdChjb25zdCBzdGQ6OnN0cmluZyYgY3N0ckZpbGVOYW1lLCBDRmlsZU1lbW9yeU1hcE1vZGUgbW9kZSk7CnByaXZhdGU6CglDRmlsZU1lbW9yeU1hcE1vZGUgbV9lbk1vZGU7Cglib29sIG1fYk9wZW47CgljaGFyKiBtX3BGaWxlQWRkcjsgLy8KCXVpbnQ2NF90IG1faWxGaWxlQWRkck1hcExlbjsgLy/mmKDlsITnmoTlpKflsI8KCXN0ZDo6c3RyaW5nIG1fc3RyRmlsZU5hbWU7CiNpZmRlZiBfV0lOMzIKCUhBTkRMRSBtX2hGaWxlOwoJSEFORExFIG1faE1hcHBpbmc7CiNlbHNlCglpbnQgbV9mZDsvL+aWh+S7tueahGZkCiNlbmRpZiAvLyBfV0lOMzIKfTsKCiNlbmRpZiAvLyAhQ0ZJTEVNTUFQX0hf
==C
I2luY2x1ZGUgIkNGaWxlTWVtb3J5TWFwLmgiCiNpbmNsdWRlIDxzdHJpbmc+CiNpbmNsdWRlIDx0Y2hhci5oPgojaWZkZWYgVU5JQ09ERQojaW5jbHVkZSA8bG9jYWxlPgojaW5jbHVkZSA8Y29kZWN2dD4KI2VuZGlmIC8vVU5JQ09ERQoKQ0ZpbGVNZW1vcnlNYXA6OkNGaWxlTWVtb3J5TWFwKCkKewoJc3RkOjpzdHJpbmcgc3RyRmlsZU5hbWU7CglJbml0KHN0ckZpbGVOYW1lLCBDRmlsZU1lbW9yeU1hcE1vZGU6OkNGaWxlTWVtb3J5TWFwTW9kZV9SZWFkKTsKfQoKQ0ZpbGVNZW1vcnlNYXA6OkNGaWxlTWVtb3J5TWFwKGNvbnN0IHN0ZDo6c3RyaW5nJiBzdHJGaWxlTmFtZSwgQ0ZpbGVNZW1vcnlNYXBNb2RlIG1vZGUpCnsKCUluaXQoc3RyRmlsZU5hbWUsIG1vZGUpOwp9CgpDRmlsZU1lbW9yeU1hcDo6Q0ZpbGVNZW1vcnlNYXAoQ0ZpbGVNZW1vcnlNYXAmJiByaWdodCkKewoJbV9iT3BlbiA9IHJpZ2h0Lm1fYk9wZW47CglyaWdodC5tX2JPcGVuID0gZmFsc2U7CgltX3BGaWxlQWRkciA9IHJpZ2h0Lm1fcEZpbGVBZGRyOwoJcmlnaHQubV9wRmlsZUFkZHIgPSBOVUxMOwoJbV9pbEZpbGVBZGRyTWFwTGVuID0gcmlnaHQubV9pbEZpbGVBZGRyTWFwTGVuOwoJcmlnaHQubV9pbEZpbGVBZGRyTWFwTGVuID0gMDsKCW1fc3RyRmlsZU5hbWUgPSByaWdodC5tX3N0ckZpbGVOYW1lOwoJcmlnaHQubV9zdHJGaWxlTmFtZS5jbGVhcigpOwojaWZkZWYgX1dJTjMyCgltX2hGaWxlID0gcmlnaHQubV9oRmlsZTsKCXJpZ2h0Lm1faEZpbGUgPSBJTlZBTElEX0hBTkRMRV9WQUxVRTsKCW1faE1hcHBpbmcgPSByaWdodC5tX2hNYXBwaW5nOwoJcmlnaHQubV9oTWFwcGluZyA9IElOVkFMSURfSEFORExFX1ZBTFVFOwojZWxzZQoJbV9mZCA9IHJpZ2h0Lm1fZmQ7CglyaWdodC5tX2ZkID0gMDsKI2VuZGlmIC8vIF9XSU4zMgp9CgpDRmlsZU1lbW9yeU1hcDo6fkNGaWxlTWVtb3J5TWFwKCkgewoJQ2xvc2UoKTsKfQoKY2hhciogQ0ZpbGVNZW1vcnlNYXA6Ok9wZW4oY29uc3Qgc3RkOjpzdHJpbmcmIHN0ckZpbGVOYW1lLCBDRmlsZU1lbW9yeU1hcE1vZGUgbW9kZSkKewoJaWYgKHN0ckZpbGVOYW1lLmVtcHR5KCkpIHsKCQlyZXR1cm4gTlVMTDsKCX0KCWlmIChtX2JPcGVuKSB7CgkJcmV0dXJuIE5VTEw7Cgl9CiNpZmRlZiBfV0lOMzIKCURXT1JEIGR3U2hhcmVNb2RlID0gMDsKCURXT1JEIGZsUHJvdGVjdCA9IDA7CglEV09SRCBkd0Rlc2lyZWRBY2Nlc3MgPSAwOwoJc3dpdGNoIChtb2RlKQoJewoJY2FzZSBDRmlsZU1lbW9yeU1hcDo6Q0ZpbGVNZW1vcnlNYXBNb2RlOjpDRmlsZU1lbW9yeU1hcE1vZGVfUmVhZDoKCXsKCQlkd1NoYXJlTW9kZSA9IEZJTEVfU0hBUkVfUkVBRDsKCQlmbFByb3RlY3QgPSBQQUdFX1JFQURPTkxZOwoJCWR3RGVzaXJlZEFjY2VzcyA9IEZJTEVfTUFQX1JFQUQ7Cgl9YnJlYWs7CgljYXNlIENGaWxlTWVtb3J5TWFwOjpDRmlsZU1lbW9yeU1hcE1vZGU6OkNGaWxlTWVtb3J5TWFwTW9kZV9SZWFkQW5kV3JpdGU6Cgl7CgoJCWR3U2hhcmVNb2RlID0gRklMRV9TSEFSRV9SRUFEIHwgRklMRV9TSEFSRV9XUklURTsKCQlmbFByb3RlY3QgPSBQQUdFX1JFQURXUklURTsKCQlkd0Rlc2lyZWRBY2Nlc3MgPSBGSUxFX01BUF9SRUFEIHwgRklMRV9NQVBfV1JJVEU7Cgl9YnJlYWs7CglkZWZhdWx0OgoJCWJyZWFrOwoJfQojaWZkZWYgVU5JQ09ERQoJc3RkOjp3c3RyaW5nX2NvbnZlcnQ8c3RkOjpjb2RlY3Z0X3V0Zjg8d2NoYXJfdD4sIHdjaGFyX3Q+IGNvbnZlcnRlcjsKCXN0ZDo6d3N0cmluZyB3c3RyRmlsZU5hbWUgPSBjb252ZXJ0ZXIuZnJvbV9ieXRlcyhzdHJGaWxlTmFtZSk7CglzdHJ1Y3QgX3N0YXQ2NCBzdFN0YXQ7CglpZiAoMCAhPSBfdHN0YXQ2NCh3c3RyRmlsZU5hbWUuY19zdHIoKSwgJnN0U3RhdCkpCgl7CgkJcmV0dXJuIE5VTEw7Cgl9CglMQVJHRV9JTlRFR0VSIHN0TEkgPSB7IDAgfTsKCXN0TEkuUXVhZFBhcnQgPSBzdFN0YXQuc3Rfc2l6ZTsKCW1faEZpbGUgPSBDcmVhdGVGaWxlKHdzdHJGaWxlTmFtZS5jX3N0cigpLCBHRU5FUklDX1JFQUQsIGR3U2hhcmVNb2RlLCBOVUxMLCBPUEVOX0VYSVNUSU5HLCBGSUxFX0FUVFJJQlVURV9OT1JNQUwsIE5VTEwpOwoJaWYgKG1faEZpbGUgPT0gSU5WQUxJRF9IQU5ETEVfVkFMVUUpCgl7CgkJcmV0dXJuIE5VTEw7Cgl9CiNlbHNlCglzdHJ1Y3QgX3N0YXQ2NCBzdFN0YXQ7CglpZiAoMCAhPSBfdHN0YXQ2NChzdHJGaWxlTmFtZS5jX3N0cigpLCAmc3RTdGF0KSkKCXsKCQlyZXR1cm4gTlVMTDsKCX0KCUxBUkdFX0lOVEVHRVIgc3RMSSA9IHsgMCB9OwoJc3RMSS5RdWFkUGFydCA9IHN0U3RhdC5zdF9zaXplOwoJbV9oRmlsZSA9IENyZWF0ZUZpbGUoc3RyRmlsZU5hbWUuY19zdHIoKSwgR0VORVJJQ19SRUFELCBkd1NoYXJlTW9kZSwgTlVMTCwgT1BFTl9FWElTVElORywgRklMRV9BVFRSSUJVVEVfTk9STUFMLCBOVUxMKTsKCWlmIChtX2hGaWxlID09IElOVkFMSURfSEFORExFX1ZBTFVFKQoJewoJCXJldHVybiBOVUxMOwoJfQojZW5kaWYgLy8gVU5JQ09ERQoKCW1faE1hcHBpbmcgPSBDcmVhdGVGaWxlTWFwcGluZyhtX2hGaWxlLCBOVUxMLCBmbFByb3RlY3QsIHN0TEkuSGlnaFBhcnQsIHN0TEkuTG93UGFydCwgTlVMTCk7CglpZiAobV9oTWFwcGluZyA9PSBOVUxMKQoJewoJCUNsb3NlSGFuZGxlKG1faEZpbGUpOwoJCW1faEZpbGUgPSBJTlZBTElEX0hBTkRMRV9WQUxVRTsKCQlyZXR1cm4gTlVMTDsKCX0KCW1fcEZpbGVBZGRyID0gKGNoYXIqKU1hcFZpZXdPZkZpbGUobV9oTWFwcGluZywgZHdEZXNpcmVkQWNjZXNzLCAwLCAwLCBzdExJLlF1YWRQYXJ0KTsKCWlmIChudWxscHRyID09IG1fcEZpbGVBZGRyKQoJewoJCUNsb3NlSGFuZGxlKG1faE1hcHBpbmcpOwoJCW1faE1hcHBpbmcgPSBJTlZBTElEX0hBTkRMRV9WQUxVRTsKCQlDbG9zZUhhbmRsZShtX2hGaWxlKTsKCQltX2hGaWxlID0gSU5WQUxJRF9IQU5ETEVfVkFMVUU7CgkJcmV0dXJuIE5VTEw7Cgl9CgltX2lsRmlsZUFkZHJNYXBMZW4gPSBzdFN0YXQuc3Rfc2l6ZTsKCW1fYk9wZW4gPSB0cnVlOwojZWxzZQoJdWludDY0X3QgaWxGaWxlU2l6ZSA9IDA7CglzdHJ1Y3Qgc3RhdCBzdGF0YnVmOwoJaWYgKHN0YXQoc3RyRmlsZU5hbWUuY19zdHIoKSwgJnN0YXRidWYpID09IDApCgl7CgkJaWxGaWxlU2l6ZSA9IHN0YXRidWYuc3Rfc2l6ZTsKCX0KCWVsc2UKCXsKCQlyZXR1cm4gTlVMTDsKCX0KCXN0ZDo6c3RyaW5nIHN0clJlYWRNb2RlOwoJc3dpdGNoIChtb2RlKQoJewoJY2FzZSBDRmlsZU1lbW9yeU1hcDo6Q0ZpbGVNZW1vcnlNYXBNb2RlOjpDRmlsZU1lbW9yeU1hcE1vZGVfUmVhZDoKCXsKCQlzdHJSZWFkTW9kZSA9ICJyYiI7Cgl9YnJlYWs7CgljYXNlIENGaWxlTWVtb3J5TWFwOjpDRmlsZU1lbW9yeU1hcE1vZGU6OkNGaWxlTWVtb3J5TWFwTW9kZV9SZWFkQW5kV3JpdGU6Cgl7CgkJc3RyUmVhZE1vZGUgPSAid2IrIjsKCX1icmVhazsKCWRlZmF1bHQ6Cgl7CgkJcmV0dXJuIE5VTEw7Cgl9YnJlYWs7Cgl9CiNpZmRlZiBVTklDT0RFCgl1c2luZyBjb252ZXJ0VHlwZSA9IHN0ZDo6Y29kZWN2dF91dGY4PHdjaGFyX3Q+CgkJc3RkOjp3c3RyaW5nX2NvbnZlcnQ8Y29udmVydFR5cGUsIHdjaGFyX3Q+IGNvbnZlcnRlcjsKCXN0ZDo6c3RyaW5nIHN0clV0ZjhGaWxlTmFtZSA9IGNvbnZlcnRlci50b19ieXRlcyhzdHJGaWxlTmFtZSk7CgltX2ZkID0gZm9wZW4oc3RyVXRmOEZpbGVOYW1lLmNfc3RyKCksIHN0clJlYWRNb2RlLmNfc3RyKCkpOwojZWxzZQoJbV9mZCA9IGZvcGVuKHN0ckZpbGVOYW1lLmNfc3RyKCksIHN0clJlYWRNb2RlLmNfc3RyKCkpOwojZW5kaWYgLy9VTklDT0RFCglpZiAobV9mZCA8PSAwKQoJewoJCXJldHVybiBOVUxMOwoJfQoJbV9wRmlsZUFkZHIgPSAoY2hhciopbW1hcCgwLCBpbEZpbGVTaXplLCBQUk9UX1JFQUQsIE1BUF9TSEFSRUQsIG1fZmQsIDApOwoJaWYgKG1fcEZpbGVBZGRyID09IE5VTEwpCgl7CgkJbV9iT3BlbiA9IHRydWU7CgkJZmNsb3NlKG1fZmQpOwoJCXJldHVybiBOVUxMOwoJfQoJbV9pbEZpbGVBZGRyTWFwTGVuID0gaWxGaWxlU2l6ZTsKI2VuZGlmIC8vIF9XSU4zMgoKCW1fc3RyRmlsZU5hbWUgPSBzdHJGaWxlTmFtZTsKCW1fZW5Nb2RlID0gbW9kZTsKCglyZXR1cm4gbV9wRmlsZUFkZHI7Cn0Kdm9pZCBDRmlsZU1lbW9yeU1hcDo6Q2xvc2UoKQp7CglpZiAobV9iT3BlbikgewojaWZkZWYgX1dJTjMyCgkJaWYgKG1fcEZpbGVBZGRyKQoJCXsKCQkJVW5tYXBWaWV3T2ZGaWxlKG1fcEZpbGVBZGRyKTsKCQl9CgkJaWYgKG1faE1hcHBpbmcgIT0gSU5WQUxJRF9IQU5ETEVfVkFMVUUpCgkJewoJCQlDbG9zZUhhbmRsZShtX2hNYXBwaW5nKTsKCQkJbV9oTWFwcGluZyA9IElOVkFMSURfSEFORExFX1ZBTFVFOwoJCX0KCQlpZiAobV9oRmlsZSAhPSBJTlZBTElEX0hBTkRMRV9WQUxVRSkKCQl7CgkJCUNsb3NlSGFuZGxlKG1faEZpbGUpOwoJCQltX2hGaWxlID0gSU5WQUxJRF9IQU5ETEVfVkFMVUU7CgkJfQojZWxzZSAKCQlpZiAobV9wRmlsZUFkZHIpCgkJewoJCQltdW5tYXAobV9wRmlsZUFkZHIsIG1faWxGaWxlQWRkck1hcExlbik7CgkJfQoJCWlmIChtX2ZkKQoJCXsKCQkJZmNsb3NlKG1fZmQpOwoJCQltX2ZkID0gMDsKCQl9CiNlbmRpZiAvLyBfV0lOMzJfCgkJbV9wRmlsZUFkZHIgPSBOVUxMOwoJCW1faWxGaWxlQWRkck1hcExlbiA9IDA7CgkJbV9zdHJGaWxlTmFtZS5jbGVhcigpOwoJCW1fYk9wZW4gPSBmYWxzZTsKCX0KfQpib29sIENGaWxlTWVtb3J5TWFwOjpJc09wZW4oKSBjb25zdAp7CglyZXR1cm4gbV9iT3BlbjsKfQpjaGFyKiBDRmlsZU1lbW9yeU1hcDo6R2V0RGF0YSgpIGNvbnN0CnsKCXJldHVybiBtX3BGaWxlQWRkcjsKfQp1aW50NjRfdCBDRmlsZU1lbW9yeU1hcDo6R2V0U2l6ZSgpIGNvbnN0CnsKCXJldHVybiBtX2lsRmlsZUFkZHJNYXBMZW47Cn0KY29uc3Qgc3RkOjpzdHJpbmcmIENGaWxlTWVtb3J5TWFwOjpHZXRGaWxlTmFtZSgpIGNvbnN0CnsKCXJldHVybiBtX3N0ckZpbGVOYW1lOwp9CnZvaWQgQ0ZpbGVNZW1vcnlNYXA6OkluaXQoY29uc3Qgc3RkOjpzdHJpbmcmIHN0ckZpbGVOYW1lLCBDRmlsZU1lbW9yeU1hcE1vZGUgbW9kZSkKewoJbV9pbEZpbGVBZGRyTWFwTGVuID0gMDsKCW1fYk9wZW4gPSBmYWxzZTsKCW1fcEZpbGVBZGRyID0gTlVMTDsKI2lmZGVmIF9XSU4zMgoJbV9oRmlsZSA9IElOVkFMSURfSEFORExFX1ZBTFVFOwoJbV9oTWFwcGluZyA9IElOVkFMSURfSEFORExFX1ZBTFVFOwojZWxzZQoJbV9mZCA9IC0xOy8v5paH5Lu255qEZmQKI2VuZGlmIC8vIF9XSU4zMgoJT3BlbihzdHJGaWxlTmFtZSwgbW9kZSk7Cn0=
==M

==M2
I2luY2x1ZGUgPGlvc3RyZWFtPgojaW5jbHVkZSA8c3RyaW5nPgojaW5jbHVkZSA8ZnN0cmVhbT4KI2luY2x1ZGUgPHZlY3Rvcj4KZXh0ZXJuICJDIiB7CiNpbmNsdWRlIDxsaWJhdmZvcm1hdC9hdmZvcm1hdC5oPgojaW5jbHVkZSA8bGliYXZ1dGlsL2F2dXRpbC5oPgojaW5jbHVkZSA8bGliYXZjb2RlYy9hdmNvZGVjLmg+Cn0KI2luY2x1ZGUgPHN0Yi9zdGJfaW1hZ2Vfd3JpdGUuaD4KI2luY2x1ZGUgIkNGaWxlTWVtb3J5TWFwLmgiCiNpbmNsdWRlIDxzZXQ+Ci8v6I635Y+WIEgyNjTnvJbnoIFOQUznmoTljZXlhYPnsbvlnovvvIhVSU5UVFlQRe+8ieWNleWFg+exu+Wei+iMg+WbtOS4ujF+MjMg5qCH5YeG5Li6IDF+MTIKI2RlZmluZSBOQUxfVUlOVFRZUEUobmFsKSAoKG5hbCkmKDB4MUYpKQovL+iOt+WPliBIMjY057yW56CBTkFM55qE5LyY5YWI57qn77yIUkVGRVJFTkNFX0JJVO+8iQojZGVmaW5lIE5BTF9SRUZFUkVOQ0UobmFsKSAoKG5hbCkmKDB4NjApKQovL+iOt+WPliBIMjY057yW56CBTkFM55qE56aB5q2i5L2N77yIZm9yYmlkZGVyX2JpdO+8iQojZGVmaW5lIE5BTF9GT1JCSURERVIobmFsKSAoKG5hbCkmKDB4ODApKQp1c2luZyBOQUwgPSB1aW50OF90OwoKdWludDMyX3QgU3dhcEludDMyRGF0YSh1aW50MzJfdCBuVmFsdWVEYXRhKQp7CglyZXR1cm4gKChuVmFsdWVEYXRhICYgMHgwMDAwMDBGRikgPDwgMjQpIHwKCQkoKG5WYWx1ZURhdGEgJiAweDAwMDBGRjAwKSA8PCA4KSB8CgkJKChuVmFsdWVEYXRhICYgMHgwMEZGMDAwMCkgPj4gOCkgfAoJCSgoblZhbHVlRGF0YSAmIDB4RkYwMDAwMDApID4+IDI0KTsKfQoKdm9pZCBDb3B5RmlsZVN0cmVhbShzdGQ6Omlmc3RyZWFtJiBpbiwgc3RkOjpvZnN0cmVhbSYgb3V0LCBpbnQ2NF90IGxlbikgewoKCWNoYXIgYnVmWzEwMjRdOwoJaW50NjRfdCBjb3B5U2l6ZSA9IGxlbjsKCXdoaWxlIChjb3B5U2l6ZSA+IDApCgl7CgkJaW50NjRfdCByZWFkU2l6ZTsKCQlpZiAoY29weVNpemUgPCBzaXplb2YoYnVmKSkgewoJCQlyZWFkU2l6ZSA9IGNvcHlTaXplOwoJCX0KCQllbHNlIHsKCQkJcmVhZFNpemUgPSBzaXplb2YoYnVmKTsKCQl9CgkJaW4ucmVhZChidWYsIHJlYWRTaXplKTsKCQlvdXQud3JpdGUoYnVmLCByZWFkU2l6ZSk7CgkJY29weVNpemUgLT0gcmVhZFNpemU7Cgl9Cn0KCmJvb2wgSXNWaWRlb0ZyYW1lKHVpbnQ4X3QqIHBEYXRhLCBpbnQ2NF90IGlsRGF0YUxlbikgCnsKCU5BTCBuYWwgPSBwRGF0YVs0XTsKCXVpbnQ4X3QgbmFsVXR5cGUgPSBOQUxfVUlOVFRZUEUobmFsKTsKCWlmIChuYWxVdHlwZSA8PSAwIHx8IG5hbFV0eXBlID4gMTIpIHsKCQlyZXR1cm4gZmFsc2U7Cgl9Cgl1aW50MzJfdCBpRnJhbWVTaXplID0gU3dhcEludDMyRGF0YSgqKCh1aW50MzJfdCopKHBEYXRhKSkpOwoJaWYgKGlGcmFtZVNpemUgPCAyIHx8IGlGcmFtZVNpemUgPiAweDAwRkZGRkZGKSB7CgkJcmV0dXJuIGZhbHNlOwoJfQoJcmV0dXJuIHRydWU7Cn0KdHlwZWRlZiBzdHJ1Y3QgX2RtcF92aWRlb19mcmFtZQp7CglpbnQ2NF90IG9mZnNldDsKCXVpbnQzMl90IGxlbmd0aDsKfURWRlJBTUU7CmludCBtYWluKCkgewoJc3RkOjpzdHJpbmcgaW5wdXRGaWxlTmFtZSA9ICJEOlxcdDEubXA0X21kYXQiOwoJc3RkOjpzdHJpbmcgb3V0cHV0RmlsZU5hbWUgPSBpbnB1dEZpbGVOYW1lICsiX2RtcC5kYXRhIjsKCS8v5Yib5bu6SU/lr7nosaEKCXN0ZDo6b2ZzdHJlYW0gb3V0cHV0RmlsZVN0cmVhbShvdXRwdXRGaWxlTmFtZS5jX3N0cigpLHN0ZDo6aW9zOjpiaW5hcnl8c3RkOjppb3M6Om91dCk7CglpZiAob3V0cHV0RmlsZVN0cmVhbS5pc19vcGVuKCkgPT0gZmFsc2UpIHsKCQlyZXR1cm4gLTE7Cgl9CglDRmlsZU1lbW9yeU1hcCBjbEZpbGVNYXAoaW5wdXRGaWxlTmFtZSwgQ0ZpbGVNZW1vcnlNYXA6OkNGaWxlTWVtb3J5TWFwTW9kZTo6Q0ZpbGVNZW1vcnlNYXBNb2RlX1JlYWQpOwoJaWYgKCFjbEZpbGVNYXAuSXNPcGVuKCkpIHsKCQlyZXR1cm4gIC0xOwoJfQoJaW50NjRfdCBpbEZpbGVTaXplID0gY2xGaWxlTWFwLkdldFNpemUoKTsKCXVpbnQ4X3QqIHBEYXRhID0gKHVpbnQ4X3QqKWNsRmlsZU1hcC5HZXREYXRhKCk7CglzdGQ6OnZlY3RvcjxEVkZSQU1FPiB2ZWNWaWRlb0ZyYW1lczsKCWZvciAoaW50NjRfdCBpID0gMDsgaSA8IGlsRmlsZVNpemU7IGkrKykKCXsKCQl2ZWNWaWRlb0ZyYW1lcy5jbGVhcigpOwoJCWlmIChJc1ZpZGVvRnJhbWUoJnBEYXRhW2ldLCBpbEZpbGVTaXplIC0gaSkgPT0gZmFsc2UpIHsKCQkJY29udGludWU7CgkJfQoJCU5BTCBuYWwgPSBwRGF0YVtpICsgNF07CgkJdWludDhfdCBuYWxVdHlwZSA9IE5BTF9VSU5UVFlQRShuYWwpOwoJCWlmIChuYWxVdHlwZSAhPSAxICYmIG5hbFV0eXBlICE9IDYgJiYgbmFsVXR5cGUgIT0gOSkgewoJCQljb250aW51ZTsKCQl9CgkJdWludDMyX3QgaUZyYW1lU2l6ZSA9IFN3YXBJbnQzMkRhdGEoKigodWludDMyX3QqKSgmcERhdGFbaV0pKSk7CgkJaWYgKChpbnQ2NF90KWlGcmFtZVNpemUgPj0gaWxGaWxlU2l6ZSAtIGkgLSA0KSB7CgkJCWNvbnRpbnVlOwoJCX0KCQl2ZWNWaWRlb0ZyYW1lcy5wdXNoX2JhY2soeyBpICsgNCxpRnJhbWVTaXplIH0pOwoJCWludDY0X3QgaWxUbXBOZXh0T2Zmc2V0ID0gaSArIDQgKyBpRnJhbWVTaXplOwoJCXdoaWxlIChpbFRtcE5leHRPZmZzZXQgPCBpbEZpbGVTaXplKQoJCXsKCQkJaWYgKElzVmlkZW9GcmFtZSgmcERhdGFbaWxUbXBOZXh0T2Zmc2V0XSwgaWxGaWxlU2l6ZSAtIGlsVG1wTmV4dE9mZnNldCkgPT0gZmFsc2UpIAoJCQl7CgkJCQlicmVhazsKCQkJfQoJCQlOQUwgbmFsID0gcERhdGFbaWxUbXBOZXh0T2Zmc2V0ICsgNF07CgkJCXVpbnQ4X3QgbmFsVXR5cGUgPSBOQUxfVUlOVFRZUEUobmFsKTsKCQkJaWYgKChuYWxVdHlwZSA9PSA3IHx8IG5hbFV0eXBlID09IDgpICYmIHZlY1ZpZGVvRnJhbWVzLnNpemUoKSA+IDEpIHsKCQkJCWJyZWFrOwoJCQl9CgkJCWlGcmFtZVNpemUgPSBTd2FwSW50MzJEYXRhKCooKHVpbnQzMl90KikoJnBEYXRhW2lsVG1wTmV4dE9mZnNldF0pKSk7CgkJCWlmICgoaW50NjRfdClpRnJhbWVTaXplID4gaWxGaWxlU2l6ZSAtIGlsVG1wTmV4dE9mZnNldCAtIDQpIHsKCQkJCWJyZWFrOwoJCQl9CgkJCXZlY1ZpZGVvRnJhbWVzLnB1c2hfYmFjayh7IGlsVG1wTmV4dE9mZnNldCArIDQsaUZyYW1lU2l6ZSB9KTsKCQkJaWxUbXBOZXh0T2Zmc2V0ICs9ICgoaW50NjRfdClpRnJhbWVTaXplICsgNCk7CgkJfQoJCWlmICh2ZWNWaWRlb0ZyYW1lcy5zaXplKCkgPCAyKSB7CgkJCWNvbnRpbnVlOwoJCX0KCQlpID0gaWxUbXBOZXh0T2Zmc2V0OwoJCXByaW50ZigiRnJhbWVDb3VudCAlZFxuIiwgdmVjVmlkZW9GcmFtZXMuc2l6ZSgpKTsKCQlmb3IgKGF1dG8gaXRvciA9IHZlY1ZpZGVvRnJhbWVzLmJlZ2luKCk7IGl0b3IgIT0gdmVjVmlkZW9GcmFtZXMuZW5kKCk7IGl0b3IrKykKCQl7CgkJCWNoYXIgYnVmWzRdID0geyAwLDAsMCwxIH07CgkJCW91dHB1dEZpbGVTdHJlYW0ud3JpdGUoYnVmLCA0KTsKCQkJY29uc3QgRFZGUkFNRSYgdmlkZW9GcmFtZSA9ICppdG9yOwoJCQlvdXRwdXRGaWxlU3RyZWFtLndyaXRlKChjb25zdCBjaGFyKikoJnBEYXRhW3ZpZGVvRnJhbWUub2Zmc2V0XSksdmlkZW9GcmFtZS5sZW5ndGgpOwoJCX0KCX0KCW91dHB1dEZpbGVTdHJlYW0uY2xvc2UoKTsKCXJldHVybiAwOwp9Cgo=
Mp4Repair::CMp4CorruptExtract
==C
I2luY2x1ZGUgIkNNcDRDb3JydXB0RXh0cmFjdC5oIgoKTXA0UmVwYWlyOjpDTXA0Q29ycnVwdEV4dHJhY3Q6OkNNcDRDb3JydXB0RXh0cmFjdCgpCnsKfQoKTXA0UmVwYWlyOjpDTXA0Q29ycnVwdEV4dHJhY3Q6On5DTXA0Q29ycnVwdEV4dHJhY3QoKQp7Cn0KCnZvaWQgTXA0UmVwYWlyOjpDTXA0Q29ycnVwdEV4dHJhY3Q6OkV4dHJhY3QoQ01wNEV4dHJhY3RGcmFtZXMmIGZyYW1lcywgdWludDhfdCogcERhdGEsIGludDY0X3QgaWxEYXRhTGVuKQp7CglpZiAoZnJhbWVzLmVtcHR5KCkpIHsKCQlyZXR1cm47Cgl9CglzdGQ6OnZlY3RvcjxNcDRSZXBhaXI6OkR1bXBGcmFtZT4gYXJyRG1wRnJhbWVzOwoJZm9yIChpbnQ2NF90IGkgPSAwOyBpIDwgaWxEYXRhTGVuOyBpKyspCgl7CgkJYXJyRG1wRnJhbWVzLmNsZWFyKCk7CgkJZm9yIChhdXRvIHJlZkV4dEZyYW1lcyA9IGZyYW1lcy5iZWdpbigpOyByZWZFeHRGcmFtZXMgIT0gZnJhbWVzLmVuZCgpOyByZWZFeHRGcmFtZXMrKykKCQl7CgkJCXVpbnQzMl90IGlUYWcgPSByZWZFeHRGcmFtZXMtPmZpcnN0OwoJCQlib29sIGJEdW1wU3VjID0gZmFsc2U7CgkJCWludDY0X3QgaWxEdW1wTGVuID0gMDsKCQkJc3dpdGNoIChpVGFnKQoJCQl7CgkJCWNhc2UgTUtUQUcoJ2gnLCcyJywgJzYnLCc0Jyk6CgkJCWNhc2UgTUtUQUcoJ2EnLCd2JywgJ2MnLCdDJyk6CgkJCWNhc2UgTUtUQUcoJ2EnLCd2JywgJ2MnLCcxJyk6CgkJCXsKCQkJCWlsRHVtcExlbiA9IER1bXBIMjY0VmlkZW9GcmFtZSgmcERhdGFbaV0sIGlsRGF0YUxlbiAtIGksIGFyckRtcEZyYW1lcyk7CgkJCQlpZiAoYXJyRG1wRnJhbWVzLnNpemUoKSA+PSAyKSB7CgkJCQkJcHJpbnRmKCJbJWxkXSBWaWRlbyBGcmFtZSAlbGQgXG4iLCBpLCBhcnJEbXBGcmFtZXMuc2l6ZSgpKTsKCQkJCQlmb3IgKGF1dG8gcmVmRG1wRnJhbWUgPSBhcnJEbXBGcmFtZXMuYmVnaW4oKTsgcmVmRG1wRnJhbWUgIT0gYXJyRG1wRnJhbWVzLmVuZCgpOyByZWZEbXBGcmFtZSsrKQoJCQkJCXsKCQkJCQkJcmVmRXh0RnJhbWVzLT5zZWNvbmQucHVzaF9iYWNrKCpyZWZEbXBGcmFtZSk7CgkJCQkJfQoJCQkJfQoJCQl9YnJlYWs7CgkJCWNhc2UgTUtUQUcoJ2EnLCAnYycsICctJywgJzMnKTogCgkJCXsKCQkJCWlsRHVtcExlbiA9IER1bXBBQzNBdWRpb0ZyYW1lKCZwRGF0YVtpXSwgaWxEYXRhTGVuIC0gaSwgYXJyRG1wRnJhbWVzKTsKCQkJCWlmIChhcnJEbXBGcmFtZXMuc2l6ZSgpID49IDIpIHsKCQkJCQlwcmludGYoIlslbGRdIEF1ZGlvIEZyYW1lICVsZCBcbiIsIGksIGFyckRtcEZyYW1lcy5zaXplKCkpOwoJCQkJfQoJCQl9CgkJCWRlZmF1bHQ6CgkJCQlicmVhazsKCQkJfQoJCQlpZiAoYXJyRG1wRnJhbWVzLnNpemUoKSA+PSAyIHx8IGJEdW1wU3VjID09IHRydWUpIAoJCQl7CgkJCQlpICs9IChpbER1bXBMZW4gLSAxKTsKCQkJCWJyZWFrOwoJCQl9CgkJfQoJfQp9CgppbnQ2NF90IE1wNFJlcGFpcjo6Q01wNENvcnJ1cHRFeHRyYWN0OjpEdW1wSDI2NFZpZGVvRnJhbWUodWludDhfdCogcERhdGEsIGludDY0X3QgaWxEYXRhTGVuLCBzdGQ6OnZlY3RvcjxEdW1wRnJhbWU+JiBmcmFtZXMpCnsKCXVpbnQ4X3QqIHBUbXBEYXRhID0gcERhdGE7Cgl1aW50NjRfdCBpbFRtcERhdGFMZW4gPSBpbERhdGFMZW47CglETVBGUkFNRSBzdERtcEZyYW1lOwoJcFRtcERhdGEgPSBtX3N0TXA0SDI2NFBhcnNlci5HZXRGcmFtZUFuZE5leHQoc3REbXBGcmFtZSwgcFRtcERhdGEsIGlsVG1wRGF0YUxlbik7CglpZiAoc3REbXBGcmFtZS5wRnJhbWVEYXRhICE9IE5VTEwgJiYgc3REbXBGcmFtZS5pRnJhbWVTaXplID4gMCkgCgl7CgkJTkFMIG5hbCA9IHN0RG1wRnJhbWUucEZyYW1lRGF0YVswXTsKCQl1aW50OF90IG5hbFVUeXBlID0gTkFMX1VJTlRUWVBFKG5hbCk7CgkJaWYgKG5hbFVUeXBlICE9IDEgJiYgbmFsVVR5cGUgIT0gNSAmJiBuYWxVVHlwZSAhPSA2ICYmIG5hbFVUeXBlICE9IDkpIAoJCXsKCQkJcmV0dXJuIDA7CgkJfQoJfQoJaW50NjRfdCBpbER1bXBMZW4gPSAwOwoJd2hpbGUgKHBUbXBEYXRhICE9IE5VTEwgJiYgc3REbXBGcmFtZS5wRnJhbWVEYXRhICE9IE5VTEwgJiYgc3REbXBGcmFtZS5pRnJhbWVTaXplID4gMCkKCXsKCQlpbER1bXBMZW4gKz0gKHN0RG1wRnJhbWUuaUZyYW1lU2l6ZSArIDQpOwoJCWZyYW1lcy5wdXNoX2JhY2soc3REbXBGcmFtZSk7CgkJcFRtcERhdGEgPSBtX3N0TXA0SDI2NFBhcnNlci5HZXRGcmFtZUFuZE5leHQoc3REbXBGcmFtZSwgcFRtcERhdGEsIGlsVG1wRGF0YUxlbik7Cgl9CiAgICByZXR1cm4gaWxEdW1wTGVuOwp9CgppbnQ2NF90IE1wNFJlcGFpcjo6Q01wNENvcnJ1cHRFeHRyYWN0OjpEdW1wQUMzQXVkaW9GcmFtZSh1aW50OF90KiBwRGF0YSwgaW50NjRfdCBpbERhdGFMZW4sIHN0ZDo6dmVjdG9yPERNUEZSQU1FPiYgZnJhbWVzKQp7Cgl1aW50OF90KiBwVG1wRGF0YSA9IHBEYXRhOwoJdWludDY0X3QgaWxUbXBEYXRhTGVuID0gaWxEYXRhTGVuOwoJRE1QRlJBTUUgc3REbXBGcmFtZTsKCXBUbXBEYXRhID0gbV9zdE1wNEFDM1BhcnNlci5HZXRGcmFtZUFuZE5leHQoc3REbXBGcmFtZSwgcFRtcERhdGEsIGlsVG1wRGF0YUxlbik7CglpbnQ2NF90IGlsRHVtcExlbiA9IDA7Cgl3aGlsZSAocFRtcERhdGEgIT0gTlVMTCAmJiBzdERtcEZyYW1lLnBGcmFtZURhdGEgIT0gTlVMTCAmJiBzdERtcEZyYW1lLmlGcmFtZVNpemUgPiAwKQoJewoJCWZyYW1lcy5wdXNoX2JhY2soc3REbXBGcmFtZSk7CgkJaWxEdW1wTGVuICs9IHN0RG1wRnJhbWUuaUZyYW1lU2l6ZTsKCQlwVG1wRGF0YSA9IG1fc3RNcDRBQzNQYXJzZXIuR2V0RnJhbWVBbmROZXh0KHN0RG1wRnJhbWUsIHBUbXBEYXRhLCBpbFRtcERhdGFMZW4pOwoJfQoJcmV0dXJuIGlsRHVtcExlbjsKfQoKYm9vbCBNcDRSZXBhaXI6OkNNcDRIMjY0UGFyc2VyOjpJc0ZyYW1lKHVpbnQ4X3QqIHBEYXRhLCBpbnQ2NF90IGlsRGF0YUxlbikKewoJaWYgKGlsRGF0YUxlbiA8IDUpIHsKCQlyZXR1cm4gZmFsc2U7Cgl9CglOQUwgbmFsID0gcERhdGFbNF07Cgl1aW50OF90IG5hbFR5cGUgPSBOQUxfVUlOVFRZUEUobmFsKTsKCWlmIChuYWxUeXBlID4gMTMgfHwgbmFsVHlwZSA8PSAwIHx8IG5hbFR5cGUgPT0gNyB8fCBuYWxUeXBlID09IDgpCgl7CgkJcmV0dXJuIDA7Cgl9Cgl1aW50MzJfdCBpRnJhbWVTaXplID0gU3dhcEludDMyRGF0YSgqKCh1aW50MzJfdCopcERhdGEpKTsKCWlmIChpRnJhbWVTaXplIDw9IDAgfHwgaUZyYW1lU2l6ZSA+IDB4MDBGRkZGRkYpIHsKCQlyZXR1cm4gMDsKCX0KCXJldHVybiB0cnVlOwp9Cgp1aW50OF90KiBNcDRSZXBhaXI6OkNNcDRIMjY0UGFyc2VyOjpHZXRGcmFtZUFuZE5leHQoRE1QRlJBTUUmIHN0RnJhbWUsIHVpbnQ4X3QqIHBEYXRhLCBpbnQ2NF90IGlsRGF0YUxlbikKewoJc3RGcmFtZS5wRnJhbWVEYXRhID0gTlVMTDsKCXN0RnJhbWUuaUZyYW1lU2l6ZSA9IDA7CglpZiAoSXNGcmFtZShwRGF0YSwgaWxEYXRhTGVuKSA9PSBmYWxzZSkgewoJCXJldHVybiBwRGF0YTsKCX0KCXVpbnQzMl90IGlGcmFtZVNpemUgPSBTd2FwSW50MzJEYXRhKCooKHVpbnQzMl90KilwRGF0YSkpOwoJaWYgKGlGcmFtZVNpemUgIDwgMiB8fCBpRnJhbWVTaXplID4gMHgwMEZGRkZGRiB8fChpbnQ2NF90KWlGcmFtZVNpemUgPiAoaWxEYXRhTGVuIC0gNCkpIHsKCQlyZXR1cm4gcERhdGE7Cgl9CgllbHNlIHsKCQlzdEZyYW1lLnBGcmFtZURhdGEgPSBwRGF0YSArIDQ7CgkJc3RGcmFtZS5pRnJhbWVTaXplID0gaUZyYW1lU2l6ZTsKCQlyZXR1cm4gKHBEYXRhICsgNCArIGlGcmFtZVNpemUpOwoJfQoJcmV0dXJuIHBEYXRhOwp9CgpNcDRSZXBhaXI6OkNNcDRBQzNQYXJzZXI6OkNNcDRBQzNQYXJzZXIoKQp7CgltX2lCdWZmZXJTaXplREIgPSAxNjcyOwp9Cgp2b2lkIE1wNFJlcGFpcjo6Q01wNEFDM1BhcnNlcjo6U2V0QnVmZmVyU2l6ZURCKGludCBpU2l6ZSkKewoJbV9pQnVmZmVyU2l6ZURCID0gaVNpemU7Cn0KCmJvb2wgTXA0UmVwYWlyOjpDTXA0QUMzUGFyc2VyOjpJc0ZyYW1lKHVpbnQ4X3QqIHBEYXRhLCBpbnQ2NF90IGlsRGF0YUxlbikKewoJaWYgKGlsRGF0YUxlbiA8IDEyNikgewoJCXJldHVybiBmYWxzZTsKCX0KCWlmIChwRGF0YVswXSAhPSBBQzNfQVNOQ0hXT1JEIHx8IHBEYXRhWzFdICE9IEFDM19BU05DTFdPUkQpIHsKCQlyZXR1cm4gZmFsc2U7Cgl9CglyZXR1cm4gdHJ1ZTsKfQoKdWludDhfdCogTXA0UmVwYWlyOjpDTXA0QUMzUGFyc2VyOjpHZXRGcmFtZUFuZE5leHQoRE1QRlJBTUUmIHN0RnJhbWUsIHVpbnQ4X3QqIHBEYXRhLCBpbnQ2NF90IGlsRGF0YUxlbikKewoJc3RGcmFtZS5wRnJhbWVEYXRhID0gTlVMTDsKCXN0RnJhbWUuaUZyYW1lU2l6ZSA9IDA7CglpZiAobV9pQnVmZmVyU2l6ZURCIDwgMTI2KSB7CgkJcmV0dXJuIHBEYXRhOwoJfQoJaWYgKElzRnJhbWUocERhdGEsIGlsRGF0YUxlbikgPT0gZmFsc2UpCgl7CgkJcmV0dXJuIHBEYXRhOwoJfQoKCWludDMyX3QgaVRtaUZyYW1lU2l6ZSA9IDA7Cgl1aW50OF90KiBwTmV4dFB0ciA9IHBEYXRhOwoJaWYgKGlsRGF0YUxlbiAtIDEyNiA+IG1faUJ1ZmZlclNpemVEQikKCXsKCQlpZiAoSXNGcmFtZSgmcERhdGFbbV9pQnVmZmVyU2l6ZURCIC0gMl0sIGlsRGF0YUxlbiAtIG1faUJ1ZmZlclNpemVEQiAtIDIpKQoJCXsKCQkJaVRtaUZyYW1lU2l6ZSA9IG1faUJ1ZmZlclNpemVEQiAtIDI7CgkJfQoJCWVsc2UgewoJCQlpVG1pRnJhbWVTaXplID0gbV9pQnVmZmVyU2l6ZURCOwoJCX0KCQlwTmV4dFB0ciA9ICZwRGF0YVtpVG1pRnJhbWVTaXplXTsKCX0KCWVsc2UgewoJCWlmIChpbERhdGFMZW4gPD0gbV9pQnVmZmVyU2l6ZURCKQoJCXsKCQkJcE5leHRQdHIgPSBOVUxMOwoJCQlpVG1pRnJhbWVTaXplID0gaWxEYXRhTGVuOwoJCX0KCQllbHNlIAoJCXsKCQkJaVRtaUZyYW1lU2l6ZSA9IG1faUJ1ZmZlclNpemVEQjsKCQkJcE5leHRQdHIgPSAmcERhdGFbaVRtaUZyYW1lU2l6ZV07CgkJfQoJCWlUbWlGcmFtZVNpemUgPSBzdGQ6Om1pbjxpbnQzMl90PihpbERhdGFMZW4sIG1faUJ1ZmZlclNpemVEQik7Cgl9CglpZiAoaVRtaUZyYW1lU2l6ZSA+IDApCgl7CgkJc3RGcmFtZS5wRnJhbWVEYXRhID0gcERhdGE7CgkJc3RGcmFtZS5pRnJhbWVTaXplID0gaVRtaUZyYW1lU2l6ZTsKCX0KCglyZXR1cm4gcE5leHRQdHI7Cn0K
==H
I3ByYWdtYSBvbmNlCiNpbmNsdWRlIDxjc3RkaW50PgojaW5jbHVkZSA8dmVjdG9yPgojaW5jbHVkZSA8bWFwPgojaW5jbHVkZSA8c3RyaW5nPgojaW5jbHVkZSAiQ29tRnVuLmhwcCIKCi8v6I635Y+WIEgyNjTnvJbnoIFOQUznmoTljZXlhYPnsbvlnovvvIhVSU5UVFlQRe+8ieWNleWFg+exu+Wei+iMg+WbtOS4ujF+MjMg5qCH5YeG5Li6IDF+MTIKI2RlZmluZSBOQUxfVUlOVFRZUEUobmFsKSAoKG5hbCkmKDB4MUYpKQovL+iOt+WPliBIMjY057yW56CBTkFM55qE5LyY5YWI57qn77yIUkVGRVJFTkNFX0JJVO+8iQojZGVmaW5lIE5BTF9SRUZFUkVOQ0UobmFsKSAoKG5hbCkmKDB4NjApKQovL+iOt+WPliBIMjY057yW56CBTkFM55qE56aB5q2i5L2N77yIZm9yYmlkZGVyX2JpdO+8iQojZGVmaW5lIE5BTF9GT1JCSURERVIobmFsKSAoKG5hbCkmKDB4ODApKQpuYW1lc3BhY2UgTXA0UmVwYWlyIHsKCXVzaW5nIE5BTCA9IHVpbnQ4X3Q7CgoJY29uc3QgdWludDhfdCBBQzNfQVNOQ0hXT1JEID0gMHgwQjsKCWNvbnN0IHVpbnQ4X3QgQUMzX0FTTkNMV09SRCA9IDB4Nzc7Cgljb25zdCB1aW50OF90IEFDM19BU05DV09SRFsyXSA9IHsgQUMzX0FTTkNIV09SRCwgQUMzX0FTTkNMV09SRCB9OwoKCXR5cGVkZWYgc3RydWN0IF9EdW1wRnJhbWUKCXsKCQlzdGQ6Om1hcDxzdGQ6OnN0cmluZywgc3RkOjpzdHJpbmc+IG1wUGFyYW1zOwoJCXVpbnQ4X3QqIHBGcmFtZURhdGE7CgkJaW50MzJfdCBpRnJhbWVTaXplOwoJCV9EdW1wRnJhbWUodWludDhfdCogZGF0YSA9IG51bGxwdHIsIGludDY0X3Qgc2l6ZSA9IDApIDoKCQkJcEZyYW1lRGF0YShkYXRhKSwKCQkJaUZyYW1lU2l6ZShzaXplKSB7fTsKCX0gRHVtcEZyYW1lLCBETVBGUkFNRTsKCgljbGFzcyBDTXA0SDI2NFBhcnNlcnsKCXB1YmxpYzoKCQlib29sIElzRnJhbWUodWludDhfdCogcERhdGEsIGludDY0X3QgaWxEYXRhTGVuKTsKCQkvL+iOt+WPluW9k+WJjeW4p++8jOWmguaenOaIkOWKn+enu+WKqOWIsOS4i+S4gOS4quS9jee9ru+8jOWmguaenOWksei0pe+8jOS4jeenu+WKqOi/lOWbnuWOn+S9jee9ru+8jHN0RnJhbWXorr7nva7kuLrnqboKCQkvL+eJueWIq+azqOaEj++8jOWvueS6jk1QNOeahOinhumikeW4p++8jOi/lOWbnueahHN0RnJhbWXkuI3ljIXlkKvliY006KGo56S66ZW/5bqm55qE5a2X6IqCCgkJdWludDhfdCogR2V0RnJhbWVBbmROZXh0KERNUEZSQU1FJiBzdEZyYW1lLHVpbnQ4X3QqIHBEYXRhLCBpbnQ2NF90IGlsRGF0YUxlbik7Cgl9OwoKCWNsYXNzIENNcDRBQzNQYXJzZXIgewoJcHJpdmF0ZToKCQlpbnQgbV9pQnVmZmVyU2l6ZURCOwoJcHVibGljOgoJCUNNcDRBQzNQYXJzZXIoKTsKCXB1YmxpYzoKCgkJdm9pZCBTZXRCdWZmZXJTaXplREIoaW50IGlTaXplKTsKCgkJYm9vbCBJc0ZyYW1lKHVpbnQ4X3QqIHBEYXRhLCBpbnQ2NF90IGlsRGF0YUxlbik7CgkJLy/ojrflj5blvZPliY3luKfvvIzlpoLmnpzmiJDlip/np7vliqjliLDkuIvkuIDkuKrkvY3nva7vvIzlpoLmnpzlpLHotKXvvIzkuI3np7vliqjvvIxzdEZyYW1l6K6+572u5Li656m6CgkJdWludDhfdCogR2V0RnJhbWVBbmROZXh0KERNUEZSQU1FJiBzdEZyYW1lLCB1aW50OF90KiBwRGF0YSwgaW50NjRfdCBpbERhdGFMZW4pOwoJfTsKCgl1c2luZyBDTXA0RXh0cmFjdEZyYW1lcyA9IHN0ZDo6bWFwPHVpbnQzMl90LCBzdGQ6OnZlY3RvcjxETVBGUkFNRT4+OwoJY2xhc3MgQ01wNENvcnJ1cHRFeHRyYWN0Cgl7CglwdWJsaWM6CgkJQ01wNEgyNjRQYXJzZXIgbV9zdE1wNEgyNjRQYXJzZXI7CgkJQ01wNEFDM1BhcnNlciBtX3N0TXA0QUMzUGFyc2VyOwoJcHVibGljOgoJCUNNcDRDb3JydXB0RXh0cmFjdCgpOwoJCX5DTXA0Q29ycnVwdEV4dHJhY3QoKTsKCXB1YmxpYzoKCQl2b2lkIEV4dHJhY3QoQ01wNEV4dHJhY3RGcmFtZXMmIGZyYW1lcyx1aW50OF90KiBwRGF0YSxpbnQ2NF90IGlsRGF0YUxlbik7CglwdWJsaWM6CgkJaW50NjRfdCBEdW1wSDI2NFZpZGVvRnJhbWUodWludDhfdCogcERhdGEsIGludDY0X3QgaWxEYXRhTGVuLCBzdGQ6OnZlY3RvcjxETVBGUkFNRT4mIGZyYW1lcyk7CgkJaW50NjRfdCBEdW1wQUMzQXVkaW9GcmFtZSh1aW50OF90KiBwRGF0YSwgaW50NjRfdCBpbERhdGFMZW4sIHN0ZDo6dmVjdG9yPERNUEZSQU1FPiYgZnJhbWVzKTsKCX07CgkKfQoK
==

==
I2luY2x1ZGUgIkNWaWRlb0NvbnZlci5oIgojaW5jbHVkZSA8YWxnb3JpdGhtPgojaW5jbHVkZSA8aW50dHlwZXMuaD4KI3ByYWdtYSB3YXJuaW5nKGRpc2FibGUgOiA0OTk2KQpDVmlkZW9Db252ZXI6OkNWaWRlb0NvbnZlcigpCnsKICAgIGluaXQoKTsKfQpDVmlkZW9Db252ZXI6On5DVmlkZW9Db252ZXIoKQp7CiAgICBTdG9wKCk7Cn0KCnZvaWQgQ1ZpZGVvQ29udmVyOjpTZXRDYWxsYmFjayhJVmlkZW9Qcm9jZXNzQ2FsbGJhY2sqIGNiKQp7CiAgICBtX0NhbGxiYWNrID0gY2I7Cn0KCnZvaWQgQ1ZpZGVvQ29udmVyOjpTdG9wKCkKewogICAgbV9TdG9wID0gdHJ1ZTsKICAgIENvbnRpbnVlKCk7CiAgICBzdGQ6OmxvY2tfZ3VhcmQ8Q1RocmVhZExvY2s+IF9fc3RvcF9ldmVudF91c2UobV9TdG9wRXZlbnQpOwp9Cgp2b2lkIENWaWRlb0NvbnZlcjo6UGF1c2UoKQp7CiAgICBtX1BhdXNlID0gdHJ1ZTsKfQoKdm9pZCBDVmlkZW9Db252ZXI6OkNvbnRpbnVlKCkKewogICAgaWYgKG1fUGF1c2UgIT0gdHJ1ZSkKICAgIHsKICAgICAgICByZXR1cm47CiAgICB9CiAgICBtX1BhdXNlID0gZmFsc2U7CiAgICBtX1BhdXNlRXZlbnQubm90aWZ5X2FsbCgpOwp9Cgp2b2lkIENWaWRlb0NvbnZlcjo6Q29udmVyKGNvbnN0IFRDSEFSKiBjc3RyVVJMLCBjb25zdCBUQ0hBUiogY3N0clNhdmVGaWxlLCBpbnQgb3B0aW9ucykKewogICAgc3RkOjpsb2NrX2d1YXJkPENUaHJlYWRMb2NrPiBfX3N0b3BfZXZlbnRfdXNlKG1fU3RvcEV2ZW50KTsKICAgIHN0ZHRzdHJpbmcgc3RyVVJMID0gY3N0clVSTCA9PSBudWxscHRyID8gX1QoIiIpIDogY3N0clVSTDsKICAgIHN0ZHRzdHJpbmcgc3RyU2F2ZUZpbGUgPSBjc3RyU2F2ZUZpbGUgPT0gbnVsbHB0ciA/IF9UKCIiKSA6IGNzdHJTYXZlRmlsZTsKICAgIGJvb2wgYlJldCA9IGZhbHNlOwogICAgYlJldCA9IENvbnZlcl8oU3RyQ1QyQShzdHJVUkwpLCBTdHJDVDJBKHN0clNhdmVGaWxlKSwgb3B0aW9ucyk7Cn0KCmJvb2wgQ1ZpZGVvQ29udmVyOjpDb252ZXJfKGNvbnN0IHN0ZDo6c3RyaW5nJiBzdHJJbkZpbGUsIGNvbnN0IHN0ZDo6c3RyaW5nJiBzdHJTYXZlRmlsZSxpbnQgb3B0aW9ucykKewogICAgcHJpbnRmKCJBQ29weSAlZCwgVkNvcHkgJWQgXG4iLCBDT05WRVJfQ0hFQ0tfVVNFKG9wdGlvbnMsIENPTlZFUl9BQ09ERUNfQ09QWSksIENPTlZFUl9DSEVDS19VU0Uob3B0aW9ucywgQ09OVkVSX1ZDT0RFQ19DT1BZKSk7CiAgICBpbnQgaVJldCA9IDA7CiAgICBBVkZvcm1hdENvbnRleHQqJiBpbkZtdEN0eCA9IG1fSUZtdEN0eDsgLy8gYXZmb3JtYXRfYWxsb2NfY29udGV4dCgpOwogICAgQVZGb3JtYXRDb250ZXh0KiYgb3V0Rm10Q3R4ID0gbV9PRm10Q3R4OyAvLyBhdmZvcm1hdF9hbGxvY19jb250ZXh0KCk7CiAgICBzdGQ6Om1hcDxpbnQsIGludD4mIG1wU3RyZWFtTWFwID0gbV9TdHJlYW1NYXA7CiAgICBzdGQ6OnZlY3RvcjxTdHJlYW1Db250ZXh0PiYgc3RyZWFtQ3R4cyA9IG1fU3RyZWFtQ3R4czsKICAgIG91dEZtdEN0eCA9IGF2Zm9ybWF0X2FsbG9jX2NvbnRleHQoKTsKICAgIGluRm10Q3R4ID0gYXZmb3JtYXRfYWxsb2NfY29udGV4dCgpOwogICAgaW50IGlSZXRDb2RlID0gMDsKICAgIHN0ZDo6c3RyaW5nIHN0clJldE1zZyA9ICIiOwogICAgZG8KICAgIHsKICAgICAgICAvL+iuvue9ruWbnuiwgwogICAgICAgIGluRm10Q3R4LT5pbnRlcnJ1cHRfY2FsbGJhY2suY2FsbGJhY2sgPSBJbnB1dEludGVycnVwdENhbGxiYWNrOwogICAgICAgIGluRm10Q3R4LT5pbnRlcnJ1cHRfY2FsbGJhY2sub3BhcXVlID0gdGhpczsKICAgICAgICAvLwogICAgICAgIC8v5omT5byA6L6T5YWl5paH5Lu2CiAgICAgICAgaVJldCA9IE9wZW5JbnB1dEZpbGUoc3RySW5GaWxlKTsKICAgICAgICBpZiAoaVJldCAhPSAwKQogICAgICAgIHsKICAgICAgICAgICAgaVJldENvZGUgPSBETF9DT0RFX1RPSU5UKFZpZGVvRG93bmxvYWRDb2RlOjprVmlkZW9Eb3dubG9hZENvZGVfT3BlblVSTEZhaWxsKTsKICAgICAgICAgICAgc3RyUmV0TXNnID0gU3RyRm9ybWF0QSgiKCVkKSBGYWlsZWQgdG8gb3BlbiB0aGUgaW5wdXQgZmlsZSEiLCBpUmV0KTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICAgIGF2X2xvZyhOVUxMLEFWX0xPR19ERUJVRywiXG49PT09PT09PT09PT1cbiIpOwogICAgICAgIGF2X2R1bXBfZm9ybWF0KGluRm10Q3R4LCAwLCAwLCAwKTsKICAgICAgICBhdl9sb2coTlVMTCwgQVZfTE9HX0RFQlVHLCAiXG49PT09PT09PT09PT1cbiIpOwogICAgICAgIC8vCiAgICAgICAgLy/miZPlvIDovpPlh7oKICAgICAgICBpUmV0ID0gT3Blbk91dHB1dEZpbGUoc3RyU2F2ZUZpbGUpOwogICAgICAgIGlmIChpUmV0ICE9IDApCiAgICAgICAgewogICAgICAgICAgICBpUmV0Q29kZSA9IERMX0NPREVfVE9JTlQoVmlkZW9Eb3dubG9hZENvZGU6OmtWaWRlb0Rvd25sb2FkQ29kZV9PcGVuRmFpbGwpOwogICAgICAgICAgICBzdHJSZXRNc2cgPSBTdHJGb3JtYXRBKCIoJWQpIEZhaWxlZCB0byBvcGVuIHRoZSBvdXRwdXQgZmlsZSEiLCBpUmV0KTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgfQoKICAgICAgICBhdl9sb2coTlVMTCwgQVZfTE9HX0RFQlVHLCAiXG49PT09PT09PT09PT1cbiIpOwogICAgICAgIGF2X2R1bXBfZm9ybWF0KG91dEZtdEN0eCwgMCwgMCwgMSk7CiAgICAgICAgYXZfbG9nKE5VTEwsIEFWX0xPR19ERUJVRywgICI9PT09PT09PT09PT1cbiIpOwoKICAgICAgICAvL+WIneWni+WMluetm+mAieWZqAogICAgICAgIC8vaVJldCA9IEluaXRGaWx0ZXJzKCk7CiAgICAgICAgaWYgKGlSZXQgIT0gMCkKICAgICAgICB7CiAgICAgICAgICAgIGlSZXRDb2RlID0gRExfQ09ERV9UT0lOVChWaWRlb0Rvd25sb2FkQ29kZTo6a1ZpZGVvRG93bmxvYWRDb2RlX0luaXRGaWx0ZXJGYWlsbCk7CiAgICAgICAgICAgIHN0clJldE1zZyA9IFN0ckZvcm1hdEEoIiglZCkgRmFpbGVkIHRvIGluaXQgZmlsdGVycyEiLCBpUmV0KTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgfQoKICAgICAgICAvKiBpbml0IG11eGVyLCB3cml0ZSBvdXRwdXQgZmlsZSBoZWFkZXIgKi8KICAgICAgICBpUmV0ID0gYXZmb3JtYXRfd3JpdGVfaGVhZGVyKG91dEZtdEN0eCwgTlVMTCk7CiAgICAgICAgaWYgKGlSZXQgPCAwKSB7CiAgICAgICAgICAgIGF2X2xvZyhOVUxMLCBBVl9MT0dfRVJST1IsICJFcnJvciBvY2N1cnJlZCB3aGVuIG9wZW5pbmcgb3V0cHV0IGZpbGVcbiIpOwogICAgICAgICAgICBpUmV0Q29kZSA9IERMX0NPREVfVE9JTlQoVmlkZW9Eb3dubG9hZENvZGU6OmtWaWRlb0Rvd25sb2FkQ29kZV9PcGVuRmFpbGwpOwogICAgICAgICAgICBzdHJSZXRNc2cgPSBTdHJGb3JtYXRBKCIoJWQpIEVycm9yIG9jY3VycmVkIHdoZW4gb3BlbmluZyBvdXRwdXQgZmlsZVxuIiwgaVJldCk7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgICAvL+i/m+W6puadoQogICAgICAgIEFWTWVkaWFUeXBlIG9NZWRpYVR5cGUgPSBHZXRPdXRNZWRpYVR5cGUob3V0Rm10Q3R4KSA9PSAiYXVkaW8iID8gQVZNZWRpYVR5cGU6OkFWTUVESUFfVFlQRV9BVURJTyA6IEFWTWVkaWFUeXBlOjpBVk1FRElBX1RZUEVfVklERU87CiAgICAgICAgaW50NjRfdCBpbEN1clRpbWUgPSAwOwogICAgICAgIGludDY0X3QgaWxNYXhUaW1lID0gaW5GbXRDdHgtPmR1cmF0aW9uIC8gMTAwMDsKICAgICAgICBkb3VibGUgZFByb2Nlc3MgPSAwOwoKICAgICAgICAvL+e7n+iuoeS/oeaBrwogICAgICAgIGludDY0X3QgaWxWaWRlb1NpemUgPSAwOwogICAgICAgIGludDY0X3QgaWxBdWRpb1NpemUgPSAwOwoKICAgICAgICAvL+W+queOr+ivu+WPluWqkuS9k+aWh+S7tueahOW4pwogICAgICAgIHdoaWxlICghbV9TdG9wKQogICAgICAgIHsKICAgICAgICAgICAgQVZQYWNrZXQgaW5GcmFtZVBrdDsKICAgICAgICAgICAgaW5GcmFtZVBrdC5kYXRhID0gbnVsbHB0cjsKICAgICAgICAgICAgaW5GcmFtZVBrdC5zaXplID0gMDsKICAgICAgICAgICAgQVZGcmFtZSogZnJhbWUgPSBudWxscHRyOwogICAgICAgICAgICBpZiAobV9QYXVzZSkgV2FpdENvbnRpbnVlKCk7CiAgICAgICAgICAgIGlmICgoaVJldCA9IGF2X3JlYWRfZnJhbWUoaW5GbXRDdHgsICZpbkZyYW1lUGt0KSkgPCAwKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBpUmV0ID0gMDsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpbnQgaUluU3RyZWFtSWQgPSBpbkZyYW1lUGt0LnN0cmVhbV9pbmRleDsKICAgICAgICAgICAgaW50IGlPdXRTdHJlYW1JZCA9IG1wU3RyZWFtTWFwW2lJblN0cmVhbUlkXTsKICAgICAgICAgICAgaWYgKGlPdXRTdHJlYW1JZCA+PSAwKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBBVlN0cmVhbSogaW5TdHJlYW0gPSBpbkZtdEN0eC0+c3RyZWFtc1tpSW5TdHJlYW1JZF07CiAgICAgICAgICAgICAgICBBVlN0cmVhbSogb3V0U3RyZWFtID0gb3V0Rm10Q3R4LT5zdHJlYW1zW2lPdXRTdHJlYW1JZF07CiAgICAgICAgICAgICAgICBTdHJlYW1Db250ZXh0JiBzdHJlYW1DdHggPSBzdHJlYW1DdHhzW2lJblN0cmVhbUlkXTsKICAgICAgICAgICAgICAgIEFWTWVkaWFUeXBlIGNvZGVjVHlwZSA9IGluU3RyZWFtLT5jb2RlY3Bhci0+Y29kZWNfdHlwZTsKICAgICAgICAgICAgICAgIC8v5aSE55CG6L+b5bqm5p2hCiAgICAgICAgICAgICAgICBpZiAoY29kZWNUeXBlID09IEFWTUVESUFfVFlQRV9WSURFTyB8fCAob01lZGlhVHlwZSA9PSBBVk1FRElBX1RZUEVfQVVESU8gJiYgaW5TdHJlYW0tPmNvZGVjcGFyLT5jb2RlY190eXBlID09IEFWTUVESUFfVFlQRV9BVURJTykpCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgLy/lr7nkuo7nm7Tmkq3mtYHvvIzlj6/og73ml6Dms5Xojrflj5bml7bplb8KICAgICAgICAgICAgICAgICAgICBpZiAoaW5GbXRDdHgtPmR1cmF0aW9uID4gMCkKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIEFWUm91bmRpbmcgcm5kID0gKEFWUm91bmRpbmcpKEFWX1JPVU5EX05FQVJfSU5GIHwgQVZfUk9VTkRfUEFTU19NSU5NQVgpOwogICAgICAgICAgICAgICAgICAgICAgICBpbEN1clRpbWUgPSBhdl9yZXNjYWxlX3Ffcm5kKGluRnJhbWVQa3QucHRzLCBpblN0cmVhbS0+dGltZV9iYXNlLCB7IDEsMTAwMCB9LCBybmQpOwogICAgICAgICAgICAgICAgICAgICAgICBpblN0cmVhbS0+dGltZV9iYXNlOwogICAgICAgICAgICAgICAgICAgICAgICBkb3VibGUgZFRtcFByb2Nlc3MgPSBzdGQ6Om1pbjxkb3VibGU+KDEuMCwgMS4wICogaWxDdXJUaW1lIC8gaWxNYXhUaW1lKTsKICAgICAgICAgICAgICAgICAgICAgICAgZFByb2Nlc3MgPSBzdGQ6Om1heDxkb3VibGU+KGRQcm9jZXNzLCBkVG1wUHJvY2Vzcyk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIFNlbmRQcm9jZXNzKGRQcm9jZXNzKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAoaW5TdHJlYW0tPmNvZGVjcGFyLT5jb2RlY190eXBlID09IEFWTUVESUFfVFlQRV9WSURFTykKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBpbFZpZGVvU2l6ZSArPSBpbkZyYW1lUGt0LnNpemU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIGlmIChpblN0cmVhbS0+Y29kZWNwYXItPmNvZGVjX3R5cGUgPT0gQVZNRURJQV9UWVBFX0FVRElPKQogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGlsQXVkaW9TaXplICs9IGluRnJhbWVQa3Quc2l6ZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIC8v5LiL6Z2i6L+b6KGM5a6e6ZmF55qE57yW56CB5pON5L2cCiAgICAgICAgICAgICAgICBpZiAoKHN0cmVhbUN0eC5kZWNfY3R4ID09IE5VTEwgfHwgc3RyZWFtQ3R4LmVuY19jdHggPT0gTlVMTCkgfHwgCiAgICAgICAgICAgICAgICAgICAgKENPTlZFUl9DSEVDS19VU0Uob3B0aW9ucywgQ09OVkVSX1ZJREVPX1BBU1MpICYmIGNvZGVjVHlwZSA9PSBBVk1FRElBX1RZUEVfVklERU8pIHx8IC8v5b2T6L+Z5Liq5LiN6ZyA6KaB6KeG6aKR5bin5pe2CiAgICAgICAgICAgICAgICAgICAgKENPTlZFUl9DSEVDS19VU0Uob3B0aW9ucywgQ09OVkVSX0FVRElPX1BBU1MpICYmIGNvZGVjVHlwZSA9PSBBVk1FRElBX1RZUEVfQVVESU8pKSAgIC8v5b2T6L+Z5Liq5LiN6ZyA6KaB6Z+z6aKR5bin5pe2CiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgLy9EbyBub25lCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIGlmIChzdHJlYW1DdHguZGVjX2N0eC0+Y29kZWNfaWQgPT0gc3RyZWFtQ3R4LmVuY19jdHgtPmNvZGVjX2lkICYmCiAgICAgICAgICAgICAgICAgICAgKChjb2RlY1R5cGUgPT0gQVZNRURJQV9UWVBFX0FVRElPICYmIENPTlZFUl9DSEVDS19VU0Uob3B0aW9ucywgQ09OVkVSX0FDT0RFQ19DT1BZKSkgfHwgKGNvZGVjVHlwZSA9PSBBVk1FRElBX1RZUEVfVklERU8gJiYgQ09OVkVSX0NIRUNLX1VTRShvcHRpb25zLCBDT05WRVJfVkNPREVDX0NPUFkpKSkgKQogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIC8vQ29weSDml6DpnIDph43mlrDnvJbnoIEg55u05o6l5ou36LSdCiAgICAgICAgICAgICAgICAgICAgYXZfcGFja2V0X3Jlc2NhbGVfdHMoJmluRnJhbWVQa3QsIGluU3RyZWFtLT50aW1lX2Jhc2UsIG91dFN0cmVhbS0+dGltZV9iYXNlKTsKICAgICAgICAgICAgICAgICAgICBpbkZyYW1lUGt0LnN0cmVhbV9pbmRleCA9IGlPdXRTdHJlYW1JZDsKICAgICAgICAgICAgICAgICAgICBpUmV0ID0gYXZfaW50ZXJsZWF2ZWRfd3JpdGVfZnJhbWUob3V0Rm10Q3R4LCAmaW5GcmFtZVBrdCk7CiAgICAgICAgICAgICAgICAgICAgaW5GcmFtZVBrdC5zdHJlYW1faW5kZXggPSBpSW5TdHJlYW1JZDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgaWYgKHN0cmVhbUN0eC5maWx0ZXJfY3R4ICE9IG51bGxwdHIgJiYgc3RyZWFtQ3R4LmZpbHRlcl9jdHgtPmZpbHRlcl9ncmFwaCkKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBhdl9sb2coTlVMTCwgQVZfTE9HX0RFQlVHLCAiR29pbmcgdG8gZmlsdGVyIHRoZSBmcmFtZVxuIik7CiAgICAgICAgICAgICAgICAgICAgZnJhbWUgPSBhdl9mcmFtZV9hbGxvYygpOwogICAgICAgICAgICAgICAgICAgIGlmICghZnJhbWUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaVJldCA9IEFWRVJST1IoRU5PTUVNKTsKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGF2X3BhY2tldF9yZXNjYWxlX3RzKCZpbkZyYW1lUGt0LCBpblN0cmVhbS0+dGltZV9iYXNlLCAgc3RyZWFtQ3R4LmRlY19jdHgtPnRpbWVfYmFzZSk7CgogICAgICAgICAgICAgICAgICAgIGludCBpR290RnJhbWUgPSAwOwogICAgICAgICAgICAgICAgICAgIGludCAoKmRlY19mdW5jKShBVkNvZGVjQ29udGV4dCosIEFWRnJhbWUqLCBpbnQqLCBjb25zdCBBVlBhY2tldCopOwogICAgICAgICAgICAgICAgICAgIGludCAoKmVuY19mdW5jKShBVkNvZGVjQ29udGV4dCosIEFWUGFja2V0KiwgY29uc3QgQVZGcmFtZSosIGludCopOwogICAgICAgICAgICAgICAgICAgIGRlY19mdW5jID0gKGNvZGVjVHlwZSA9PSBBVk1FRElBX1RZUEVfVklERU8pID8gYXZjb2RlY19kZWNvZGVfdmlkZW8yIDoKICAgICAgICAgICAgICAgICAgICAgICAgYXZjb2RlY19kZWNvZGVfYXVkaW80OwogICAgICAgICAgICAgICAgICAgIGlSZXQgPSBkZWNfZnVuYyhzdHJlYW1DdHguZGVjX2N0eCwgZnJhbWUsICZpR290RnJhbWUsICZpbkZyYW1lUGt0KTsKICAgICAgICAgICAgICAgICAgICBpZiAoaVJldCA8IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgYXZfZnJhbWVfZnJlZSgmZnJhbWUpOwogICAgICAgICAgICAgICAgICAgICAgICBhdl9sb2coTlVMTCwgQVZfTE9HX0VSUk9SLCAiRGVjb2RpbmcgZmFpbGVkXG4iKTsKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBpZiAoaUdvdEZyYW1lKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGZyYW1lLT5wdHMgPSBmcmFtZS0+YmVzdF9lZmZvcnRfdGltZXN0YW1wOwogICAgICAgICAgICAgICAgICAgICAgICBpUmV0ID0gRmlsdGVyRW5jb2RlV3JpdGVGcmFtZShmcmFtZSwgaUluU3RyZWFtSWQpOwogICAgICAgICAgICAgICAgICAgICAgICBhdl9mcmFtZV9mcmVlKCZmcmFtZSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpUmV0IDwgMCkKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGF2X2ZyYW1lX2ZyZWUoJmZyYW1lKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgLy/pnIDopoHph43mlrDnvJbnoIEKICAgICAgICAgICAgICAgICAgICBpbnQgaUdvdEZyYW1lID0gMDsKICAgICAgICAgICAgICAgICAgICBpbnQgKCpkZWNfZnVuYykoQVZDb2RlY0NvbnRleHQqLCBBVkZyYW1lKiwgaW50KiwgY29uc3QgQVZQYWNrZXQqKTsKICAgICAgICAgICAgICAgICAgICBpbnQgKCplbmNfZnVuYykoQVZDb2RlY0NvbnRleHQqLCBBVlBhY2tldCosIGNvbnN0IEFWRnJhbWUqLCBpbnQqKTsKICAgICAgICAgICAgICAgICAgICBkZWNfZnVuYyA9IChpblN0cmVhbS0+Y29kZWNwYXItPmNvZGVjX3R5cGUgPT0gQVZNRURJQV9UWVBFX1ZJREVPKSA/IGF2Y29kZWNfZGVjb2RlX3ZpZGVvMiA6IGF2Y29kZWNfZGVjb2RlX2F1ZGlvNDsKICAgICAgICAgICAgICAgICAgICBlbmNfZnVuYyA9IChpblN0cmVhbS0+Y29kZWNwYXItPmNvZGVjX3R5cGUgPT0gQVZNRURJQV9UWVBFX1ZJREVPKSA/IGF2Y29kZWNfZW5jb2RlX3ZpZGVvMiA6IGF2Y29kZWNfZW5jb2RlX2F1ZGlvMjsKCiAgICAgICAgICAgICAgICAgICAgYXZfbG9nKE5VTEwsIEFWX0xPR19ERUJVRywgIkdvaW5nIHRvIHJlZW5jb2RlIHRoZSBmcmFtZVxuIik7CiAgICAgICAgICAgICAgICAgICAgZnJhbWUgPSBhdl9mcmFtZV9hbGxvYygpOwogICAgICAgICAgICAgICAgICAgIGlmICghZnJhbWUpCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBpUmV0ID0gQVZFUlJPUihFTk9NRU0pOwogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgYXZfcGFja2V0X3Jlc2NhbGVfdHMoJmluRnJhbWVQa3QsIGluU3RyZWFtLT50aW1lX2Jhc2UsIHN0cmVhbUN0eC5kZWNfY3R4LT50aW1lX2Jhc2UpOwogICAgICAgICAgICAgICAgICAgIGlSZXQgPSBkZWNfZnVuYyhzdHJlYW1DdHguZGVjX2N0eCwgZnJhbWUsICZpR290RnJhbWUsICZpbkZyYW1lUGt0KTsKICAgICAgICAgICAgICAgICAgICBpZiAoaVJldCA8IDApCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBhdl9mcmFtZV9mcmVlKCZmcmFtZSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGF2X2xvZyhOVUxMLCBBVl9MT0dfRVJST1IsICJEZWNvZGluZyBmYWlsZWRcbiIpOwogICAgICAgICAgICAgICAgICAgICAgICBpUmV0Q29kZSA9IERMX0NPREVfVE9JTlQoVmlkZW9Eb3dubG9hZENvZGU6OmtWaWRlb0Rvd25sb2FkQ29kZV9Vbmtvd24pOwogICAgICAgICAgICAgICAgICAgICAgICBzdHJSZXRNc2cgPSBTdHJGb3JtYXRBKCIoJWQpIERlY29kaW5nIGZhaWxlZCwgaW5fc3RyZWFtKCVkfCVkKVxuIiwgaVJldCwgaW5TdHJlYW0tPmNvZGVjcGFyLT5jb2RlY190eXBlLCBpblN0cmVhbS0+Y29kZWNwYXItPmNvZGVjX2lkKTsKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGlmIChpR290RnJhbWUgJiYgIW1fU3RvcCkKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vVE9ETyDovaznoIHlhpnlhaUKICAgICAgICAgICAgICAgICAgICAgICAgLy9pUmV0ID0gRmlsdGVyRW5jb2RlV3JpdGVGcmFtZShmcmFtZSwgb3V0X3N0cmVhbV9pbmRleCk7CiAgICAgICAgICAgICAgICAgICAgICAgIEFWUGFja2V0IG91dEZyYW1lUGt0OwogICAgICAgICAgICAgICAgICAgICAgICBvdXRGcmFtZVBrdC5kYXRhID0gTlVMTDsKICAgICAgICAgICAgICAgICAgICAgICAgb3V0RnJhbWVQa3Quc2l6ZSA9IDA7CiAgICAgICAgICAgICAgICAgICAgICAgIGF2X2luaXRfcGFja2V0KCZvdXRGcmFtZVBrdCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGlSZXQgPSBlbmNfZnVuYyhzdHJlYW1DdHguZW5jX2N0eCwgJm91dEZyYW1lUGt0LCBmcmFtZSwgJmlHb3RGcmFtZSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGF2X3BhY2tldF9yZXNjYWxlX3RzKCZvdXRGcmFtZVBrdCwgc3RyZWFtQ3R4LmVuY19jdHgtPnRpbWVfYmFzZSwgb3V0U3RyZWFtLT50aW1lX2Jhc2UpOwogICAgICAgICAgICAgICAgICAgICAgICBvdXRGcmFtZVBrdC5zdHJlYW1faW5kZXggPSBpT3V0U3RyZWFtSWQ7CiAgICAgICAgICAgICAgICAgICAgICAgIGF2X2ludGVybGVhdmVkX3dyaXRlX2ZyYW1lKG91dEZtdEN0eCwgJm91dEZyYW1lUGt0KTsKICAgICAgICAgICAgICAgICAgICAgICAgLy/lhpnlhaXlrozmiJAKICAgICAgICAgICAgICAgICAgICAgICAgYXZfZnJhbWVfZnJlZSgmZnJhbWUpOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoaVJldCA8IDApCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlSZXRDb2RlID0gRExfQ09ERV9UT0lOVChWaWRlb0Rvd25sb2FkQ29kZTo6a1ZpZGVvRG93bmxvYWRDb2RlX1Vua293bik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJSZXRNc2cgPSBTdHJGb3JtYXRBKCIoJWQpIEVuY29kaW5nIGZhaWxlZCwgb3V0X3N0cmVhbSglZHwlZClcbiIsIGlSZXQsIG91dFN0cmVhbS0+Y29kZWNwYXItPmNvZGVjX3R5cGUsIG91dFN0cmVhbS0+Y29kZWNwYXItPmNvZGVjX2lkKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBhdl9mcmFtZV9mcmVlKCZmcmFtZSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIC8vRG8gbm9uZQogICAgICAgICAgICB9CiAgICAgICAgICAgIGF2X3BhY2tldF91bnJlZigmaW5GcmFtZVBrdCk7CiAgICAgICAgfQoKICAgICAgICAvL2VuZAogICAgICAgIGlmIChpbkZtdEN0eCkKICAgICAgICB7CiAgICAgICAgICAgIGF2Zm9ybWF0X2Nsb3NlX2lucHV0KCZpbkZtdEN0eCk7CiAgICAgICAgICAgIGF2Zm9ybWF0X2ZyZWVfY29udGV4dChpbkZtdEN0eCk7CiAgICAgICAgfQogICAgICAgIGlmIChvdXRGbXRDdHgpCiAgICAgICAgewogICAgICAgICAgICBmb3IgKHNpemVfdCBpID0gMDsgaSA8IHN0cmVhbUN0eHMuc2l6ZSgpOyBpKyspCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIFN0cmVhbUNvbnRleHQmIHN0cmVhbUN0eCA9IHN0cmVhbUN0eHNbaV07CiAgICAgICAgICAgICAgICBBVkNvZGVjQ29udGV4dCogZGVjb2RlckN0eCA9IHN0cmVhbUN0eC5kZWNfY3R4OwogICAgICAgICAgICAgICAgQVZDb2RlY0NvbnRleHQqIGVuY29kZXJDdHggPSBzdHJlYW1DdHguZW5jX2N0eDsKICAgICAgICAgICAgICAgIEZpbHRlcmluZ0NvbnRleHQqIGZpbHRlckN0eCA9IHN0cmVhbUN0eC5maWx0ZXJfY3R4OwogICAgICAgICAgICAgICAgaWYgKGZpbHRlckN0eCkKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBpZiAoIWZpbHRlckN0eC0+ZmlsdGVyX2dyYXBoKQogICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgICAgICAgICBpUmV0ID0gRmlsdGVyRW5jb2RlV3JpdGVGcmFtZShOVUxMLCBpKTsKICAgICAgICAgICAgICAgICAgICBpZiAoaVJldCA8IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgYXZfbG9nKE5VTEwsIEFWX0xPR19FUlJPUiwgIkZsdXNoaW5nIGZpbHRlciBmYWlsZWRcbiIpOwogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIC8qIGZsdXNoIGVuY29kZXIgKi8KICAgICAgICAgICAgICAgICAgICBpUmV0ID0gRmx1c2hFbmNvZGVyKGkpOwogICAgICAgICAgICAgICAgICAgIGlmIChpUmV0IDwgMCkgewogICAgICAgICAgICAgICAgICAgICAgICBhdl9sb2coTlVMTCwgQVZfTE9HX0VSUk9SLCAiRmx1c2hpbmcgZW5jb2RlciBmYWlsZWRcbiIpOwogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGZpbHRlckN0eDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChkZWNvZGVyQ3R4KSBhdmNvZGVjX2Nsb3NlKGRlY29kZXJDdHgpOwogICAgICAgICAgICAgICAgaWYgKGVuY29kZXJDdHgpIGF2Y29kZWNfY2xvc2UoZW5jb2RlckN0eCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgYXZfd3JpdGVfdHJhaWxlcihvdXRGbXRDdHgpOwogICAgICAgIH0KICAgICAgICBmb3IgKGF1dG8gcmVmU3RyZWFtQ3R4ID0gc3RyZWFtQ3R4cy5iZWdpbigpOyByZWZTdHJlYW1DdHggIT0gc3RyZWFtQ3R4cy5lbmQoKTsgcmVmU3RyZWFtQ3R4KyspCiAgICAgICAgewogICAgICAgICAgICBTdHJlYW1Db250ZXh0JiBzdHJlYW1DdHggPSAqcmVmU3RyZWFtQ3R4OwogICAgICAgICAgICBBVkNvZGVjQ29udGV4dCogZGVjb2RlckN0eCA9IHN0cmVhbUN0eC5kZWNfY3R4OwogICAgICAgICAgICBBVkNvZGVjQ29udGV4dCogZW5jb2RlckN0eCA9IHN0cmVhbUN0eC5lbmNfY3R4OwogICAgICAgICAgICBpZiAoZGVjb2RlckN0eCkgYXZjb2RlY19jbG9zZShkZWNvZGVyQ3R4KTsKICAgICAgICAgICAgaWYgKGVuY29kZXJDdHgpIGF2Y29kZWNfY2xvc2UoZW5jb2RlckN0eCk7CiAgICAgICAgfQogICAgICAgIGlmIChvdXRGbXRDdHgpCiAgICAgICAgewogICAgICAgICAgICBpZiAob3V0Rm10Q3R4ICYmICEob3V0Rm10Q3R4LT5vZm9ybWF0LT5mbGFncyAmIEFWRk1UX05PRklMRSkpIGF2aW9fY2xvc2VwKCZvdXRGbXRDdHgtPnBiKTsKICAgICAgICAgICAgYXZmb3JtYXRfZnJlZV9jb250ZXh0KG91dEZtdEN0eCk7CiAgICAgICAgfQogICAgICAgIGF2X2xvZyhOVUxMLCBBVl9MT0dfREVCVUcsIkVORCA6ICgiIFBSSXg2NCAiICsgIiBQUkl4NjQgIikgPSAiIFBSSXg2NCwgaWxWaWRlb1NpemUsIGlsQXVkaW9TaXplLCBpbFZpZGVvU2l6ZSArIGlsQXVkaW9TaXplKTsKICAgIH0gd2hpbGUgKGZhbHNlKTsKICAgIGlmIChtX1N0b3ApCiAgICB7CiAgICAgICAgaVJldCA9IC0xOwogICAgICAgIGlSZXRDb2RlID0gRExfQ09ERV9UT0lOVChWaWRlb0Rvd25sb2FkQ29kZTo6a1ZpZGVvRG93bmxvYWRDb2RlX0Fib3J0KTsKICAgICAgICBzdHJSZXRNc2cgPSBTdHJGb3JtYXRBKCIoJWQpIFVzZXIgQWJvcnRcbiIsIGlSZXQpOwogICAgfQogICAgU2VuZFByb2Nlc3MoMS4wKTsKICAgIFNlbmRFbmQoaVJldENvZGUsIHN0clJldE1zZyk7CiAgICByZXR1cm4gaVJldCA9PSAwOwp9Cgp2b2lkIENWaWRlb0NvbnZlcjo6U2VuZFByb2Nlc3MoZG91YmxlIGRQcm9jZXNzKQp7CiAgICAvL1RPRE8KICAgIGlmIChtX0NhbGxiYWNrKQogICAgewogICAgICAgIG1fQ2FsbGJhY2stPk9uUHJvY2VzcyhkUHJvY2Vzcyk7CiAgICB9Cn0KCnZvaWQgQ1ZpZGVvQ29udmVyOjpTZW5kRW5kKGludCBpQ29kZSwgY29uc3Qgc3RkOjpzdHJpbmcgc3RyTXNnKQp7CiAgICAvL1RPRE8KICAgIGlmIChtX0NhbGxiYWNrKQogICAgewogICAgICAgIG1fQ2FsbGJhY2stPk9uRW5kKGlDb2RlLCBzdHJNc2cuY19zdHIoKSk7CiAgICB9Cn0KCgp2b2lkIENWaWRlb0NvbnZlcjo6V2FpdENvbnRpbnVlKCkKewogICAgc3RkOjp1bmlxdWVfbG9jazxzdGQ6Om11dGV4PiB1bmxvY2sobV9QYXVzZUV2ZW50TXR4KTsKICAgIG1fUGF1c2VFdmVudC53YWl0KHVubG9jaywgW3RoaXNdIHsgcmV0dXJuIG1fU3RvcCB8fCAhbV9QYXVzZTsgfSk7Cn0KCnZvaWQgQ1ZpZGVvQ29udmVyOjppbml0KCkKewogICAgbV9TdG9wID0gZmFsc2U7CiAgICBtX1BhdXNlID0gZmFsc2U7CiAgICBtX0NhbGxiYWNrID0gbnVsbHB0cjsKICAgIGF2X2xvZ19zZXRfbGV2ZWwoQVZfTE9HX1dBUk5JTkcpOwp9CgppbnQgQ1ZpZGVvQ29udmVyOjpJbnB1dEludGVycnVwdENhbGxiYWNrKHZvaWQqIHApCnsKICAgIENWaWRlb0NvbnZlciogc2VsZiA9IChDVmlkZW9Db252ZXIqKXA7CiAgICBpZiAoc2VsZi0+bV9TdG9wKQogICAgewogICAgICAgIHJldHVybiAxOwogICAgfQogICAgcmV0dXJuIDA7Cn0KCmludCBDVmlkZW9Db252ZXI6Ok9wZW5JbnB1dEZpbGUoY29uc3Qgc3RkOjpzdHJpbmcmIHN0ckZpbGVOYW1lKQp7CiAgICBpbnQgaVJldCA9IDA7CiAgICBBVkZvcm1hdENvbnRleHQqJiBpbkZtdEN0eCA9IG1fSUZtdEN0eDsgLy8gYXZmb3JtYXRfYWxsb2NfY29udGV4dCgpOwogICAgQVZGb3JtYXRDb250ZXh0KiYgb3V0Rm10Q3R4ID0gbV9PRm10Q3R4OyAvLyBhdmZvcm1hdF9hbGxvY19jb250ZXh0KCk7CiAgICBzdGQ6Om1hcDxpbnQsIGludD4mIG1wU3RyZWFtTWFwID0gbV9TdHJlYW1NYXA7CiAgICBzdGQ6OnZlY3RvcjxTdHJlYW1Db250ZXh0PiYgc3RyZWFtQ3R4cyA9IG1fU3RyZWFtQ3R4czsKICAgIGlSZXQgPSBhdmZvcm1hdF9vcGVuX2lucHV0KCZpbkZtdEN0eCwgc3RyRmlsZU5hbWUuY19zdHIoKSwgTlVMTCwgTlVMTCk7CiAgICBpZiAoaVJldCAhPSAwKQogICAgewogICAgICAgIHJldHVybiBpUmV0OwogICAgfQogICAgaVJldCA9IGF2Zm9ybWF0X2ZpbmRfc3RyZWFtX2luZm8oaW5GbXRDdHgsIE5VTEwpOwogICAgaWYgKGlSZXQgIT0gMCkKICAgIHsKICAgICAgICByZXR1cm4gaVJldDsKICAgIH0KICAgIGZvciAoaW50IGkgPSAwOyBpIDwgaW5GbXRDdHgtPm5iX3N0cmVhbXM7IGkrKykKICAgIHsKICAgICAgICBBVlN0cmVhbSogaW5TdHJlYW0gPSBpbkZtdEN0eC0+c3RyZWFtc1tpXTsKICAgICAgICBTdHJlYW1Db250ZXh0IHN0cmVhbUN0eDsKICAgICAgICBpZiAoaW5TdHJlYW0tPmNvZGVjcGFyLT5jb2RlY190eXBlID09IEFWTUVESUFfVFlQRV9BVURJTyB8fCBpblN0cmVhbS0+Y29kZWNwYXItPmNvZGVjX3R5cGUgPT0gQVZNRURJQV9UWVBFX1ZJREVPKQogICAgICAgIHsKICAgICAgICAgICAgQVZDb2RlYyogZGVjb2RlciA9IGF2Y29kZWNfZmluZF9kZWNvZGVyKGluU3RyZWFtLT5jb2RlY3Bhci0+Y29kZWNfaWQpOwogICAgICAgICAgICBBVkNvZGVjQ29udGV4dCogZGVjb2RlckN0eCA9IGF2Y29kZWNfYWxsb2NfY29udGV4dDMoZGVjb2Rlcik7CiAgICAgICAgICAgIGlSZXQgPSBhdmNvZGVjX3BhcmFtZXRlcnNfdG9fY29udGV4dChkZWNvZGVyQ3R4LCBpblN0cmVhbS0+Y29kZWNwYXIpOwogICAgICAgICAgICBpZiAoaVJldCA8IDApIHsKICAgICAgICAgICAgICAgIGF2X2xvZyhOVUxMLCBBVl9MT0dfRVJST1IsICJGYWlsZWQgdG8gY29weSBkZWNvZGVyIHBhcmFtZXRlcnMgdG8gaW5wdXQgZGVjb2RlciBjb250ZXh0ICIKICAgICAgICAgICAgICAgICAgICAiZm9yIHN0cmVhbSAjJXVcbiIsIGkpOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLyogUmVlbmNvZGUgdmlkZW8gJiBhdWRpbyBhbmQgcmVtdXggc3VidGl0bGVzIGV0Yy4gKi8KICAgICAgICAgICAgaWYgKGRlY29kZXJDdHgtPmNvZGVjX3R5cGUgPT0gQVZNRURJQV9UWVBFX1ZJREVPCiAgICAgICAgICAgICAgICB8fCBkZWNvZGVyQ3R4LT5jb2RlY190eXBlID09IEFWTUVESUFfVFlQRV9BVURJTykgewogICAgICAgICAgICAgICAgaWYgKGRlY29kZXJDdHgtPmNvZGVjX3R5cGUgPT0gQVZNRURJQV9UWVBFX1ZJREVPKQogICAgICAgICAgICAgICAgICAgIGRlY29kZXJDdHgtPmZyYW1lcmF0ZSA9IGF2X2d1ZXNzX2ZyYW1lX3JhdGUoaW5GbXRDdHgsIGluU3RyZWFtLCBOVUxMKTsKICAgICAgICAgICAgICAgIC8qIE9wZW4gZGVjb2RlciAqLwogICAgICAgICAgICAgICAgaVJldCA9IGF2Y29kZWNfb3BlbjIoZGVjb2RlckN0eCwgZGVjb2RlciwgTlVMTCk7CiAgICAgICAgICAgICAgICBpZiAoaVJldCA8IDApIHsKICAgICAgICAgICAgICAgICAgICBhdl9sb2coTlVMTCwgQVZfTE9HX0VSUk9SLCAiRmFpbGVkIHRvIG9wZW4gZGVjb2RlciBmb3Igc3RyZWFtICMldVxuIiwgaSk7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgc3RyZWFtQ3R4LmRlY19jdHggPSBkZWNvZGVyQ3R4OwogICAgICAgIH0KICAgICAgICBzdHJlYW1DdHhzLnB1c2hfYmFjayhzdHJlYW1DdHgpOwogICAgfQogICAgcmV0dXJuIGlSZXQ7Cn0KCmludCBDVmlkZW9Db252ZXI6Ok9wZW5PdXRwdXRGaWxlKGNvbnN0IHN0ZDo6c3RyaW5nJiBzdHJGaWxlTmFtZSkKewogICAgQVZGb3JtYXRDb250ZXh0KiYgaW5GbXRDdHggPSBtX0lGbXRDdHg7IC8vIGF2Zm9ybWF0X2FsbG9jX2NvbnRleHQoKTsKICAgIEFWRm9ybWF0Q29udGV4dComIG91dEZtdEN0eCA9IG1fT0ZtdEN0eDsgLy8gYXZmb3JtYXRfYWxsb2NfY29udGV4dCgpOwogICAgc3RkOjptYXA8aW50LCBpbnQ+JiBtcFN0cmVhbU1hcCA9IG1fU3RyZWFtTWFwOwogICAgc3RkOjp2ZWN0b3I8U3RyZWFtQ29udGV4dD4mIHN0cmVhbUN0eHMgPSBtX1N0cmVhbUN0eHM7CiAgICBpbnQgaVJldCA9IDA7CiAgICBpUmV0ID0gYXZmb3JtYXRfYWxsb2Nfb3V0cHV0X2NvbnRleHQyKCZvdXRGbXRDdHgsIE5VTEwsIE5VTEwsIHN0ckZpbGVOYW1lLmNfc3RyKCkpOwogICAgaWYgKGlSZXQgPCAwKQogICAgewogICAgICAgIHJldHVybiAtMTsKICAgIH0KICAgIC8vCiAgICAvL+agueaNrua6kOaWh+S7tuWGheWuueaehOmAoOaWsOaWh+S7tueahOi+k+WHuua1gQogICAgZm9yIChpbnQgaSA9IDA7IGkgPCBpbkZtdEN0eC0+bmJfc3RyZWFtczsgaSsrKQogICAgewogICAgICAgIGludCBpSW5TdHJlYW1JZCA9IGk7CiAgICAgICAgaW50IGlPdXRTdHJlYW1JZCA9IC0xOwogICAgICAgIEFWU3RyZWFtKiBpblN0cmVhbSA9IGluRm10Q3R4LT5zdHJlYW1zW2lJblN0cmVhbUlkXTsKICAgICAgICBBVlN0cmVhbSogb3V0U3RyZWFtID0gTlVMTDsKICAgICAgICBTdHJlYW1Db250ZXh0JiBzdHJlYW1DdHggPSBzdHJlYW1DdHhzW2lJblN0cmVhbUlkXTsKICAgICAgICBBVkNvZGVjSUQgY29kZWNJRCA9IEdldERlZmF1bHRDb2RlYyhvdXRGbXRDdHgtPm9mb3JtYXQtPm5hbWUsIGluU3RyZWFtLT5jb2RlY3Bhci0+Y29kZWNfdHlwZSk7CiAgICAgICAgaWYgKChjb2RlY0lEID09IEFWX0NPREVDX0lEX05PTkUpKQogICAgICAgIHsKICAgICAgICAgICAgaU91dFN0cmVhbUlkID0gLTE7CiAgICAgICAgfQogICAgICAgIGVsc2UKICAgICAgICB7CiAgICAgICAgICAgIG91dFN0cmVhbSA9IGF2Zm9ybWF0X25ld19zdHJlYW0ob3V0Rm10Q3R4LCBOVUxMKTsKICAgICAgICAgICAgQVZDb2RlYyogZW5jb2RlciA9IGF2Y29kZWNfZmluZF9lbmNvZGVyKGNvZGVjSUQpOwogICAgICAgICAgICBBVkNvZGVjQ29udGV4dCogZW5jb2RlckN0eCA9IGF2Y29kZWNfYWxsb2NfY29udGV4dDMoZW5jb2Rlcik7CiAgICAgICAgICAgIHN0cmVhbUN0eC5lbmNfY3R4ID0gZW5jb2RlckN0eDsKICAgICAgICAgICAgZW5jb2RlckN0eC0+dGltZV9iYXNlID0gc3RyZWFtQ3R4LmRlY19jdHgtPnRpbWVfYmFzZTsKICAgICAgICAgICAgaWYgKGluU3RyZWFtLT5jb2RlY3Bhci0+Y29kZWNfdHlwZSA9PSBBVk1FRElBX1RZUEVfVklERU8pCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGVuY29kZXJDdHgtPmhlaWdodCA9IHN0cmVhbUN0eC5kZWNfY3R4LT5oZWlnaHQ7CiAgICAgICAgICAgICAgICBlbmNvZGVyQ3R4LT53aWR0aCA9IHN0cmVhbUN0eC5kZWNfY3R4LT53aWR0aDsKICAgICAgICAgICAgICAgIGVuY29kZXJDdHgtPnNhbXBsZV9hc3BlY3RfcmF0aW8gPSBzdHJlYW1DdHguZGVjX2N0eC0+c2FtcGxlX2FzcGVjdF9yYXRpbzsKICAgICAgICAgICAgICAgIGVuY29kZXJDdHgtPmZyYW1lcmF0ZSA9IHN0cmVhbUN0eC5kZWNfY3R4LT5mcmFtZXJhdGU7CiAgICAgICAgICAgICAgICBpZiAoZW5jb2Rlci0+cGl4X2ZtdHMpCiAgICAgICAgICAgICAgICAgICAgZW5jb2RlckN0eC0+cGl4X2ZtdCA9IGVuY29kZXItPnBpeF9mbXRzWzBdOwogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIGVuY29kZXJDdHgtPnBpeF9mbXQgPSBzdHJlYW1DdHguZGVjX2N0eC0+cGl4X2ZtdDsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGVuY29kZXJDdHgtPnNhbXBsZV9yYXRlID0gc3RyZWFtQ3R4LmRlY19jdHgtPnNhbXBsZV9yYXRlOwogICAgICAgICAgICAgICAgZW5jb2RlckN0eC0+Y2hhbm5lbF9sYXlvdXQgPSBzdHJlYW1DdHguZGVjX2N0eC0+Y2hhbm5lbF9sYXlvdXQ7CiAgICAgICAgICAgICAgICBlbmNvZGVyQ3R4LT5mcmFtZV9zaXplID0gc3RyZWFtQ3R4LmRlY19jdHgtPmZyYW1lX3NpemU7CiAgICAgICAgICAgICAgICBlbmNvZGVyQ3R4LT5jaGFubmVscyA9IGF2X2dldF9jaGFubmVsX2xheW91dF9uYl9jaGFubmVscyhzdHJlYW1DdHguZGVjX2N0eC0+Y2hhbm5lbF9sYXlvdXQpOwogICAgICAgICAgICAgICAgZW5jb2RlckN0eC0+c2FtcGxlX2ZtdCA9IGVuY29kZXItPnNhbXBsZV9mbXRzWzBdOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChvdXRGbXRDdHgtPm9mb3JtYXQtPmZsYWdzICYgQVZGTVRfR0xPQkFMSEVBREVSKQogICAgICAgICAgICAgICAgZW5jb2RlckN0eC0+ZmxhZ3MgfD0gQVZfQ09ERUNfRkxBR19HTE9CQUxfSEVBREVSOwoKICAgICAgICAgICAgaVJldCA9IGF2Y29kZWNfb3BlbjIoZW5jb2RlckN0eCwgZW5jb2RlciwgTlVMTCk7CiAgICAgICAgICAgIGlmIChpUmV0IDwgMCkgewogICAgICAgICAgICAgICAgYXZfbG9nKE5VTEwsIEFWX0xPR19FUlJPUiwgIkNhbm5vdCBvcGVuIHZpZGVvIGVuY29kZXIgZm9yIHN0cmVhbSAjJXVcbiIsIGkpOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaVJldCA9IGF2Y29kZWNfcGFyYW1ldGVyc19mcm9tX2NvbnRleHQob3V0U3RyZWFtLT5jb2RlY3BhciwgZW5jb2RlckN0eCk7CiAgICAgICAgICAgIGlmIChpUmV0IDwgMCkgewogICAgICAgICAgICAgICAgYXZfbG9nKE5VTEwsIEFWX0xPR19FUlJPUiwgIkZhaWxlZCB0byBjb3B5IGVuY29kZXIgcGFyYW1ldGVycyB0byBvdXRwdXQgc3RyZWFtICMldVxuIiwgaSk7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgICAgICBvdXRTdHJlYW0tPnRpbWVfYmFzZSA9IGVuY29kZXJDdHgtPnRpbWVfYmFzZTsKICAgICAgICAgICAgc3RyZWFtQ3R4LmVuY19jdHggPSBlbmNvZGVyQ3R4OwogICAgICAgICAgICBpT3V0U3RyZWFtSWQgPSBvdXRTdHJlYW0tPmluZGV4OwogICAgICAgIH0KICAgICAgICBtcFN0cmVhbU1hcFtpSW5TdHJlYW1JZF0gPSBpT3V0U3RyZWFtSWQ7CiAgICB9CiAgICBpZiAoIShvdXRGbXRDdHgtPm9mb3JtYXQtPmZsYWdzICYgQVZGTVRfTk9GSUxFKSkgewogICAgICAgIGlSZXQgPSBhdmlvX29wZW4oJm91dEZtdEN0eC0+cGIsIHN0ckZpbGVOYW1lLmNfc3RyKCksIEFWSU9fRkxBR19XUklURSk7CiAgICAgICAgaWYgKGlSZXQgPCAwKSB7CiAgICAgICAgICAgIGF2X2xvZyhOVUxMLCBBVl9MT0dfRVJST1IsICJDb3VsZCBub3Qgb3BlbiBvdXRwdXQgZmlsZSAnJXMnIiwgc3RyRmlsZU5hbWUuY19zdHIoKSk7CiAgICAgICAgfQogICAgfQogICAgcmV0dXJuIGlSZXQ7Cn0KCmludCBDVmlkZW9Db252ZXI6OkluaXRSZXNhbXBsZXJzKCkKewogICAgaW50IGlSZXQgPSAwOwogICAgZm9yIChzaXplX3QgaSA9IDA7IGkgPCBtX1N0cmVhbUN0eHMuc2l6ZSgpOyBpKyspCiAgICB7CiAgICAgICAgU3RyZWFtQ29udGV4dCYgc3RyZWFtQ3R4ID0gbV9TdHJlYW1DdHhzW2ldOwogICAgICAgIEFWQ29kZWNDb250ZXh0KiBlbmNDdHggPSBzdHJlYW1DdHguZW5jX2N0eDsKICAgICAgICBBVkNvZGVjQ29udGV4dCogZGVjQ3R4ID0gc3RyZWFtQ3R4LmRlY19jdHg7CiAgICAgICAgaWYgKGVuY0N0eCA9PSBOVUxMIHx8IGVuY0N0eCA9PSBOVUxMKQogICAgICAgIHsKICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgfQogICAgICAgIFN3ckNvbnRleHQqIHJlQ3R4ID0gc3dyX2FsbG9jKCk7CiAgICAgICAgLy/ml6DpnIDmo4DmtYvmmK/lkKbmiJDlip/vvIzkuI3miJDlip/lsLHkuI3ovazmjaIKICAgICAgICBpUmV0ID0gQ3JlYXRlUmVzYW1wbGVyKGVuY0N0eCwgZGVjQ3R4LCAmcmVDdHgpOwogICAgICAgIGlmIChpUmV0ICE9IDApCiAgICAgICAgewogICAgICAgICAgICBwcmludGYoIlslZF0gQ3JlYXRlUmVzYW1wbGVyIGZhaWxsISEgU3RyZWFteyVkfCVkfSIsaVJldCwgaSxlbmNDdHgtPmNvZGVjX2Rlc2NyaXB0b3ItPnR5cGUpOwogICAgICAgICAgICBzd3JfZnJlZSgmcmVDdHgpOwogICAgICAgICAgICByZUN0eCA9IG51bGxwdHI7CiAgICAgICAgfQogICAgICAgIHN0cmVhbUN0eC5yZXNhbXBsZV9jdHggPSByZUN0eDsKICAgIH0KICAgIHJldHVybiAwOwp9CgppbnQgQ1ZpZGVvQ29udmVyOjpDcmVhdGVSZXNhbXBsZXIoQVZDb2RlY0NvbnRleHQqIGlucHV0X2NvZGVjX2NvbnRleHQsCiAgICBBVkNvZGVjQ29udGV4dCogb3V0cHV0X2NvZGVjX2NvbnRleHQsCiAgICBTd3JDb250ZXh0KiogcmVzYW1wbGVfY29udGV4dCkKewogICAgaW50IGVycm9yOwogICAgLyoKICAgICAqIENyZWF0ZSBhIHJlc2FtcGxlciBjb250ZXh0IGZvciB0aGUgY29udmVyc2lvbi4KICAgICAqIFNldCB0aGUgY29udmVyc2lvbiBwYXJhbWV0ZXJzLgogICAgICovCiAgICBpZiAoaW5wdXRfY29kZWNfY29udGV4dC0+Y29kZWMtPnR5cGUgPT0gQVZNZWRpYVR5cGU6OkFWTUVESUFfVFlQRV9BVURJTykKICAgIHsKICAgICAgICBhdl9vcHRfc2V0X2ludChyZXNhbXBsZV9jb250ZXh0LCAiaW5fY2hhbm5lbF9jb3VudCIsIGlucHV0X2NvZGVjX2NvbnRleHQtPmNoYW5uZWxzLCAwKTsKICAgICAgICBhdl9vcHRfc2V0X2ludChyZXNhbXBsZV9jb250ZXh0LCAiaW5fc2FtcGxlX3JhdGUiLCBpbnB1dF9jb2RlY19jb250ZXh0LT5zYW1wbGVfcmF0ZSwgMCk7CiAgICAgICAgYXZfb3B0X3NldF9zYW1wbGVfZm10KHJlc2FtcGxlX2NvbnRleHQsICJpbl9zYW1wbGVfZm10IiwgaW5wdXRfY29kZWNfY29udGV4dC0+c2FtcGxlX2ZtdCwgMCk7CiAgICAgICAgYXZfb3B0X3NldF9pbnQocmVzYW1wbGVfY29udGV4dCwgIm91dF9jaGFubmVsX2NvdW50Iiwgb3V0cHV0X2NvZGVjX2NvbnRleHQtPmNoYW5uZWxzLCAwKTsKICAgICAgICBhdl9vcHRfc2V0X2ludChyZXNhbXBsZV9jb250ZXh0LCAib3V0X3NhbXBsZV9yYXRlIiwgb3V0cHV0X2NvZGVjX2NvbnRleHQtPnNhbXBsZV9yYXRlLCAwKTsKICAgICAgICBhdl9vcHRfc2V0X3NhbXBsZV9mbXQocmVzYW1wbGVfY29udGV4dCwgIm91dF9zYW1wbGVfZm10Iiwgb3V0cHV0X2NvZGVjX2NvbnRleHQtPnNhbXBsZV9mbXQsIDApOwogICAgfQogICAgZWxzZQogICAgewogICAgICAgIC8vTk9ORQogICAgfQoKICAgIGlmICgoZXJyb3IgPSBzd3JfaW5pdCgqcmVzYW1wbGVfY29udGV4dCkpIDwgMCkgewogICAgICAgIGZwcmludGYoc3RkZXJyLCAiQ291bGQgbm90IG9wZW4gcmVzYW1wbGUgY29udGV4dFxuIik7CiAgICAgICAgc3dyX2ZyZWUocmVzYW1wbGVfY29udGV4dCk7CiAgICAgICAgcmV0dXJuIGVycm9yOwogICAgfQogICAgcmV0dXJuIDA7Cn0KCmludCBDVmlkZW9Db252ZXI6OkluaXRGaWx0ZXJzKCkKewogICAgaW50IGlSZXQgPSAwOwogICAgZm9yIChzaXplX3QgaSA9IDA7IGkgPCBtX1N0cmVhbUN0eHMuc2l6ZSgpOyBpKyspCiAgICB7CiAgICAgICAgaW50IGlJblN0cmVhbUluZGV4ID0gaTsKICAgICAgICBpbnQgaU91dFN0cmVhbUluZGV4ID0gbV9TdHJlYW1NYXBbaUluU3RyZWFtSW5kZXhdOwogICAgICAgIGlmIChpT3V0U3RyZWFtSW5kZXggPCAwKQogICAgICAgIHsKICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgfQogICAgICAgIEFWU3RyZWFtKiBpblN0cmVhbSA9IG1fSUZtdEN0eC0+c3RyZWFtc1tpSW5TdHJlYW1JbmRleF07CiAgICAgICAgQVZTdHJlYW0qIG91dFN0cmVhbSA9IG1fSUZtdEN0eC0+c3RyZWFtc1tpT3V0U3RyZWFtSW5kZXhdOwogICAgICAgIFN0cmVhbUNvbnRleHQmIHN0cmVhbUN0eCA9IG1fU3RyZWFtQ3R4c1tpXTsKICAgICAgICBBVk1lZGlhVHlwZSBzdHJlYW1UeXBlID0gaW5TdHJlYW0tPmNvZGVjcGFyLT5jb2RlY190eXBlOwogICAgICAgIHN0ZDo6c3RyaW5nIHN0ckZpbHRlclNwZWM7CiAgICAgICAgaWYgKHN0cmVhbUN0eC5maWx0ZXJfY3R4ID09IG51bGxwdHIpIHN0cmVhbUN0eC5maWx0ZXJfY3R4ID0gbmV3IEZpbHRlcmluZ0NvbnRleHQoKTsKICAgICAgICBpZiAoIShzdHJlYW1UeXBlID09IEFWTUVESUFfVFlQRV9BVURJTyB8fCBzdHJlYW1UeXBlID09IEFWTUVESUFfVFlQRV9WSURFTykpCiAgICAgICAgewogICAgICAgICAgICBjb250aW51ZTsKICAgICAgICB9CiAgICAgICAgc3RyRmlsdGVyU3BlYyA9IHN0cmVhbVR5cGUgPT0gQVZNRURJQV9UWVBFX1ZJREVPID8gIm51bGwiIDogImFudWxsIjsKICAgICAgICBpUmV0ID0gSW5pdEZpbHRlcihzdHJlYW1DdHguZmlsdGVyX2N0eCwgc3RyZWFtQ3R4LmRlY19jdHgsIHN0cmVhbUN0eC5lbmNfY3R4LCBzdHJGaWx0ZXJTcGVjKTsKICAgICAgICBpZiAoaVJldCAhPSAwKSBicmVhazsKCiAgICB9CiAgICByZXR1cm4gMDsKfQoKaW50IENWaWRlb0NvbnZlcjo6SW5pdEZpbHRlcihGaWx0ZXJpbmdDb250ZXh0KiBmY3R4LCBBVkNvZGVjQ29udGV4dCogZGVjX2N0eCwgQVZDb2RlY0NvbnRleHQqIGVuY19jdHgsIGNvbnN0IHN0ZDo6c3RyaW5nJiBzdHJGaWx0ZXJTcGVjKQp7CiAgICBjaGFyIGFyZ3NbNTEyXTsKICAgIGludCByZXQgPSAwOwogICAgY29uc3QgQVZGaWx0ZXIqIGJ1ZmZlcnNyYyA9IE5VTEw7CiAgICBjb25zdCBBVkZpbHRlciogYnVmZmVyc2luayA9IE5VTEw7CiAgICBBVkZpbHRlckNvbnRleHQqIGJ1ZmZlcnNyY19jdHggPSBOVUxMOwogICAgQVZGaWx0ZXJDb250ZXh0KiBidWZmZXJzaW5rX2N0eCA9IE5VTEw7CiAgICBBVkZpbHRlckluT3V0KiBvdXRwdXRzID0gYXZmaWx0ZXJfaW5vdXRfYWxsb2MoKTsKICAgIEFWRmlsdGVySW5PdXQqIGlucHV0cyA9IGF2ZmlsdGVyX2lub3V0X2FsbG9jKCk7CiAgICBBVkZpbHRlckdyYXBoKiBmaWx0ZXJfZ3JhcGggPSBhdmZpbHRlcl9ncmFwaF9hbGxvYygpOwoKICAgIGlmICghb3V0cHV0cyB8fCAhaW5wdXRzIHx8ICFmaWx0ZXJfZ3JhcGgpIHsKICAgICAgICByZXQgPSBBVkVSUk9SKEVOT01FTSk7CiAgICAgICAgZ290byBlbmQ7CiAgICB9CgogICAgaWYgKGRlY19jdHgtPmNvZGVjX3R5cGUgPT0gQVZNRURJQV9UWVBFX1ZJREVPKSB7CiAgICAgICAgYnVmZmVyc3JjID0gYXZmaWx0ZXJfZ2V0X2J5X25hbWUoImJ1ZmZlciIpOwogICAgICAgIGJ1ZmZlcnNpbmsgPSBhdmZpbHRlcl9nZXRfYnlfbmFtZSgiYnVmZmVyc2luayIpOwogICAgICAgIGlmICghYnVmZmVyc3JjIHx8ICFidWZmZXJzaW5rKSB7CiAgICAgICAgICAgIGF2X2xvZyhOVUxMLCBBVl9MT0dfRVJST1IsICJmaWx0ZXJpbmcgc291cmNlIG9yIHNpbmsgZWxlbWVudCBub3QgZm91bmRcbiIpOwogICAgICAgICAgICByZXQgPSBBVkVSUk9SX1VOS05PV047CiAgICAgICAgICAgIGdvdG8gZW5kOwogICAgICAgIH0KICAgICAgICBzcHJpbnRmKGFyZ3MsCiAgICAgICAgICAgICJ2aWRlb19zaXplPSVkeCVkOnBpeF9mbXQ9JWQ6dGltZV9iYXNlPSVkLyVkOnBpeGVsX2FzcGVjdD0lZC8lZCIsCiAgICAgICAgICAgIGRlY19jdHgtPndpZHRoLCBkZWNfY3R4LT5oZWlnaHQsIGRlY19jdHgtPnBpeF9mbXQsCiAgICAgICAgICAgIGRlY19jdHgtPnRpbWVfYmFzZS5udW0sIGRlY19jdHgtPnRpbWVfYmFzZS5kZW4sCiAgICAgICAgICAgIGRlY19jdHgtPnNhbXBsZV9hc3BlY3RfcmF0aW8ubnVtLAogICAgICAgICAgICBkZWNfY3R4LT5zYW1wbGVfYXNwZWN0X3JhdGlvLmRlbik7CgogICAgICAgIHJldCA9IGF2ZmlsdGVyX2dyYXBoX2NyZWF0ZV9maWx0ZXIoJmJ1ZmZlcnNyY19jdHgsIGJ1ZmZlcnNyYywgImluIiwKICAgICAgICAgICAgYXJncywgTlVMTCwgZmlsdGVyX2dyYXBoKTsKICAgICAgICBpZiAocmV0IDwgMCkgewogICAgICAgICAgICBhdl9sb2coTlVMTCwgQVZfTE9HX0VSUk9SLCAiQ2Fubm90IGNyZWF0ZSBidWZmZXIgc291cmNlXG4iKTsKICAgICAgICAgICAgZ290byBlbmQ7CiAgICAgICAgfQoKICAgICAgICByZXQgPSBhdmZpbHRlcl9ncmFwaF9jcmVhdGVfZmlsdGVyKCZidWZmZXJzaW5rX2N0eCwgYnVmZmVyc2luaywgIm91dCIsCiAgICAgICAgICAgIE5VTEwsIE5VTEwsIGZpbHRlcl9ncmFwaCk7CiAgICAgICAgaWYgKHJldCA8IDApIHsKICAgICAgICAgICAgYXZfbG9nKE5VTEwsIEFWX0xPR19FUlJPUiwgIkNhbm5vdCBjcmVhdGUgYnVmZmVyIHNpbmtcbiIpOwogICAgICAgICAgICBnb3RvIGVuZDsKICAgICAgICB9CgogICAgICAgIHJldCA9IGF2X29wdF9zZXRfYmluKGJ1ZmZlcnNpbmtfY3R4LCAicGl4X2ZtdHMiLAogICAgICAgICAgICAodWludDhfdCopJmVuY19jdHgtPnBpeF9mbXQsIHNpemVvZihlbmNfY3R4LT5waXhfZm10KSwKICAgICAgICAgICAgQVZfT1BUX1NFQVJDSF9DSElMRFJFTik7CiAgICAgICAgaWYgKHJldCA8IDApIHsKICAgICAgICAgICAgYXZfbG9nKE5VTEwsIEFWX0xPR19FUlJPUiwgIkNhbm5vdCBzZXQgb3V0cHV0IHBpeGVsIGZvcm1hdFxuIik7CiAgICAgICAgICAgIGdvdG8gZW5kOwogICAgICAgIH0KICAgIH0KICAgIGVsc2UgaWYgKGRlY19jdHgtPmNvZGVjX3R5cGUgPT0gQVZNRURJQV9UWVBFX0FVRElPKSB7CiAgICAgICAgYnVmZmVyc3JjID0gYXZmaWx0ZXJfZ2V0X2J5X25hbWUoImFidWZmZXIiKTsKICAgICAgICBidWZmZXJzaW5rID0gYXZmaWx0ZXJfZ2V0X2J5X25hbWUoImFidWZmZXJzaW5rIik7CiAgICAgICAgaWYgKCFidWZmZXJzcmMgfHwgIWJ1ZmZlcnNpbmspIHsKICAgICAgICAgICAgYXZfbG9nKE5VTEwsIEFWX0xPR19FUlJPUiwgImZpbHRlcmluZyBzb3VyY2Ugb3Igc2luayBlbGVtZW50IG5vdCBmb3VuZFxuIik7CiAgICAgICAgICAgIHJldCA9IEFWRVJST1JfVU5LTk9XTjsKICAgICAgICAgICAgZ290byBlbmQ7CiAgICAgICAgfQoKICAgICAgICBpZiAoIWRlY19jdHgtPmNoYW5uZWxfbGF5b3V0KQogICAgICAgICAgICBkZWNfY3R4LT5jaGFubmVsX2xheW91dCA9CiAgICAgICAgICAgIGF2X2dldF9kZWZhdWx0X2NoYW5uZWxfbGF5b3V0KGRlY19jdHgtPmNoYW5uZWxzKTsKICAgICAgICBzcHJpbnRmKGFyZ3MsCiAgICAgICAgICAgICJ0aW1lX2Jhc2U9JWQvJWQ6c2FtcGxlX3JhdGU9JWQ6c2FtcGxlX2ZtdD0lczpjaGFubmVsX2xheW91dD0weCUiIFBSSXg2NCwKICAgICAgICAgICAgZGVjX2N0eC0+dGltZV9iYXNlLm51bSwgZGVjX2N0eC0+dGltZV9iYXNlLmRlbiwgZGVjX2N0eC0+c2FtcGxlX3JhdGUsCiAgICAgICAgICAgIGF2X2dldF9zYW1wbGVfZm10X25hbWUoZGVjX2N0eC0+c2FtcGxlX2ZtdCksCiAgICAgICAgICAgIGRlY19jdHgtPmNoYW5uZWxfbGF5b3V0KTsKICAgICAgICByZXQgPSBhdmZpbHRlcl9ncmFwaF9jcmVhdGVfZmlsdGVyKCZidWZmZXJzcmNfY3R4LCBidWZmZXJzcmMsICJpbiIsCiAgICAgICAgICAgIGFyZ3MsIE5VTEwsIGZpbHRlcl9ncmFwaCk7CiAgICAgICAgaWYgKHJldCA8IDApIHsKICAgICAgICAgICAgYXZfbG9nKE5VTEwsIEFWX0xPR19FUlJPUiwgIkNhbm5vdCBjcmVhdGUgYXVkaW8gYnVmZmVyIHNvdXJjZVxuIik7CiAgICAgICAgICAgIGdvdG8gZW5kOwogICAgICAgIH0KCiAgICAgICAgcmV0ID0gYXZmaWx0ZXJfZ3JhcGhfY3JlYXRlX2ZpbHRlcigmYnVmZmVyc2lua19jdHgsIGJ1ZmZlcnNpbmssICJvdXQiLAogICAgICAgICAgICBOVUxMLCBOVUxMLCBmaWx0ZXJfZ3JhcGgpOwogICAgICAgIGlmIChyZXQgPCAwKSB7CiAgICAgICAgICAgIGF2X2xvZyhOVUxMLCBBVl9MT0dfRVJST1IsICJDYW5ub3QgY3JlYXRlIGF1ZGlvIGJ1ZmZlciBzaW5rXG4iKTsKICAgICAgICAgICAgZ290byBlbmQ7CiAgICAgICAgfQoKICAgICAgICByZXQgPSBhdl9vcHRfc2V0X2JpbihidWZmZXJzaW5rX2N0eCwgInNhbXBsZV9mbXRzIiwKICAgICAgICAgICAgKHVpbnQ4X3QqKSZlbmNfY3R4LT5zYW1wbGVfZm10LCBzaXplb2YoZW5jX2N0eC0+c2FtcGxlX2ZtdCksCiAgICAgICAgICAgIEFWX09QVF9TRUFSQ0hfQ0hJTERSRU4pOwogICAgICAgIGlmIChyZXQgPCAwKSB7CiAgICAgICAgICAgIGF2X2xvZyhOVUxMLCBBVl9MT0dfRVJST1IsICJDYW5ub3Qgc2V0IG91dHB1dCBzYW1wbGUgZm9ybWF0XG4iKTsKICAgICAgICAgICAgZ290byBlbmQ7CiAgICAgICAgfQoKICAgICAgICByZXQgPSBhdl9vcHRfc2V0X2JpbihidWZmZXJzaW5rX2N0eCwgImNoYW5uZWxfbGF5b3V0cyIsCiAgICAgICAgICAgICh1aW50OF90KikmZW5jX2N0eC0+Y2hhbm5lbF9sYXlvdXQsCiAgICAgICAgICAgIHNpemVvZihlbmNfY3R4LT5jaGFubmVsX2xheW91dCksIEFWX09QVF9TRUFSQ0hfQ0hJTERSRU4pOwogICAgICAgIGlmIChyZXQgPCAwKSB7CiAgICAgICAgICAgIGF2X2xvZyhOVUxMLCBBVl9MT0dfRVJST1IsICJDYW5ub3Qgc2V0IG91dHB1dCBjaGFubmVsIGxheW91dFxuIik7CiAgICAgICAgICAgIGdvdG8gZW5kOwogICAgICAgIH0KCiAgICAgICAgcmV0ID0gYXZfb3B0X3NldF9iaW4oYnVmZmVyc2lua19jdHgsICJzYW1wbGVfcmF0ZXMiLAogICAgICAgICAgICAodWludDhfdCopJmVuY19jdHgtPnNhbXBsZV9yYXRlLCBzaXplb2YoZW5jX2N0eC0+c2FtcGxlX3JhdGUpLAogICAgICAgICAgICBBVl9PUFRfU0VBUkNIX0NISUxEUkVOKTsKICAgICAgICBpZiAocmV0IDwgMCkgewogICAgICAgICAgICBhdl9sb2coTlVMTCwgQVZfTE9HX0VSUk9SLCAiQ2Fubm90IHNldCBvdXRwdXQgc2FtcGxlIHJhdGVcbiIpOwogICAgICAgICAgICBnb3RvIGVuZDsKICAgICAgICB9CiAgICB9CiAgICBlbHNlIHsKICAgICAgICByZXQgPSBBVkVSUk9SX1VOS05PV047CiAgICAgICAgZ290byBlbmQ7CiAgICB9CgogICAgLyogRW5kcG9pbnRzIGZvciB0aGUgZmlsdGVyIGdyYXBoLiAqLwogICAgb3V0cHV0cy0+bmFtZSA9IGF2X3N0cmR1cCgiaW4iKTsKICAgIG91dHB1dHMtPmZpbHRlcl9jdHggPSBidWZmZXJzcmNfY3R4OwogICAgb3V0cHV0cy0+cGFkX2lkeCA9IDA7CiAgICBvdXRwdXRzLT5uZXh0ID0gTlVMTDsKCiAgICBpbnB1dHMtPm5hbWUgPSBhdl9zdHJkdXAoIm91dCIpOwogICAgaW5wdXRzLT5maWx0ZXJfY3R4ID0gYnVmZmVyc2lua19jdHg7CiAgICBpbnB1dHMtPnBhZF9pZHggPSAwOwogICAgaW5wdXRzLT5uZXh0ID0gTlVMTDsKCiAgICBpZiAoIW91dHB1dHMtPm5hbWUgfHwgIWlucHV0cy0+bmFtZSkgewogICAgICAgIHJldCA9IEFWRVJST1IoRU5PTUVNKTsKICAgICAgICBnb3RvIGVuZDsKICAgIH0KCiAgICBpZiAoKHJldCA9IGF2ZmlsdGVyX2dyYXBoX3BhcnNlX3B0cihmaWx0ZXJfZ3JhcGgsIHN0ckZpbHRlclNwZWMuY19zdHIoKSwKICAgICAgICAmaW5wdXRzLCAmb3V0cHV0cywgTlVMTCkpIDwgMCkKICAgICAgICBnb3RvIGVuZDsKCiAgICBpZiAoKHJldCA9IGF2ZmlsdGVyX2dyYXBoX2NvbmZpZyhmaWx0ZXJfZ3JhcGgsIE5VTEwpKSA8IDApCiAgICAgICAgZ290byBlbmQ7CgogICAgLyogRmlsbCBGaWx0ZXJpbmdDb250ZXh0ICovCiAgICBmY3R4LT5idWZmZXJzcmNfY3R4ID0gYnVmZmVyc3JjX2N0eDsKICAgIGZjdHgtPmJ1ZmZlcnNpbmtfY3R4ID0gYnVmZmVyc2lua19jdHg7CiAgICBmY3R4LT5maWx0ZXJfZ3JhcGggPSBmaWx0ZXJfZ3JhcGg7CgplbmQ6CiAgICBhdmZpbHRlcl9pbm91dF9mcmVlKCZpbnB1dHMpOwogICAgYXZmaWx0ZXJfaW5vdXRfZnJlZSgmb3V0cHV0cyk7CgogICAgcmV0dXJuIHJldDsKfQoKaW50IENWaWRlb0NvbnZlcjo6RmlsdGVyRW5jb2RlV3JpdGVGcmFtZShBVkZyYW1lKiBmcmFtZSwgaW50IHN0cmVhbUluZGV4KQp7CiAgICBpbnQgcmV0OwogICAgQVZGcmFtZSogZmlsdF9mcmFtZTsKICAgIFN0cmVhbUNvbnRleHQmIHN0cmVhbUN0eCA9IG1fU3RyZWFtQ3R4c1tzdHJlYW1JbmRleF07CiAgICBhdl9sb2coTlVMTCwgQVZfTE9HX0lORk8sICJQdXNoaW5nIGRlY29kZWQgZnJhbWUgdG8gZmlsdGVyc1xuIik7CiAgICAvKiBwdXNoIHRoZSBkZWNvZGVkIGZyYW1lIGludG8gdGhlIGZpbHRlcmdyYXBoICovCiAgICByZXQgPSBhdl9idWZmZXJzcmNfYWRkX2ZyYW1lX2ZsYWdzKHN0cmVhbUN0eC5maWx0ZXJfY3R4LT5idWZmZXJzcmNfY3R4LAogICAgICAgIGZyYW1lLCAwKTsKICAgIGlmIChyZXQgPCAwKSB7CiAgICAgICAgYXZfbG9nKE5VTEwsIEFWX0xPR19FUlJPUiwgIkVycm9yIHdoaWxlIGZlZWRpbmcgdGhlIGZpbHRlcmdyYXBoXG4iKTsKICAgICAgICByZXR1cm4gcmV0OwogICAgfQoKICAgIC8qIHB1bGwgZmlsdGVyZWQgZnJhbWVzIGZyb20gdGhlIGZpbHRlcmdyYXBoICovCiAgICB3aGlsZSAoMSkgewogICAgICAgIGZpbHRfZnJhbWUgPSBhdl9mcmFtZV9hbGxvYygpOwogICAgICAgIGlmICghZmlsdF9mcmFtZSkgewogICAgICAgICAgICByZXQgPSBBVkVSUk9SKEVOT01FTSk7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgICBhdl9sb2coTlVMTCwgQVZfTE9HX0lORk8sICJQdWxsaW5nIGZpbHRlcmVkIGZyYW1lIGZyb20gZmlsdGVyc1xuIik7CiAgICAgICAgcmV0ID0gYXZfYnVmZmVyc2lua19nZXRfZnJhbWUoc3RyZWFtQ3R4LmZpbHRlcl9jdHgtPmJ1ZmZlcnNpbmtfY3R4LAogICAgICAgICAgICBmaWx0X2ZyYW1lKTsKICAgICAgICBpZiAocmV0IDwgMCkgewogICAgICAgICAgICAvKiBpZiBubyBtb3JlIGZyYW1lcyBmb3Igb3V0cHV0IC0gcmV0dXJucyBBVkVSUk9SKEVBR0FJTikKICAgICAgICAgICAgICogaWYgZmx1c2hlZCBhbmQgbm8gbW9yZSBmcmFtZXMgZm9yIG91dHB1dCAtIHJldHVybnMgQVZFUlJPUl9FT0YKICAgICAgICAgICAgICogcmV3cml0ZSByZXRjb2RlIHRvIDAgdG8gc2hvdyBpdCBhcyBub3JtYWwgcHJvY2VkdXJlIGNvbXBsZXRpb24KICAgICAgICAgICAgICovCiAgICAgICAgICAgIGlmIChyZXQgPT0gQVZFUlJPUihFQUdBSU4pIHx8IHJldCA9PSBBVkVSUk9SX0VPRikKICAgICAgICAgICAgICAgIHJldCA9IDA7CiAgICAgICAgICAgIGF2X2ZyYW1lX2ZyZWUoJmZpbHRfZnJhbWUpOwogICAgICAgICAgICBicmVhazsKICAgICAgICB9CgogICAgICAgIGZpbHRfZnJhbWUtPnBpY3RfdHlwZSA9IEFWX1BJQ1RVUkVfVFlQRV9OT05FOwogICAgICAgIHJldCA9IEVuY29kZVdyaXRlRnJhbWUoZmlsdF9mcmFtZSwgc3RyZWFtSW5kZXgsIE5VTEwpOwogICAgICAgIGlmIChyZXQgPCAwKQogICAgICAgICAgICBicmVhazsKICAgIH0KCiAgICByZXR1cm4gcmV0Owp9CgppbnQgQ1ZpZGVvQ29udmVyOjpFbmNvZGVXcml0ZUZyYW1lKEFWRnJhbWUqIGZpbHRfZnJhbWUsIGludCBzdHJlYW1JbmRleCwgaW50KiBnb3RfZnJhbWUpCnsKICAgIFN0cmVhbUNvbnRleHQmIHN0cmVhbUN0eCA9IG1fU3RyZWFtQ3R4c1tzdHJlYW1JbmRleF07CiAgICBpbnQgaUluU3RyZWFtSW5kZXggPSBzdHJlYW1JbmRleDsKICAgIGludCBpT3V0U3RyZWFtSW5kZXggPSBtX1N0cmVhbU1hcFtpSW5TdHJlYW1JbmRleF07CiAgICBBVkZvcm1hdENvbnRleHQqIG9GbXRDdHggPSBtX09GbXRDdHg7CiAgICBBVlN0cmVhbSogb3V0U3RyZWFtID0gb0ZtdEN0eC0+c3RyZWFtc1tpT3V0U3RyZWFtSW5kZXhdOwogICAgQVZNZWRpYVR5cGUgdHlwZSA9IG91dFN0cmVhbS0+Y29kZWNwYXItPmNvZGVjX3R5cGU7CgogICAgaW50IHJldDsKICAgIGludCBnb3RfZnJhbWVfbG9jYWw7CiAgICBBVlBhY2tldCBlbmNfcGt0OwoKICAgIGludCAoKmVuY19mdW5jKShBVkNvZGVjQ29udGV4dCosIEFWUGFja2V0KiwgY29uc3QgQVZGcmFtZSosIGludCopID0gCiAgICAgICAgKHR5cGUgPT0gIEFWTUVESUFfVFlQRV9WSURFTykgPyBhdmNvZGVjX2VuY29kZV92aWRlbzIgOiBhdmNvZGVjX2VuY29kZV9hdWRpbzI7CgogICAgaWYgKCFnb3RfZnJhbWUpCiAgICAgICAgZ290X2ZyYW1lID0gJmdvdF9mcmFtZV9sb2NhbDsKCiAgICBhdl9sb2coTlVMTCwgQVZfTE9HX0lORk8sICJFbmNvZGluZyBmcmFtZVxuIik7CiAgICAvKiBlbmNvZGUgZmlsdGVyZWQgZnJhbWUgKi8KICAgIGVuY19wa3QuZGF0YSA9IE5VTEw7CiAgICBlbmNfcGt0LnNpemUgPSAwOwogICAgYXZfaW5pdF9wYWNrZXQoJmVuY19wa3QpOwogICAgcmV0ID0gZW5jX2Z1bmMoc3RyZWFtQ3R4LmVuY19jdHgsICZlbmNfcGt0LCBmaWx0X2ZyYW1lLCBnb3RfZnJhbWUpOwogICAgYXZfZnJhbWVfZnJlZSgmZmlsdF9mcmFtZSk7CiAgICBpZiAocmV0IDwgMCkKICAgICAgICByZXR1cm4gcmV0OwogICAgaWYgKCEoKmdvdF9mcmFtZSkpCiAgICAgICAgcmV0dXJuIDA7CgogICAgZW5jX3BrdC5zdHJlYW1faW5kZXggPSBpT3V0U3RyZWFtSW5kZXg7CiAgICBhdl9wYWNrZXRfcmVzY2FsZV90cygmZW5jX3BrdCwgc3RyZWFtQ3R4LmVuY19jdHgtPnRpbWVfYmFzZSwgb3V0U3RyZWFtLT50aW1lX2Jhc2UpOwoKICAgIGF2X2xvZyhOVUxMLCBBVl9MT0dfREVCVUcsICJNdXhpbmcgZnJhbWVcbiIpOwogICAgcmV0ID0gYXZfaW50ZXJsZWF2ZWRfd3JpdGVfZnJhbWUob0ZtdEN0eCwgJmVuY19wa3QpOwogICAgcmV0dXJuIHJldDsKfQoKaW50IENWaWRlb0NvbnZlcjo6Rmx1c2hFbmNvZGVyKGludCBzdHJlYW1JbmRleCkKewogICAgaW50IHJldDsKICAgIGludCBnb3RfZnJhbWU7CiAgICBTdHJlYW1Db250ZXh0JiBzdHJlYW1DdHggPSBtX1N0cmVhbUN0eHNbc3RyZWFtSW5kZXhdOwogICAgaWYgKCEoc3RyZWFtQ3R4LmVuY19jdHgtPmNvZGVjLT5jYXBhYmlsaXRpZXMgJgogICAgICAgIEFWX0NPREVDX0NBUF9ERUxBWSkpCiAgICAgICAgcmV0dXJuIDA7CgogICAgd2hpbGUgKDEpIAogICAgewogICAgICAgIHJldCA9IEVuY29kZVdyaXRlRnJhbWUoTlVMTCwgc3RyZWFtSW5kZXgsICZnb3RfZnJhbWUpOwogICAgICAgIGlmIChyZXQgPCAwKQogICAgICAgICAgICBicmVhazsKICAgICAgICBpZiAoIWdvdF9mcmFtZSkKICAgICAgICAgICAgcmV0dXJuIDA7CiAgICB9CiAgICByZXR1cm4gcmV0Owp9CgpzdGQ6OnN0cmluZyBDVmlkZW9Db252ZXI6OkdldE91dE1lZGlhVHlwZShBVkZvcm1hdENvbnRleHQqJiBtX09GbXRDdHgpCnsKICAgIGlmIChtX09GbXRDdHggPT0gTlVMTCB8fCBtX09GbXRDdHgtPm9mb3JtYXQgPT0gTlVMTCkgcmV0dXJuICIiOwogICAgc3RkOjpzdHJpbmcgc3RyTWVkaWFUeXBlID0gc3RkOjpzdHJpbmcobV9PRm10Q3R4LT5vZm9ybWF0LT5taW1lX3R5cGUpLmZpbmQoImF1ZGlvIikgPT0gMCA/ICJhdWRpbyIgOiAidmlkZW8iOwogICAgcmV0dXJuIHN0ck1lZGlhVHlwZTsKfQoKQVZDb2RlY0lEIENWaWRlb0NvbnZlcjo6R2V0RGVmYXVsdENvZGVjKGNvbnN0IHN0ZDo6c3RyaW5nJiBzdHJGbXROYW1lLCBBVk1lZGlhVHlwZSBtZWRpYVR5cGUpCnsKICAgIHN0ZDo6c3RyaW5nIHN0ckxGbXROYW1lID0gc3RyRm10TmFtZTsKICAgIHN0ZDo6dHJhbnNmb3JtKHN0ckxGbXROYW1lLmJlZ2luKCksIHN0ckxGbXROYW1lLmVuZCgpLCBzdHJMRm10TmFtZS5iZWdpbigpLCA6OnRvbG93ZXIpOwogICAgaWYgKG1lZGlhVHlwZSA9PSBBVk1FRElBX1RZUEVfQVVESU8pCiAgICB7CiAgICAgICAgaWYgKHN0ckxGbXROYW1lID09ICJtcDMiKQogICAgICAgIHsKICAgICAgICAgICAgcmV0dXJuIEFWQ29kZWNJRDo6QVZfQ09ERUNfSURfTVAzOwogICAgICAgIH0KICAgICAgICBlbHNlIGlmIChzdHJMRm10TmFtZSA9PSAibXA0IiB8fCBzdHJMRm10TmFtZSA9PSAiYWFjIiB8fCBzdHJMRm10TmFtZSA9PSAiZmx2IiB8fCBzdHJMRm10TmFtZSA9PSAiYWR0cyIpCiAgICAgICAgewogICAgICAgICAgICByZXR1cm4gQVZDb2RlY0lEOjpBVl9DT0RFQ19JRF9BQUM7CiAgICAgICAgfQogICAgfQogICAgZWxzZSBpZiAobWVkaWFUeXBlID09IEFWTUVESUFfVFlQRV9WSURFTykKICAgIHsKICAgICAgICBpZiAoc3RyTEZtdE5hbWUgPT0gIm1wNCIgfHwgc3RyTEZtdE5hbWUgPT0gImZsdiIpCiAgICAgICAgewogICAgICAgICAgICByZXR1cm4gQVZDb2RlY0lEOjpBVl9DT0RFQ19JRF9IMjY0OwogICAgICAgIH0KICAgIH0KICAgIHJldHVybiBBVkNvZGVjSUQ6OkFWX0NPREVDX0lEX05PTkU7Cn0KCg==
==
I3ByYWdtYSBvbmNlCgpleHRlcm4gIkMiCnsKI2luY2x1ZGUgPGxpYmF2Y29kZWMvYXZjb2RlYy5oPgojaW5jbHVkZSA8bGliYXZmb3JtYXQvYXZmb3JtYXQuaD4KI2luY2x1ZGUgPGxpYmF2ZmlsdGVyL2J1ZmZlcnNpbmsuaD4KI2luY2x1ZGUgPGxpYmF2ZmlsdGVyL2J1ZmZlcnNyYy5oPgojaW5jbHVkZSA8bGliYXZ1dGlsL29wdC5oPgojaW5jbHVkZSA8bGliYXZ1dGlsL3BpeGRlc2MuaD4KI2luY2x1ZGUgPGxpYmF2dXRpbC9hdmFzc2VydC5oPgojaW5jbHVkZSA8bGliYXZ1dGlsL2NoYW5uZWxfbGF5b3V0Lmg+CiNpbmNsdWRlIDxsaWJhdnV0aWwvb3B0Lmg+CiNpbmNsdWRlIDxsaWJhdnV0aWwvbWF0aGVtYXRpY3MuaD4KI2luY2x1ZGUgPGxpYnN3c2NhbGUvc3dzY2FsZS5oPgojaW5jbHVkZSA8bGlic3dyZXNhbXBsZS9zd3Jlc2FtcGxlLmg+Cn0KI2luY2x1ZGUgPHN0cmluZz4KI2luY2x1ZGUgInN0ZF9zdHIuaCIKI2luY2x1ZGUgIklITFNEb3dubG9hZC5oIgojaW5jbHVkZSAiQ29tbW9uL0NUaHJlYWRMb2NrLmgiCiNpbmNsdWRlICJDb21tb24vVGhyZWFkUG9vbC5oIgojaW5jbHVkZSA8c3RkaW8uaD4KI2luY2x1ZGUgPGxpYnN3cmVzYW1wbGUvc3dyZXNhbXBsZS5oPgp1c2luZyBuYW1lc3BhY2UgTUZMaWI7CgojZGVmaW5lIENPTlZFUl9PUFRfTk9ORSAoMCkKI2RlZmluZSBDT05WRVJfVkNPREVDX0NPUFkgICgweDEgPDwgMCkgCiNkZWZpbmUgQ09OVkVSX0FDT0RFQ19DT1BZICAoMHgxIDw8IDEpCiNkZWZpbmUgQ09OVkVSX1ZJREVPX1BBU1MgICAoMHgxIDw8IDIpCiNkZWZpbmUgQ09OVkVSX0FVRElPX1BBU1MgICAoMHgxIDw8IDMpCgojZGVmaW5lIENPTlZFUl9DT1BZIChDT05WRVJfVkNPREVDX0NPUFl8Q09OVkVSX0FDT0RFQ19DT1BZKQoKI2RlZmluZSBDT05WRVJfQ0hFQ0tfVVNFKG9wdCx0YWcpICgob3B0JnRhZykgPT0gdGFnID8gdHJ1ZSA6IGZhbHNlKQoKdHlwZWRlZiBzdHJ1Y3QgRmlsdGVyaW5nQ29udGV4dCB7CiAgICBBVkZpbHRlckNvbnRleHQqIGJ1ZmZlcnNpbmtfY3R4OwogICAgQVZGaWx0ZXJDb250ZXh0KiBidWZmZXJzcmNfY3R4OwogICAgQVZGaWx0ZXJHcmFwaCogZmlsdGVyX2dyYXBoOwogICAgRmlsdGVyaW5nQ29udGV4dCgpIHsKICAgICAgICBidWZmZXJzaW5rX2N0eCA9IG51bGxwdHI7CiAgICAgICAgYnVmZmVyc3JjX2N0eCA9IG51bGxwdHI7CiAgICAgICAgZmlsdGVyX2dyYXBoID0gbnVsbHB0cjsKICAgIH0KfSBGaWx0ZXJpbmdDb250ZXh0Owp0eXBlZGVmIHN0cnVjdCBTdHJlYW1Db250ZXh0CnsKICAgIEFWQ29kZWNDb250ZXh0KiBkZWNfY3R4OwogICAgQVZDb2RlY0NvbnRleHQqIGVuY19jdHg7CiAgICBGaWx0ZXJpbmdDb250ZXh0KiBmaWx0ZXJfY3R4OwogICAgU3dyQ29udGV4dCogcmVzYW1wbGVfY3R4OwogICAgU3RyZWFtQ29udGV4dCgpCiAgICB7CiAgICAgICAgZGVjX2N0eCA9IG51bGxwdHI7CiAgICAgICAgZW5jX2N0eCA9IG51bGxwdHI7CiAgICAgICAgZmlsdGVyX2N0eCA9IG51bGxwdHI7CiAgICAgICAgcmVzYW1wbGVfY3R4ID0gbnVsbHB0cjsKICAgIH0KfSBTdHJlYW1Db250ZXh0OwoKY2xhc3MgSVZpZGVvUHJvY2Vzc0NhbGxiYWNrCnsKcHVibGljOgogICAgLyoKICAgIOWKn+iDve+8miAgICAg5aSE55CG6L+b5bqm5Zue6LCDCiAgICDlj4LmlbDvvJogICAgIGRQcm9jZXNzICAwfjEuMOWvueW6lCAwfjEwMAogICAg6L+U5Zue5YC877yaICAgMDrmiJDlip8KICAgIOa1geeoi++8miAgICAg5ZCM5q2lCiAgICAqLwogICAgdmlydHVhbCB2b2lkIE9uUHJvY2Vzcyhkb3VibGUgZFByb2Nlc3MpID0gMDsKCiAgICAvKgogICAg5Yqf6IO977yaICAgICDlpITnkIbnu5PmnZ/lm57osIMKICAgIOWPguaVsO+8miAgICAgaUNvZGUgIOmUmeivr+eggQogICAg5Y+C5pWw77yaICAgICBzdHJNc2cgIOmUmeivr+aPkOekuuS/oeaBrwogICAg6L+U5Zue5YC877yaICAgMDrmiJDlip8KICAgIOa1geeoi++8miAgICAg5ZCM5q2lCiAgICAqLwogICAgdmlydHVhbCB2b2lkIE9uRW5kKGludCBpQ29kZSwgY29uc3QgY2hhciogc3RyTXNnKSA9IDA7Cn07CgpjbGFzcyBDVmlkZW9Db252ZXI6IHB1YmxpYyBDVGhyZWFkTG9jawp7CnB1YmxpYzoKICAgIElWaWRlb1Byb2Nlc3NDYWxsYmFjayogbV9DYWxsYmFjazsKICAgIGJvb2wgbV9TdG9wOwogICAgYm9vbCBtX1BhdXNlOwogICAgQ1RocmVhZExvY2sgbV9TdG9wRXZlbnQ7CiAgICBzdGQ6Om11dGV4IG1fUGF1c2VFdmVudE10eDsKICAgIHN0ZDo6Y29uZGl0aW9uX3ZhcmlhYmxlIG1fUGF1c2VFdmVudDsKCiAgICBBVkZvcm1hdENvbnRleHQqIG1fSUZtdEN0eDsKICAgIEFWRm9ybWF0Q29udGV4dCogbV9PRm10Q3R4OwogICAgc3RkOjptYXA8aW50LCBpbnQ+IG1fU3RyZWFtTWFwOwogICAgc3RkOjp2ZWN0b3I8U3RyZWFtQ29udGV4dD4gbV9TdHJlYW1DdHhzOwpwdWJsaWM6CiAgICBDVmlkZW9Db252ZXIoKTsKICAgIH5DVmlkZW9Db252ZXIoKTsKcHVibGljOgogICAgdmlydHVhbCB2b2lkIFNldENhbGxiYWNrKElWaWRlb1Byb2Nlc3NDYWxsYmFjayogY2IpOwogICAgdmlydHVhbCB2b2lkIFN0b3AoKTsKICAgIHZpcnR1YWwgdm9pZCBQYXVzZSgpOwogICAgdmlydHVhbCB2b2lkIENvbnRpbnVlKCk7CiAgICB2aXJ0dWFsIHZvaWQgQ29udmVyKGNvbnN0IFRDSEFSKiBjc3RyRHN0VVJMLCBjb25zdCBUQ0hBUiogY3N0clNhdmVGaWxlLCBpbnQgb3B0aW9ucyA9IENPTlZFUl9PUFRfTk9ORSk7CnByb3RlY3RlZDoKICAgIGJvb2wgQ29udmVyXyhjb25zdCBzdGQ6OnN0cmluZyYgc3RyRHN0VVJMLCBjb25zdCBzdGQ6OnN0cmluZyYgc3RyU2F2ZUZpbGUsIGludCBvcHRpb25zKTsKICAgIHZvaWQgU2VuZFByb2Nlc3MoZG91YmxlIGRQcm9jZXNzKTsKICAgIHZvaWQgU2VuZEVuZChpbnQgaUNvZGUsIGNvbnN0IHN0ZDo6c3RyaW5nIHN0ck1zZyk7CiAgICB2b2lkIFdhaXRDb250aW51ZSgpOwpwcml2YXRlOgogICAgdm9pZCBpbml0KCk7CiAgICBzdGF0aWMgaW50IElucHV0SW50ZXJydXB0Q2FsbGJhY2sodm9pZCogcCk7CiAgICBpbnQgT3BlbklucHV0RmlsZShjb25zdCBzdGQ6OnN0cmluZyYgc3RyRmlsZU5hbWUpOwogICAgaW50IE9wZW5PdXRwdXRGaWxlKGNvbnN0IHN0ZDo6c3RyaW5nJiBzdHJGaWxlTmFtZSk7CiAgICBpbnQgSW5pdFJlc2FtcGxlcnMoKTsKICAgIGludCBDcmVhdGVSZXNhbXBsZXIoQVZDb2RlY0NvbnRleHQqIGRlY0N0eCwgQVZDb2RlY0NvbnRleHQqIGVuY0N0eCwgU3dyQ29udGV4dCoqIHJlc2FtcGxlQ3R4KTsKICAgIGludCBJbml0RmlsdGVycygpOwogICAgaW50IEluaXRGaWx0ZXIoRmlsdGVyaW5nQ29udGV4dCogZkN0eCwgQVZDb2RlY0NvbnRleHQqIGRlY0N0eCwgQVZDb2RlY0NvbnRleHQqIGVuY0N0eCwgY29uc3Qgc3RkOjpzdHJpbmcmIHN0ckZpbHRlclNwZWMpOwogICAgaW50IEZpbHRlckVuY29kZVdyaXRlRnJhbWUoQVZGcmFtZSogZnJhbWUsIGludCBzdHJlYW1JbmRleCk7CiAgICBpbnQgRW5jb2RlV3JpdGVGcmFtZShBVkZyYW1lKiBmcmFtZSwgaW50IHN0cmVhbUluZGV4LCBpbnQqIGdvdF9mcmFtZSk7CiAgICBpbnQgRmx1c2hFbmNvZGVyKGludCBzdHJlYW1JbmRleCk7CgpwdWJsaWM6CiAgICBzdGQ6OnN0cmluZyBHZXRPdXRNZWRpYVR5cGUoQVZGb3JtYXRDb250ZXh0KiYgbV9PRm10Q3R4KTsKICAgIEFWQ29kZWNJRCBHZXREZWZhdWx0Q29kZWMoY29uc3Qgc3RkOjpzdHJpbmcmIHN0ckZtdE5hbWUsIEFWTWVkaWFUeXBlIG1lZGlhVHlwZSA9IEFWTWVkaWFUeXBlOjpBVk1FRElBX1RZUEVfVklERU8pOwp9OwoK
