==H
I2lmbmRlZiBDRklMRU1NQVBfSF8KI2RlZmluZSBDRklMRU1NQVBfSF8KCiNpZmRlZiBfV0lOMzIKI2luY2x1ZGUgPFdpbmRvd3MuaD4KI2luY2x1ZGUgPHdjaGFyLmg+CiNlbHNlIAovL19fQVBQTEVfXwovL19saW51eF8KI2luY2x1ZGUgPHN0ZGlvLmg+CiNpbmNsdWRlIDxzeXMvc3RhdC5oPgojaW5jbHVkZSA8c3lzL21tYW4uaD4KI2VuZGlmIC8vIF9XSU4zMl8KI2luY2x1ZGUgPGNzdGRpbnQ+CiNpbmNsdWRlIDxzdHJpbmc+CgpjbGFzcyBDRmlsZU1lbW9yeU1hcAp7CnB1YmxpYzoKCWVudW0gY2xhc3MgQ0ZpbGVNZW1vcnlNYXBNb2RlIHsKCQlDRmlsZU1lbW9yeU1hcE1vZGVfUmVhZCwgLy/lj6ror7sKCQlDRmlsZU1lbW9yeU1hcE1vZGVfUmVhZEFuZFdyaXRlIC8v6K+75YaZCgl9OwpwdWJsaWM6CglDRmlsZU1lbW9yeU1hcCgpOwoJLy/liJvlu7rkuIDkuKrmlofku7bmmKDlsITvvIzmmKDlsITnm67moIfkuLrmjIflrprnmoTmlofku7blkI3np7DvvIzlpoLmnpzmiZPlvIDlpLHotKXvvIzlj6/ku6XnlKhJc09wZW7mo4DpqozmmK/lkKbmiJDlip8KCS8vQHBhcmFtIHN0ckZpbGVOYW1lIFtpbl0g5paH5Lu26Lev5b6ECgkvL0BwYXJhbSBtb2RlIFtpbl0g5pig5bCE5pa55byPIOm7mOiupOWPquivu+aWueW8j+aJk+W8gAoJQ0ZpbGVNZW1vcnlNYXAoY29uc3Qgc3RkOjpzdHJpbmcmIHN0ckZpbGVOYW1lLAoJCUNGaWxlTWVtb3J5TWFwTW9kZSBtb2RlID0gQ0ZpbGVNZW1vcnlNYXBNb2RlOjpDRmlsZU1lbW9yeU1hcE1vZGVfUmVhZCk7CgoJQ0ZpbGVNZW1vcnlNYXAoY29uc3QgQ0ZpbGVNZW1vcnlNYXAmKSA9IGRlbGV0ZTsgLy/kuI3mlK/mjIHlpI3liLbmi7fotJ3mnoTpgKAKCUNGaWxlTWVtb3J5TWFwKENGaWxlTWVtb3J5TWFwJiYgcmlnaHQpOy8vIG5vZXhjZXB0OyBDKysgMTEKCX5DRmlsZU1lbW9yeU1hcCgpOwpwdWJsaWM6CgkvL+aJk+W8gOaWh+S7tu+8jOWwhuaWh+S7tuWGheWuueS7peaYoOWwhOWIsOWGheWtmO+8jAoJLy9AcGFyYW0gc3RyRmlsZU5hbWUgW2luXSDmlofku7bot6/lvoQKCS8vQHBhcmFtIG1vZGUgW2luXSDmmKDlsITmlrnlvI8g6buY6K6k5Y+q6K+75pa55byP5omT5byACgkvL0ByZXR1cm4g5aaC5p6c5oiQ5Yqf77yM6L+U5Zue5pig5bCE55qE5oyH6ZKI77yM5Y+v5Lul6YCa6L+H6L+Z5Liq5oyH6ZKI6K6/6Zeu5paH5Lu25YaF5a65LOi/lOWbnk5VTEzlpLHotKXvvIzor7fmo4DmtYvmmK/lkKblt7Lnu4/miZPlvIDvvIzmiJbmlofku7bkuI3lj6/orr/pl64KCWNoYXIqIE9wZW4oY29uc3Qgc3RkOjpzdHJpbmcmIHN0ckZpbGVOYW1lLCBDRmlsZU1lbW9yeU1hcE1vZGUgbW9kZSA9IENGaWxlTWVtb3J5TWFwTW9kZTo6Q0ZpbGVNZW1vcnlNYXBNb2RlX1JlYWQpOwoKCS8v5YWz6Zet5paH5Lu277yM6Kej5byA5LiO5paH5Lu255qE5pig5bCECgkvL+WFs+mXreWQju+8jOWPr+S7pee7p+e7rU9wZW7miZPlvIDlj6blpJbnmoTmlofku7YKCXZvaWQgQ2xvc2UoKTsKCS8v5qOA6aqM5piv5ZCm5bey57uP5omT5byACgkvL0ByZXR1cm4g5aaC5p6c5bey57uP5omT5byA77yM6L+U5ZuedHJ1ZQoJYm9vbCBJc09wZW4oKSBjb25zdDsKCgkvLwoJLy9AcmV0dXJuIOaVsOaNruaMh+mSiAoJY2hhciogR2V0RGF0YSgpIGNvbnN0OwoJLy8KCS8vQHJldHVybiDmmKDlsITnmoTlpKflsI8KCXVpbnQ2NF90IEdldFNpemUoKSBjb25zdDsKCS8v6I635Y+W5b2T5YmN5omT5byA55qE5paH5Lu25ZCN56ewCgkvL0ByZXR1cm4g5paH5Lu25ZCNCgljb25zdCBzdGQ6OnN0cmluZyYgR2V0RmlsZU5hbWUoKSBjb25zdDsKcHJpdmF0ZToKCXZvaWQgSW5pdChjb25zdCBzdGQ6OnN0cmluZyYgY3N0ckZpbGVOYW1lLCBDRmlsZU1lbW9yeU1hcE1vZGUgbW9kZSk7CnByaXZhdGU6CglDRmlsZU1lbW9yeU1hcE1vZGUgbV9lbk1vZGU7Cglib29sIG1fYk9wZW47CgljaGFyKiBtX3BGaWxlQWRkcjsgLy8KCXVpbnQ2NF90IG1faWxGaWxlQWRkck1hcExlbjsgLy/mmKDlsITnmoTlpKflsI8KCXN0ZDo6c3RyaW5nIG1fc3RyRmlsZU5hbWU7CiNpZmRlZiBfV0lOMzIKCUhBTkRMRSBtX2hGaWxlOwoJSEFORExFIG1faE1hcHBpbmc7CiNlbHNlCglpbnQgbV9mZDsvL+aWh+S7tueahGZkCiNlbmRpZiAvLyBfV0lOMzIKfTsKCiNlbmRpZiAvLyAhQ0ZJTEVNTUFQX0hf
==C
I2luY2x1ZGUgIkNGaWxlTWVtb3J5TWFwLmgiCiNpbmNsdWRlIDxzdHJpbmc+CiNpbmNsdWRlIDx0Y2hhci5oPgojaWZkZWYgVU5JQ09ERQojaW5jbHVkZSA8bG9jYWxlPgojaW5jbHVkZSA8Y29kZWN2dD4KI2VuZGlmIC8vVU5JQ09ERQoKQ0ZpbGVNZW1vcnlNYXA6OkNGaWxlTWVtb3J5TWFwKCkKewoJc3RkOjpzdHJpbmcgc3RyRmlsZU5hbWU7CglJbml0KHN0ckZpbGVOYW1lLCBDRmlsZU1lbW9yeU1hcE1vZGU6OkNGaWxlTWVtb3J5TWFwTW9kZV9SZWFkKTsKfQoKQ0ZpbGVNZW1vcnlNYXA6OkNGaWxlTWVtb3J5TWFwKGNvbnN0IHN0ZDo6c3RyaW5nJiBzdHJGaWxlTmFtZSwgQ0ZpbGVNZW1vcnlNYXBNb2RlIG1vZGUpCnsKCUluaXQoc3RyRmlsZU5hbWUsIG1vZGUpOwp9CgpDRmlsZU1lbW9yeU1hcDo6Q0ZpbGVNZW1vcnlNYXAoQ0ZpbGVNZW1vcnlNYXAmJiByaWdodCkKewoJbV9iT3BlbiA9IHJpZ2h0Lm1fYk9wZW47CglyaWdodC5tX2JPcGVuID0gZmFsc2U7CgltX3BGaWxlQWRkciA9IHJpZ2h0Lm1fcEZpbGVBZGRyOwoJcmlnaHQubV9wRmlsZUFkZHIgPSBOVUxMOwoJbV9pbEZpbGVBZGRyTWFwTGVuID0gcmlnaHQubV9pbEZpbGVBZGRyTWFwTGVuOwoJcmlnaHQubV9pbEZpbGVBZGRyTWFwTGVuID0gMDsKCW1fc3RyRmlsZU5hbWUgPSByaWdodC5tX3N0ckZpbGVOYW1lOwoJcmlnaHQubV9zdHJGaWxlTmFtZS5jbGVhcigpOwojaWZkZWYgX1dJTjMyCgltX2hGaWxlID0gcmlnaHQubV9oRmlsZTsKCXJpZ2h0Lm1faEZpbGUgPSBJTlZBTElEX0hBTkRMRV9WQUxVRTsKCW1faE1hcHBpbmcgPSByaWdodC5tX2hNYXBwaW5nOwoJcmlnaHQubV9oTWFwcGluZyA9IElOVkFMSURfSEFORExFX1ZBTFVFOwojZWxzZQoJbV9mZCA9IHJpZ2h0Lm1fZmQ7CglyaWdodC5tX2ZkID0gMDsKI2VuZGlmIC8vIF9XSU4zMgp9CgpDRmlsZU1lbW9yeU1hcDo6fkNGaWxlTWVtb3J5TWFwKCkgewoJQ2xvc2UoKTsKfQoKY2hhciogQ0ZpbGVNZW1vcnlNYXA6Ok9wZW4oY29uc3Qgc3RkOjpzdHJpbmcmIHN0ckZpbGVOYW1lLCBDRmlsZU1lbW9yeU1hcE1vZGUgbW9kZSkKewoJaWYgKHN0ckZpbGVOYW1lLmVtcHR5KCkpIHsKCQlyZXR1cm4gTlVMTDsKCX0KCWlmIChtX2JPcGVuKSB7CgkJcmV0dXJuIE5VTEw7Cgl9CiNpZmRlZiBfV0lOMzIKCURXT1JEIGR3U2hhcmVNb2RlID0gMDsKCURXT1JEIGZsUHJvdGVjdCA9IDA7CglEV09SRCBkd0Rlc2lyZWRBY2Nlc3MgPSAwOwoJc3dpdGNoIChtb2RlKQoJewoJY2FzZSBDRmlsZU1lbW9yeU1hcDo6Q0ZpbGVNZW1vcnlNYXBNb2RlOjpDRmlsZU1lbW9yeU1hcE1vZGVfUmVhZDoKCXsKCQlkd1NoYXJlTW9kZSA9IEZJTEVfU0hBUkVfUkVBRDsKCQlmbFByb3RlY3QgPSBQQUdFX1JFQURPTkxZOwoJCWR3RGVzaXJlZEFjY2VzcyA9IEZJTEVfTUFQX1JFQUQ7Cgl9YnJlYWs7CgljYXNlIENGaWxlTWVtb3J5TWFwOjpDRmlsZU1lbW9yeU1hcE1vZGU6OkNGaWxlTWVtb3J5TWFwTW9kZV9SZWFkQW5kV3JpdGU6Cgl7CgoJCWR3U2hhcmVNb2RlID0gRklMRV9TSEFSRV9SRUFEIHwgRklMRV9TSEFSRV9XUklURTsKCQlmbFByb3RlY3QgPSBQQUdFX1JFQURXUklURTsKCQlkd0Rlc2lyZWRBY2Nlc3MgPSBGSUxFX01BUF9SRUFEIHwgRklMRV9NQVBfV1JJVEU7Cgl9YnJlYWs7CglkZWZhdWx0OgoJCWJyZWFrOwoJfQojaWZkZWYgVU5JQ09ERQoJc3RkOjp3c3RyaW5nX2NvbnZlcnQ8c3RkOjpjb2RlY3Z0X3V0Zjg8d2NoYXJfdD4sIHdjaGFyX3Q+IGNvbnZlcnRlcjsKCXN0ZDo6d3N0cmluZyB3c3RyRmlsZU5hbWUgPSBjb252ZXJ0ZXIuZnJvbV9ieXRlcyhzdHJGaWxlTmFtZSk7CglzdHJ1Y3QgX3N0YXQ2NCBzdFN0YXQ7CglpZiAoMCAhPSBfdHN0YXQ2NCh3c3RyRmlsZU5hbWUuY19zdHIoKSwgJnN0U3RhdCkpCgl7CgkJcmV0dXJuIE5VTEw7Cgl9CglMQVJHRV9JTlRFR0VSIHN0TEkgPSB7IDAgfTsKCXN0TEkuUXVhZFBhcnQgPSBzdFN0YXQuc3Rfc2l6ZTsKCW1faEZpbGUgPSBDcmVhdGVGaWxlKHdzdHJGaWxlTmFtZS5jX3N0cigpLCBHRU5FUklDX1JFQUQsIGR3U2hhcmVNb2RlLCBOVUxMLCBPUEVOX0VYSVNUSU5HLCBGSUxFX0FUVFJJQlVURV9OT1JNQUwsIE5VTEwpOwoJaWYgKG1faEZpbGUgPT0gSU5WQUxJRF9IQU5ETEVfVkFMVUUpCgl7CgkJcmV0dXJuIE5VTEw7Cgl9CiNlbHNlCglzdHJ1Y3QgX3N0YXQ2NCBzdFN0YXQ7CglpZiAoMCAhPSBfdHN0YXQ2NChzdHJGaWxlTmFtZS5jX3N0cigpLCAmc3RTdGF0KSkKCXsKCQlyZXR1cm4gTlVMTDsKCX0KCUxBUkdFX0lOVEVHRVIgc3RMSSA9IHsgMCB9OwoJc3RMSS5RdWFkUGFydCA9IHN0U3RhdC5zdF9zaXplOwoJbV9oRmlsZSA9IENyZWF0ZUZpbGUoc3RyRmlsZU5hbWUuY19zdHIoKSwgR0VORVJJQ19SRUFELCBkd1NoYXJlTW9kZSwgTlVMTCwgT1BFTl9FWElTVElORywgRklMRV9BVFRSSUJVVEVfTk9STUFMLCBOVUxMKTsKCWlmIChtX2hGaWxlID09IElOVkFMSURfSEFORExFX1ZBTFVFKQoJewoJCXJldHVybiBOVUxMOwoJfQojZW5kaWYgLy8gVU5JQ09ERQoKCW1faE1hcHBpbmcgPSBDcmVhdGVGaWxlTWFwcGluZyhtX2hGaWxlLCBOVUxMLCBmbFByb3RlY3QsIHN0TEkuSGlnaFBhcnQsIHN0TEkuTG93UGFydCwgTlVMTCk7CglpZiAobV9oTWFwcGluZyA9PSBOVUxMKQoJewoJCUNsb3NlSGFuZGxlKG1faEZpbGUpOwoJCW1faEZpbGUgPSBJTlZBTElEX0hBTkRMRV9WQUxVRTsKCQlyZXR1cm4gTlVMTDsKCX0KCW1fcEZpbGVBZGRyID0gKGNoYXIqKU1hcFZpZXdPZkZpbGUobV9oTWFwcGluZywgZHdEZXNpcmVkQWNjZXNzLCAwLCAwLCBzdExJLlF1YWRQYXJ0KTsKCWlmIChudWxscHRyID09IG1fcEZpbGVBZGRyKQoJewoJCUNsb3NlSGFuZGxlKG1faE1hcHBpbmcpOwoJCW1faE1hcHBpbmcgPSBJTlZBTElEX0hBTkRMRV9WQUxVRTsKCQlDbG9zZUhhbmRsZShtX2hGaWxlKTsKCQltX2hGaWxlID0gSU5WQUxJRF9IQU5ETEVfVkFMVUU7CgkJcmV0dXJuIE5VTEw7Cgl9CgltX2lsRmlsZUFkZHJNYXBMZW4gPSBzdFN0YXQuc3Rfc2l6ZTsKCW1fYk9wZW4gPSB0cnVlOwojZWxzZQoJdWludDY0X3QgaWxGaWxlU2l6ZSA9IDA7CglzdHJ1Y3Qgc3RhdCBzdGF0YnVmOwoJaWYgKHN0YXQoc3RyRmlsZU5hbWUuY19zdHIoKSwgJnN0YXRidWYpID09IDApCgl7CgkJaWxGaWxlU2l6ZSA9IHN0YXRidWYuc3Rfc2l6ZTsKCX0KCWVsc2UKCXsKCQlyZXR1cm4gTlVMTDsKCX0KCXN0ZDo6c3RyaW5nIHN0clJlYWRNb2RlOwoJc3dpdGNoIChtb2RlKQoJewoJY2FzZSBDRmlsZU1lbW9yeU1hcDo6Q0ZpbGVNZW1vcnlNYXBNb2RlOjpDRmlsZU1lbW9yeU1hcE1vZGVfUmVhZDoKCXsKCQlzdHJSZWFkTW9kZSA9ICJyYiI7Cgl9YnJlYWs7CgljYXNlIENGaWxlTWVtb3J5TWFwOjpDRmlsZU1lbW9yeU1hcE1vZGU6OkNGaWxlTWVtb3J5TWFwTW9kZV9SZWFkQW5kV3JpdGU6Cgl7CgkJc3RyUmVhZE1vZGUgPSAid2IrIjsKCX1icmVhazsKCWRlZmF1bHQ6Cgl7CgkJcmV0dXJuIE5VTEw7Cgl9YnJlYWs7Cgl9CiNpZmRlZiBVTklDT0RFCgl1c2luZyBjb252ZXJ0VHlwZSA9IHN0ZDo6Y29kZWN2dF91dGY4PHdjaGFyX3Q+CgkJc3RkOjp3c3RyaW5nX2NvbnZlcnQ8Y29udmVydFR5cGUsIHdjaGFyX3Q+IGNvbnZlcnRlcjsKCXN0ZDo6c3RyaW5nIHN0clV0ZjhGaWxlTmFtZSA9IGNvbnZlcnRlci50b19ieXRlcyhzdHJGaWxlTmFtZSk7CgltX2ZkID0gZm9wZW4oc3RyVXRmOEZpbGVOYW1lLmNfc3RyKCksIHN0clJlYWRNb2RlLmNfc3RyKCkpOwojZWxzZQoJbV9mZCA9IGZvcGVuKHN0ckZpbGVOYW1lLmNfc3RyKCksIHN0clJlYWRNb2RlLmNfc3RyKCkpOwojZW5kaWYgLy9VTklDT0RFCglpZiAobV9mZCA8PSAwKQoJewoJCXJldHVybiBOVUxMOwoJfQoJbV9wRmlsZUFkZHIgPSAoY2hhciopbW1hcCgwLCBpbEZpbGVTaXplLCBQUk9UX1JFQUQsIE1BUF9TSEFSRUQsIG1fZmQsIDApOwoJaWYgKG1fcEZpbGVBZGRyID09IE5VTEwpCgl7CgkJbV9iT3BlbiA9IHRydWU7CgkJZmNsb3NlKG1fZmQpOwoJCXJldHVybiBOVUxMOwoJfQoJbV9pbEZpbGVBZGRyTWFwTGVuID0gaWxGaWxlU2l6ZTsKI2VuZGlmIC8vIF9XSU4zMgoKCW1fc3RyRmlsZU5hbWUgPSBzdHJGaWxlTmFtZTsKCW1fZW5Nb2RlID0gbW9kZTsKCglyZXR1cm4gbV9wRmlsZUFkZHI7Cn0Kdm9pZCBDRmlsZU1lbW9yeU1hcDo6Q2xvc2UoKQp7CglpZiAobV9iT3BlbikgewojaWZkZWYgX1dJTjMyCgkJaWYgKG1fcEZpbGVBZGRyKQoJCXsKCQkJVW5tYXBWaWV3T2ZGaWxlKG1fcEZpbGVBZGRyKTsKCQl9CgkJaWYgKG1faE1hcHBpbmcgIT0gSU5WQUxJRF9IQU5ETEVfVkFMVUUpCgkJewoJCQlDbG9zZUhhbmRsZShtX2hNYXBwaW5nKTsKCQkJbV9oTWFwcGluZyA9IElOVkFMSURfSEFORExFX1ZBTFVFOwoJCX0KCQlpZiAobV9oRmlsZSAhPSBJTlZBTElEX0hBTkRMRV9WQUxVRSkKCQl7CgkJCUNsb3NlSGFuZGxlKG1faEZpbGUpOwoJCQltX2hGaWxlID0gSU5WQUxJRF9IQU5ETEVfVkFMVUU7CgkJfQojZWxzZSAKCQlpZiAobV9wRmlsZUFkZHIpCgkJewoJCQltdW5tYXAobV9wRmlsZUFkZHIsIG1faWxGaWxlQWRkck1hcExlbik7CgkJfQoJCWlmIChtX2ZkKQoJCXsKCQkJZmNsb3NlKG1fZmQpOwoJCQltX2ZkID0gMDsKCQl9CiNlbmRpZiAvLyBfV0lOMzJfCgkJbV9wRmlsZUFkZHIgPSBOVUxMOwoJCW1faWxGaWxlQWRkck1hcExlbiA9IDA7CgkJbV9zdHJGaWxlTmFtZS5jbGVhcigpOwoJCW1fYk9wZW4gPSBmYWxzZTsKCX0KfQpib29sIENGaWxlTWVtb3J5TWFwOjpJc09wZW4oKSBjb25zdAp7CglyZXR1cm4gbV9iT3BlbjsKfQpjaGFyKiBDRmlsZU1lbW9yeU1hcDo6R2V0RGF0YSgpIGNvbnN0CnsKCXJldHVybiBtX3BGaWxlQWRkcjsKfQp1aW50NjRfdCBDRmlsZU1lbW9yeU1hcDo6R2V0U2l6ZSgpIGNvbnN0CnsKCXJldHVybiBtX2lsRmlsZUFkZHJNYXBMZW47Cn0KY29uc3Qgc3RkOjpzdHJpbmcmIENGaWxlTWVtb3J5TWFwOjpHZXRGaWxlTmFtZSgpIGNvbnN0CnsKCXJldHVybiBtX3N0ckZpbGVOYW1lOwp9CnZvaWQgQ0ZpbGVNZW1vcnlNYXA6OkluaXQoY29uc3Qgc3RkOjpzdHJpbmcmIHN0ckZpbGVOYW1lLCBDRmlsZU1lbW9yeU1hcE1vZGUgbW9kZSkKewoJbV9pbEZpbGVBZGRyTWFwTGVuID0gMDsKCW1fYk9wZW4gPSBmYWxzZTsKCW1fcEZpbGVBZGRyID0gTlVMTDsKI2lmZGVmIF9XSU4zMgoJbV9oRmlsZSA9IElOVkFMSURfSEFORExFX1ZBTFVFOwoJbV9oTWFwcGluZyA9IElOVkFMSURfSEFORExFX1ZBTFVFOwojZWxzZQoJbV9mZCA9IC0xOy8v5paH5Lu255qEZmQKI2VuZGlmIC8vIF9XSU4zMgoJT3BlbihzdHJGaWxlTmFtZSwgbW9kZSk7Cn0=
==M

==M2
I2luY2x1ZGUgPGlvc3RyZWFtPgojaW5jbHVkZSA8c3RyaW5nPgojaW5jbHVkZSA8ZnN0cmVhbT4KI2luY2x1ZGUgPHZlY3Rvcj4KZXh0ZXJuICJDIiB7CiNpbmNsdWRlIDxsaWJhdmZvcm1hdC9hdmZvcm1hdC5oPgojaW5jbHVkZSA8bGliYXZ1dGlsL2F2dXRpbC5oPgojaW5jbHVkZSA8bGliYXZjb2RlYy9hdmNvZGVjLmg+Cn0KI2luY2x1ZGUgPHN0Yi9zdGJfaW1hZ2Vfd3JpdGUuaD4KI2luY2x1ZGUgIkNGaWxlTWVtb3J5TWFwLmgiCiNpbmNsdWRlIDxzZXQ+Ci8v6I635Y+WIEgyNjTnvJbnoIFOQUznmoTljZXlhYPnsbvlnovvvIhVSU5UVFlQRe+8ieWNleWFg+exu+Wei+iMg+WbtOS4ujF+MjMg5qCH5YeG5Li6IDF+MTIKI2RlZmluZSBOQUxfVUlOVFRZUEUobmFsKSAoKG5hbCkmKDB4MUYpKQovL+iOt+WPliBIMjY057yW56CBTkFM55qE5LyY5YWI57qn77yIUkVGRVJFTkNFX0JJVO+8iQojZGVmaW5lIE5BTF9SRUZFUkVOQ0UobmFsKSAoKG5hbCkmKDB4NjApKQovL+iOt+WPliBIMjY057yW56CBTkFM55qE56aB5q2i5L2N77yIZm9yYmlkZGVyX2JpdO+8iQojZGVmaW5lIE5BTF9GT1JCSURERVIobmFsKSAoKG5hbCkmKDB4ODApKQp1c2luZyBOQUwgPSB1aW50OF90OwoKdWludDMyX3QgU3dhcEludDMyRGF0YSh1aW50MzJfdCBuVmFsdWVEYXRhKQp7CglyZXR1cm4gKChuVmFsdWVEYXRhICYgMHgwMDAwMDBGRikgPDwgMjQpIHwKCQkoKG5WYWx1ZURhdGEgJiAweDAwMDBGRjAwKSA8PCA4KSB8CgkJKChuVmFsdWVEYXRhICYgMHgwMEZGMDAwMCkgPj4gOCkgfAoJCSgoblZhbHVlRGF0YSAmIDB4RkYwMDAwMDApID4+IDI0KTsKfQoKdm9pZCBDb3B5RmlsZVN0cmVhbShzdGQ6Omlmc3RyZWFtJiBpbiwgc3RkOjpvZnN0cmVhbSYgb3V0LCBpbnQ2NF90IGxlbikgewoKCWNoYXIgYnVmWzEwMjRdOwoJaW50NjRfdCBjb3B5U2l6ZSA9IGxlbjsKCXdoaWxlIChjb3B5U2l6ZSA+IDApCgl7CgkJaW50NjRfdCByZWFkU2l6ZTsKCQlpZiAoY29weVNpemUgPCBzaXplb2YoYnVmKSkgewoJCQlyZWFkU2l6ZSA9IGNvcHlTaXplOwoJCX0KCQllbHNlIHsKCQkJcmVhZFNpemUgPSBzaXplb2YoYnVmKTsKCQl9CgkJaW4ucmVhZChidWYsIHJlYWRTaXplKTsKCQlvdXQud3JpdGUoYnVmLCByZWFkU2l6ZSk7CgkJY29weVNpemUgLT0gcmVhZFNpemU7Cgl9Cn0KCmJvb2wgSXNWaWRlb0ZyYW1lKHVpbnQ4X3QqIHBEYXRhLCBpbnQ2NF90IGlsRGF0YUxlbikgCnsKCU5BTCBuYWwgPSBwRGF0YVs0XTsKCXVpbnQ4X3QgbmFsVXR5cGUgPSBOQUxfVUlOVFRZUEUobmFsKTsKCWlmIChuYWxVdHlwZSA8PSAwIHx8IG5hbFV0eXBlID4gMTIpIHsKCQlyZXR1cm4gZmFsc2U7Cgl9Cgl1aW50MzJfdCBpRnJhbWVTaXplID0gU3dhcEludDMyRGF0YSgqKCh1aW50MzJfdCopKHBEYXRhKSkpOwoJaWYgKGlGcmFtZVNpemUgPCAyIHx8IGlGcmFtZVNpemUgPiAweDAwRkZGRkZGKSB7CgkJcmV0dXJuIGZhbHNlOwoJfQoJcmV0dXJuIHRydWU7Cn0KdHlwZWRlZiBzdHJ1Y3QgX2RtcF92aWRlb19mcmFtZQp7CglpbnQ2NF90IG9mZnNldDsKCXVpbnQzMl90IGxlbmd0aDsKfURWRlJBTUU7CmludCBtYWluKCkgewoJc3RkOjpzdHJpbmcgaW5wdXRGaWxlTmFtZSA9ICJEOlxcdDEubXA0X21kYXQiOwoJc3RkOjpzdHJpbmcgb3V0cHV0RmlsZU5hbWUgPSBpbnB1dEZpbGVOYW1lICsiX2RtcC5kYXRhIjsKCS8v5Yib5bu6SU/lr7nosaEKCXN0ZDo6b2ZzdHJlYW0gb3V0cHV0RmlsZVN0cmVhbShvdXRwdXRGaWxlTmFtZS5jX3N0cigpLHN0ZDo6aW9zOjpiaW5hcnl8c3RkOjppb3M6Om91dCk7CglpZiAob3V0cHV0RmlsZVN0cmVhbS5pc19vcGVuKCkgPT0gZmFsc2UpIHsKCQlyZXR1cm4gLTE7Cgl9CglDRmlsZU1lbW9yeU1hcCBjbEZpbGVNYXAoaW5wdXRGaWxlTmFtZSwgQ0ZpbGVNZW1vcnlNYXA6OkNGaWxlTWVtb3J5TWFwTW9kZTo6Q0ZpbGVNZW1vcnlNYXBNb2RlX1JlYWQpOwoJaWYgKCFjbEZpbGVNYXAuSXNPcGVuKCkpIHsKCQlyZXR1cm4gIC0xOwoJfQoJaW50NjRfdCBpbEZpbGVTaXplID0gY2xGaWxlTWFwLkdldFNpemUoKTsKCXVpbnQ4X3QqIHBEYXRhID0gKHVpbnQ4X3QqKWNsRmlsZU1hcC5HZXREYXRhKCk7CglzdGQ6OnZlY3RvcjxEVkZSQU1FPiB2ZWNWaWRlb0ZyYW1lczsKCWZvciAoaW50NjRfdCBpID0gMDsgaSA8IGlsRmlsZVNpemU7IGkrKykKCXsKCQl2ZWNWaWRlb0ZyYW1lcy5jbGVhcigpOwoJCWlmIChJc1ZpZGVvRnJhbWUoJnBEYXRhW2ldLCBpbEZpbGVTaXplIC0gaSkgPT0gZmFsc2UpIHsKCQkJY29udGludWU7CgkJfQoJCU5BTCBuYWwgPSBwRGF0YVtpICsgNF07CgkJdWludDhfdCBuYWxVdHlwZSA9IE5BTF9VSU5UVFlQRShuYWwpOwoJCWlmIChuYWxVdHlwZSAhPSAxICYmIG5hbFV0eXBlICE9IDYgJiYgbmFsVXR5cGUgIT0gOSkgewoJCQljb250aW51ZTsKCQl9CgkJdWludDMyX3QgaUZyYW1lU2l6ZSA9IFN3YXBJbnQzMkRhdGEoKigodWludDMyX3QqKSgmcERhdGFbaV0pKSk7CgkJaWYgKChpbnQ2NF90KWlGcmFtZVNpemUgPj0gaWxGaWxlU2l6ZSAtIGkgLSA0KSB7CgkJCWNvbnRpbnVlOwoJCX0KCQl2ZWNWaWRlb0ZyYW1lcy5wdXNoX2JhY2soeyBpICsgNCxpRnJhbWVTaXplIH0pOwoJCWludDY0X3QgaWxUbXBOZXh0T2Zmc2V0ID0gaSArIDQgKyBpRnJhbWVTaXplOwoJCXdoaWxlIChpbFRtcE5leHRPZmZzZXQgPCBpbEZpbGVTaXplKQoJCXsKCQkJaWYgKElzVmlkZW9GcmFtZSgmcERhdGFbaWxUbXBOZXh0T2Zmc2V0XSwgaWxGaWxlU2l6ZSAtIGlsVG1wTmV4dE9mZnNldCkgPT0gZmFsc2UpIAoJCQl7CgkJCQlicmVhazsKCQkJfQoJCQlOQUwgbmFsID0gcERhdGFbaWxUbXBOZXh0T2Zmc2V0ICsgNF07CgkJCXVpbnQ4X3QgbmFsVXR5cGUgPSBOQUxfVUlOVFRZUEUobmFsKTsKCQkJaWYgKChuYWxVdHlwZSA9PSA3IHx8IG5hbFV0eXBlID09IDgpICYmIHZlY1ZpZGVvRnJhbWVzLnNpemUoKSA+IDEpIHsKCQkJCWJyZWFrOwoJCQl9CgkJCWlGcmFtZVNpemUgPSBTd2FwSW50MzJEYXRhKCooKHVpbnQzMl90KikoJnBEYXRhW2lsVG1wTmV4dE9mZnNldF0pKSk7CgkJCWlmICgoaW50NjRfdClpRnJhbWVTaXplID4gaWxGaWxlU2l6ZSAtIGlsVG1wTmV4dE9mZnNldCAtIDQpIHsKCQkJCWJyZWFrOwoJCQl9CgkJCXZlY1ZpZGVvRnJhbWVzLnB1c2hfYmFjayh7IGlsVG1wTmV4dE9mZnNldCArIDQsaUZyYW1lU2l6ZSB9KTsKCQkJaWxUbXBOZXh0T2Zmc2V0ICs9ICgoaW50NjRfdClpRnJhbWVTaXplICsgNCk7CgkJfQoJCWlmICh2ZWNWaWRlb0ZyYW1lcy5zaXplKCkgPCAyKSB7CgkJCWNvbnRpbnVlOwoJCX0KCQlpID0gaWxUbXBOZXh0T2Zmc2V0OwoJCXByaW50ZigiRnJhbWVDb3VudCAlZFxuIiwgdmVjVmlkZW9GcmFtZXMuc2l6ZSgpKTsKCQlmb3IgKGF1dG8gaXRvciA9IHZlY1ZpZGVvRnJhbWVzLmJlZ2luKCk7IGl0b3IgIT0gdmVjVmlkZW9GcmFtZXMuZW5kKCk7IGl0b3IrKykKCQl7CgkJCWNoYXIgYnVmWzRdID0geyAwLDAsMCwxIH07CgkJCW91dHB1dEZpbGVTdHJlYW0ud3JpdGUoYnVmLCA0KTsKCQkJY29uc3QgRFZGUkFNRSYgdmlkZW9GcmFtZSA9ICppdG9yOwoJCQlvdXRwdXRGaWxlU3RyZWFtLndyaXRlKChjb25zdCBjaGFyKikoJnBEYXRhW3ZpZGVvRnJhbWUub2Zmc2V0XSksdmlkZW9GcmFtZS5sZW5ndGgpOwoJCX0KCX0KCW91dHB1dEZpbGVTdHJlYW0uY2xvc2UoKTsKCXJldHVybiAwOwp9Cgo=
Mp4Repair::CMp4CorruptExtract
==C
I2luY2x1ZGUgIkNNcDRDb3JydXB0RXh0cmFjdC5oIgoKTXA0UmVwYWlyOjpDTXA0Q29ycnVwdEV4dHJhY3Q6OkNNcDRDb3JydXB0RXh0cmFjdCgpCnsKfQoKTXA0UmVwYWlyOjpDTXA0Q29ycnVwdEV4dHJhY3Q6On5DTXA0Q29ycnVwdEV4dHJhY3QoKQp7Cn0KCnZvaWQgTXA0UmVwYWlyOjpDTXA0Q29ycnVwdEV4dHJhY3Q6OkV4dHJhY3QoQ01wNEV4dHJhY3RGcmFtZXMmIGZyYW1lcywgdWludDhfdCogcERhdGEsIGludDY0X3QgaWxEYXRhTGVuKQp7CglpZiAoZnJhbWVzLmVtcHR5KCkpIHsKCQlyZXR1cm47Cgl9CglzdGQ6OnZlY3RvcjxNcDRSZXBhaXI6OkR1bXBGcmFtZT4gYXJyRG1wRnJhbWVzOwoJZm9yIChpbnQ2NF90IGkgPSAwOyBpIDwgaWxEYXRhTGVuOyBpKyspCgl7CgkJYXJyRG1wRnJhbWVzLmNsZWFyKCk7CgkJZm9yIChhdXRvIHJlZkV4dEZyYW1lcyA9IGZyYW1lcy5iZWdpbigpOyByZWZFeHRGcmFtZXMgIT0gZnJhbWVzLmVuZCgpOyByZWZFeHRGcmFtZXMrKykKCQl7CgkJCXVpbnQzMl90IGlUYWcgPSByZWZFeHRGcmFtZXMtPmZpcnN0OwoJCQlib29sIGJEdW1wU3VjID0gZmFsc2U7CgkJCWludDY0X3QgaWxEdW1wTGVuID0gMDsKCQkJc3dpdGNoIChpVGFnKQoJCQl7CgkJCWNhc2UgTUtUQUcoJ2gnLCcyJywgJzYnLCc0Jyk6CgkJCWNhc2UgTUtUQUcoJ2EnLCd2JywgJ2MnLCdDJyk6CgkJCWNhc2UgTUtUQUcoJ2EnLCd2JywgJ2MnLCcxJyk6CgkJCXsKCQkJCWlsRHVtcExlbiA9IER1bXBIMjY0VmlkZW9GcmFtZSgmcERhdGFbaV0sIGlsRGF0YUxlbiAtIGksIGFyckRtcEZyYW1lcyk7CgkJCQlpZiAoYXJyRG1wRnJhbWVzLnNpemUoKSA+PSAyKSB7CgkJCQkJcHJpbnRmKCJbJWxkXSBWaWRlbyBGcmFtZSAlbGQgXG4iLCBpLCBhcnJEbXBGcmFtZXMuc2l6ZSgpKTsKCQkJCQlmb3IgKGF1dG8gcmVmRG1wRnJhbWUgPSBhcnJEbXBGcmFtZXMuYmVnaW4oKTsgcmVmRG1wRnJhbWUgIT0gYXJyRG1wRnJhbWVzLmVuZCgpOyByZWZEbXBGcmFtZSsrKQoJCQkJCXsKCQkJCQkJcmVmRXh0RnJhbWVzLT5zZWNvbmQucHVzaF9iYWNrKCpyZWZEbXBGcmFtZSk7CgkJCQkJfQoJCQkJfQoJCQl9YnJlYWs7CgkJCWNhc2UgTUtUQUcoJ2EnLCAnYycsICctJywgJzMnKTogCgkJCXsKCQkJCWlsRHVtcExlbiA9IER1bXBBQzNBdWRpb0ZyYW1lKCZwRGF0YVtpXSwgaWxEYXRhTGVuIC0gaSwgYXJyRG1wRnJhbWVzKTsKCQkJCWlmIChhcnJEbXBGcmFtZXMuc2l6ZSgpID49IDIpIHsKCQkJCQlwcmludGYoIlslbGRdIEF1ZGlvIEZyYW1lICVsZCBcbiIsIGksIGFyckRtcEZyYW1lcy5zaXplKCkpOwoJCQkJfQoJCQl9CgkJCWRlZmF1bHQ6CgkJCQlicmVhazsKCQkJfQoJCQlpZiAoYXJyRG1wRnJhbWVzLnNpemUoKSA+PSAyIHx8IGJEdW1wU3VjID09IHRydWUpIAoJCQl7CgkJCQlpICs9IChpbER1bXBMZW4gLSAxKTsKCQkJCWJyZWFrOwoJCQl9CgkJfQoJfQp9CgppbnQ2NF90IE1wNFJlcGFpcjo6Q01wNENvcnJ1cHRFeHRyYWN0OjpEdW1wSDI2NFZpZGVvRnJhbWUodWludDhfdCogcERhdGEsIGludDY0X3QgaWxEYXRhTGVuLCBzdGQ6OnZlY3RvcjxEdW1wRnJhbWU+JiBmcmFtZXMpCnsKCXVpbnQ4X3QqIHBUbXBEYXRhID0gcERhdGE7Cgl1aW50NjRfdCBpbFRtcERhdGFMZW4gPSBpbERhdGFMZW47CglETVBGUkFNRSBzdERtcEZyYW1lOwoJcFRtcERhdGEgPSBtX3N0TXA0SDI2NFBhcnNlci5HZXRGcmFtZUFuZE5leHQoc3REbXBGcmFtZSwgcFRtcERhdGEsIGlsVG1wRGF0YUxlbik7CglpZiAoc3REbXBGcmFtZS5wRnJhbWVEYXRhICE9IE5VTEwgJiYgc3REbXBGcmFtZS5pRnJhbWVTaXplID4gMCkgCgl7CgkJTkFMIG5hbCA9IHN0RG1wRnJhbWUucEZyYW1lRGF0YVswXTsKCQl1aW50OF90IG5hbFVUeXBlID0gTkFMX1VJTlRUWVBFKG5hbCk7CgkJaWYgKG5hbFVUeXBlICE9IDEgJiYgbmFsVVR5cGUgIT0gNSAmJiBuYWxVVHlwZSAhPSA2ICYmIG5hbFVUeXBlICE9IDkpIAoJCXsKCQkJcmV0dXJuIDA7CgkJfQoJfQoJaW50NjRfdCBpbER1bXBMZW4gPSAwOwoJd2hpbGUgKHBUbXBEYXRhICE9IE5VTEwgJiYgc3REbXBGcmFtZS5wRnJhbWVEYXRhICE9IE5VTEwgJiYgc3REbXBGcmFtZS5pRnJhbWVTaXplID4gMCkKCXsKCQlpbER1bXBMZW4gKz0gKHN0RG1wRnJhbWUuaUZyYW1lU2l6ZSArIDQpOwoJCWZyYW1lcy5wdXNoX2JhY2soc3REbXBGcmFtZSk7CgkJcFRtcERhdGEgPSBtX3N0TXA0SDI2NFBhcnNlci5HZXRGcmFtZUFuZE5leHQoc3REbXBGcmFtZSwgcFRtcERhdGEsIGlsVG1wRGF0YUxlbik7Cgl9CiAgICByZXR1cm4gaWxEdW1wTGVuOwp9CgppbnQ2NF90IE1wNFJlcGFpcjo6Q01wNENvcnJ1cHRFeHRyYWN0OjpEdW1wQUMzQXVkaW9GcmFtZSh1aW50OF90KiBwRGF0YSwgaW50NjRfdCBpbERhdGFMZW4sIHN0ZDo6dmVjdG9yPERNUEZSQU1FPiYgZnJhbWVzKQp7Cgl1aW50OF90KiBwVG1wRGF0YSA9IHBEYXRhOwoJdWludDY0X3QgaWxUbXBEYXRhTGVuID0gaWxEYXRhTGVuOwoJRE1QRlJBTUUgc3REbXBGcmFtZTsKCXBUbXBEYXRhID0gbV9zdE1wNEFDM1BhcnNlci5HZXRGcmFtZUFuZE5leHQoc3REbXBGcmFtZSwgcFRtcERhdGEsIGlsVG1wRGF0YUxlbik7CglpbnQ2NF90IGlsRHVtcExlbiA9IDA7Cgl3aGlsZSAocFRtcERhdGEgIT0gTlVMTCAmJiBzdERtcEZyYW1lLnBGcmFtZURhdGEgIT0gTlVMTCAmJiBzdERtcEZyYW1lLmlGcmFtZVNpemUgPiAwKQoJewoJCWZyYW1lcy5wdXNoX2JhY2soc3REbXBGcmFtZSk7CgkJaWxEdW1wTGVuICs9IHN0RG1wRnJhbWUuaUZyYW1lU2l6ZTsKCQlwVG1wRGF0YSA9IG1fc3RNcDRBQzNQYXJzZXIuR2V0RnJhbWVBbmROZXh0KHN0RG1wRnJhbWUsIHBUbXBEYXRhLCBpbFRtcERhdGFMZW4pOwoJfQoJcmV0dXJuIGlsRHVtcExlbjsKfQoKYm9vbCBNcDRSZXBhaXI6OkNNcDRIMjY0UGFyc2VyOjpJc0ZyYW1lKHVpbnQ4X3QqIHBEYXRhLCBpbnQ2NF90IGlsRGF0YUxlbikKewoJaWYgKGlsRGF0YUxlbiA8IDUpIHsKCQlyZXR1cm4gZmFsc2U7Cgl9CglOQUwgbmFsID0gcERhdGFbNF07Cgl1aW50OF90IG5hbFR5cGUgPSBOQUxfVUlOVFRZUEUobmFsKTsKCWlmIChuYWxUeXBlID4gMTMgfHwgbmFsVHlwZSA8PSAwIHx8IG5hbFR5cGUgPT0gNyB8fCBuYWxUeXBlID09IDgpCgl7CgkJcmV0dXJuIDA7Cgl9Cgl1aW50MzJfdCBpRnJhbWVTaXplID0gU3dhcEludDMyRGF0YSgqKCh1aW50MzJfdCopcERhdGEpKTsKCWlmIChpRnJhbWVTaXplIDw9IDAgfHwgaUZyYW1lU2l6ZSA+IDB4MDBGRkZGRkYpIHsKCQlyZXR1cm4gMDsKCX0KCXJldHVybiB0cnVlOwp9Cgp1aW50OF90KiBNcDRSZXBhaXI6OkNNcDRIMjY0UGFyc2VyOjpHZXRGcmFtZUFuZE5leHQoRE1QRlJBTUUmIHN0RnJhbWUsIHVpbnQ4X3QqIHBEYXRhLCBpbnQ2NF90IGlsRGF0YUxlbikKewoJc3RGcmFtZS5wRnJhbWVEYXRhID0gTlVMTDsKCXN0RnJhbWUuaUZyYW1lU2l6ZSA9IDA7CglpZiAoSXNGcmFtZShwRGF0YSwgaWxEYXRhTGVuKSA9PSBmYWxzZSkgewoJCXJldHVybiBwRGF0YTsKCX0KCXVpbnQzMl90IGlGcmFtZVNpemUgPSBTd2FwSW50MzJEYXRhKCooKHVpbnQzMl90KilwRGF0YSkpOwoJaWYgKGlGcmFtZVNpemUgIDwgMiB8fCBpRnJhbWVTaXplID4gMHgwMEZGRkZGRiB8fChpbnQ2NF90KWlGcmFtZVNpemUgPiAoaWxEYXRhTGVuIC0gNCkpIHsKCQlyZXR1cm4gcERhdGE7Cgl9CgllbHNlIHsKCQlzdEZyYW1lLnBGcmFtZURhdGEgPSBwRGF0YSArIDQ7CgkJc3RGcmFtZS5pRnJhbWVTaXplID0gaUZyYW1lU2l6ZTsKCQlyZXR1cm4gKHBEYXRhICsgNCArIGlGcmFtZVNpemUpOwoJfQoJcmV0dXJuIHBEYXRhOwp9CgpNcDRSZXBhaXI6OkNNcDRBQzNQYXJzZXI6OkNNcDRBQzNQYXJzZXIoKQp7CgltX2lCdWZmZXJTaXplREIgPSAxNjcyOwp9Cgp2b2lkIE1wNFJlcGFpcjo6Q01wNEFDM1BhcnNlcjo6U2V0QnVmZmVyU2l6ZURCKGludCBpU2l6ZSkKewoJbV9pQnVmZmVyU2l6ZURCID0gaVNpemU7Cn0KCmJvb2wgTXA0UmVwYWlyOjpDTXA0QUMzUGFyc2VyOjpJc0ZyYW1lKHVpbnQ4X3QqIHBEYXRhLCBpbnQ2NF90IGlsRGF0YUxlbikKewoJaWYgKGlsRGF0YUxlbiA8IDEyNikgewoJCXJldHVybiBmYWxzZTsKCX0KCWlmIChwRGF0YVswXSAhPSBBQzNfQVNOQ0hXT1JEIHx8IHBEYXRhWzFdICE9IEFDM19BU05DTFdPUkQpIHsKCQlyZXR1cm4gZmFsc2U7Cgl9CglyZXR1cm4gdHJ1ZTsKfQoKdWludDhfdCogTXA0UmVwYWlyOjpDTXA0QUMzUGFyc2VyOjpHZXRGcmFtZUFuZE5leHQoRE1QRlJBTUUmIHN0RnJhbWUsIHVpbnQ4X3QqIHBEYXRhLCBpbnQ2NF90IGlsRGF0YUxlbikKewoJc3RGcmFtZS5wRnJhbWVEYXRhID0gTlVMTDsKCXN0RnJhbWUuaUZyYW1lU2l6ZSA9IDA7CglpZiAobV9pQnVmZmVyU2l6ZURCIDwgMTI2KSB7CgkJcmV0dXJuIHBEYXRhOwoJfQoJaWYgKElzRnJhbWUocERhdGEsIGlsRGF0YUxlbikgPT0gZmFsc2UpCgl7CgkJcmV0dXJuIHBEYXRhOwoJfQoKCWludDMyX3QgaVRtaUZyYW1lU2l6ZSA9IDA7Cgl1aW50OF90KiBwTmV4dFB0ciA9IHBEYXRhOwoJaWYgKGlsRGF0YUxlbiAtIDEyNiA+IG1faUJ1ZmZlclNpemVEQikKCXsKCQlpZiAoSXNGcmFtZSgmcERhdGFbbV9pQnVmZmVyU2l6ZURCIC0gMl0sIGlsRGF0YUxlbiAtIG1faUJ1ZmZlclNpemVEQiAtIDIpKQoJCXsKCQkJaVRtaUZyYW1lU2l6ZSA9IG1faUJ1ZmZlclNpemVEQiAtIDI7CgkJfQoJCWVsc2UgewoJCQlpVG1pRnJhbWVTaXplID0gbV9pQnVmZmVyU2l6ZURCOwoJCX0KCQlwTmV4dFB0ciA9ICZwRGF0YVtpVG1pRnJhbWVTaXplXTsKCX0KCWVsc2UgewoJCWlmIChpbERhdGFMZW4gPD0gbV9pQnVmZmVyU2l6ZURCKQoJCXsKCQkJcE5leHRQdHIgPSBOVUxMOwoJCQlpVG1pRnJhbWVTaXplID0gaWxEYXRhTGVuOwoJCX0KCQllbHNlIAoJCXsKCQkJaVRtaUZyYW1lU2l6ZSA9IG1faUJ1ZmZlclNpemVEQjsKCQkJcE5leHRQdHIgPSAmcERhdGFbaVRtaUZyYW1lU2l6ZV07CgkJfQoJCWlUbWlGcmFtZVNpemUgPSBzdGQ6Om1pbjxpbnQzMl90PihpbERhdGFMZW4sIG1faUJ1ZmZlclNpemVEQik7Cgl9CglpZiAoaVRtaUZyYW1lU2l6ZSA+IDApCgl7CgkJc3RGcmFtZS5wRnJhbWVEYXRhID0gcERhdGE7CgkJc3RGcmFtZS5pRnJhbWVTaXplID0gaVRtaUZyYW1lU2l6ZTsKCX0KCglyZXR1cm4gcE5leHRQdHI7Cn0K
==H
I3ByYWdtYSBvbmNlCiNpbmNsdWRlIDxjc3RkaW50PgojaW5jbHVkZSA8dmVjdG9yPgojaW5jbHVkZSA8bWFwPgojaW5jbHVkZSA8c3RyaW5nPgojaW5jbHVkZSAiQ29tRnVuLmhwcCIKCi8v6I635Y+WIEgyNjTnvJbnoIFOQUznmoTljZXlhYPnsbvlnovvvIhVSU5UVFlQRe+8ieWNleWFg+exu+Wei+iMg+WbtOS4ujF+MjMg5qCH5YeG5Li6IDF+MTIKI2RlZmluZSBOQUxfVUlOVFRZUEUobmFsKSAoKG5hbCkmKDB4MUYpKQovL+iOt+WPliBIMjY057yW56CBTkFM55qE5LyY5YWI57qn77yIUkVGRVJFTkNFX0JJVO+8iQojZGVmaW5lIE5BTF9SRUZFUkVOQ0UobmFsKSAoKG5hbCkmKDB4NjApKQovL+iOt+WPliBIMjY057yW56CBTkFM55qE56aB5q2i5L2N77yIZm9yYmlkZGVyX2JpdO+8iQojZGVmaW5lIE5BTF9GT1JCSURERVIobmFsKSAoKG5hbCkmKDB4ODApKQpuYW1lc3BhY2UgTXA0UmVwYWlyIHsKCXVzaW5nIE5BTCA9IHVpbnQ4X3Q7CgoJY29uc3QgdWludDhfdCBBQzNfQVNOQ0hXT1JEID0gMHgwQjsKCWNvbnN0IHVpbnQ4X3QgQUMzX0FTTkNMV09SRCA9IDB4Nzc7Cgljb25zdCB1aW50OF90IEFDM19BU05DV09SRFsyXSA9IHsgQUMzX0FTTkNIV09SRCwgQUMzX0FTTkNMV09SRCB9OwoKCXR5cGVkZWYgc3RydWN0IF9EdW1wRnJhbWUKCXsKCQlzdGQ6Om1hcDxzdGQ6OnN0cmluZywgc3RkOjpzdHJpbmc+IG1wUGFyYW1zOwoJCXVpbnQ4X3QqIHBGcmFtZURhdGE7CgkJaW50MzJfdCBpRnJhbWVTaXplOwoJCV9EdW1wRnJhbWUodWludDhfdCogZGF0YSA9IG51bGxwdHIsIGludDY0X3Qgc2l6ZSA9IDApIDoKCQkJcEZyYW1lRGF0YShkYXRhKSwKCQkJaUZyYW1lU2l6ZShzaXplKSB7fTsKCX0gRHVtcEZyYW1lLCBETVBGUkFNRTsKCgljbGFzcyBDTXA0SDI2NFBhcnNlcnsKCXB1YmxpYzoKCQlib29sIElzRnJhbWUodWludDhfdCogcERhdGEsIGludDY0X3QgaWxEYXRhTGVuKTsKCQkvL+iOt+WPluW9k+WJjeW4p++8jOWmguaenOaIkOWKn+enu+WKqOWIsOS4i+S4gOS4quS9jee9ru+8jOWmguaenOWksei0pe+8jOS4jeenu+WKqOi/lOWbnuWOn+S9jee9ru+8jHN0RnJhbWXorr7nva7kuLrnqboKCQkvL+eJueWIq+azqOaEj++8jOWvueS6jk1QNOeahOinhumikeW4p++8jOi/lOWbnueahHN0RnJhbWXkuI3ljIXlkKvliY006KGo56S66ZW/5bqm55qE5a2X6IqCCgkJdWludDhfdCogR2V0RnJhbWVBbmROZXh0KERNUEZSQU1FJiBzdEZyYW1lLHVpbnQ4X3QqIHBEYXRhLCBpbnQ2NF90IGlsRGF0YUxlbik7Cgl9OwoKCWNsYXNzIENNcDRBQzNQYXJzZXIgewoJcHJpdmF0ZToKCQlpbnQgbV9pQnVmZmVyU2l6ZURCOwoJcHVibGljOgoJCUNNcDRBQzNQYXJzZXIoKTsKCXB1YmxpYzoKCgkJdm9pZCBTZXRCdWZmZXJTaXplREIoaW50IGlTaXplKTsKCgkJYm9vbCBJc0ZyYW1lKHVpbnQ4X3QqIHBEYXRhLCBpbnQ2NF90IGlsRGF0YUxlbik7CgkJLy/ojrflj5blvZPliY3luKfvvIzlpoLmnpzmiJDlip/np7vliqjliLDkuIvkuIDkuKrkvY3nva7vvIzlpoLmnpzlpLHotKXvvIzkuI3np7vliqjvvIxzdEZyYW1l6K6+572u5Li656m6CgkJdWludDhfdCogR2V0RnJhbWVBbmROZXh0KERNUEZSQU1FJiBzdEZyYW1lLCB1aW50OF90KiBwRGF0YSwgaW50NjRfdCBpbERhdGFMZW4pOwoJfTsKCgl1c2luZyBDTXA0RXh0cmFjdEZyYW1lcyA9IHN0ZDo6bWFwPHVpbnQzMl90LCBzdGQ6OnZlY3RvcjxETVBGUkFNRT4+OwoJY2xhc3MgQ01wNENvcnJ1cHRFeHRyYWN0Cgl7CglwdWJsaWM6CgkJQ01wNEgyNjRQYXJzZXIgbV9zdE1wNEgyNjRQYXJzZXI7CgkJQ01wNEFDM1BhcnNlciBtX3N0TXA0QUMzUGFyc2VyOwoJcHVibGljOgoJCUNNcDRDb3JydXB0RXh0cmFjdCgpOwoJCX5DTXA0Q29ycnVwdEV4dHJhY3QoKTsKCXB1YmxpYzoKCQl2b2lkIEV4dHJhY3QoQ01wNEV4dHJhY3RGcmFtZXMmIGZyYW1lcyx1aW50OF90KiBwRGF0YSxpbnQ2NF90IGlsRGF0YUxlbik7CglwdWJsaWM6CgkJaW50NjRfdCBEdW1wSDI2NFZpZGVvRnJhbWUodWludDhfdCogcERhdGEsIGludDY0X3QgaWxEYXRhTGVuLCBzdGQ6OnZlY3RvcjxETVBGUkFNRT4mIGZyYW1lcyk7CgkJaW50NjRfdCBEdW1wQUMzQXVkaW9GcmFtZSh1aW50OF90KiBwRGF0YSwgaW50NjRfdCBpbERhdGFMZW4sIHN0ZDo6dmVjdG9yPERNUEZSQU1FPiYgZnJhbWVzKTsKCX07CgkKfQoK
==
I3ByYWdtYSBvbmNlCiNpbmNsdWRlICJDb21GdW4uaHBwIgojaW5jbHVkZSAiTXA0UmVwYWlyRGVmLmgiCiNpbmNsdWRlICJDRmlsZU1lbW9yeU1hcC5oIgojaW5jbHVkZSAiQ01wNENvcnJ1cHRFeHRyYWN0LmgiCiNpbmNsdWRlICJqc29uY3BwL2pzb24uaCIKI2luY2x1ZGUgPGZzdHJlYW0+CgojZGVmaW5lIE1QNF9DU1RSMkJPWFRBRyh0YWcpIE1LVEFHKHRhZ1swXSwgdGFnWzFdLCB0YWdbMl0sIHRhZ1szXSkKbmFtZXNwYWNlIE1wNFJlcGFpcgp7Cgl0eXBlZGVmIHN0cnVjdCBTVF9kdW1wX2JveAoJewoJCWludDY0X3Qgc2l6ZTsKCQl1aW50OF90KiBkYXRhOwoJCXVpbnQzMl90IHR5cGU7Cgl9U1RfRFVNUEJPWCxNUDRETVBCT1g7CgkvL+eUqOS6juino+aekE1QNOaWh+S7tueahOS/oeaBrwoJY2xhc3MgQ01wNENvcnJ1cHRQYXJzZXIKCXsKCXB1YmxpYzoKCQlzdGF0aWMgdWludDMyX3QgVG9Cb3hUYWcoY29uc3QgY2hhciogY3N0clRhZyk7CgkJc3RhdGljIHN0ZDo6c3RyaW5nIEJveFRhZ1RvU3RyKHVpbnQzMl90IHRhZyk7CglwdWJsaWM6CgkJdWludDhfdCogR2V0Qm94QW5kTmV4dChNUDRETVBCT1ggJiBzdEJveCxpbnQ2NF90JiBpRnVsbExlbix1aW50OF90KiBwRGF0YSxpbnQ2NF90IGlsRGF0YUxlbik7CgkJaW50NjRfdCBEdW1wQm94cyhzdGQ6OnZlY3RvcjxNUDRETVBCT1g+ICYgc3RCb3gsdWludDhfdCogcERhdGEsaW50NjRfdCBpbERhdGFMZW4pOwoJCWJvb2wgSXNCb3hUYWcodWludDMyX3QgaVRhZyk7CglwdWJsaWM6CgkJYm9vbCBQYXJzZUJveChKc29uOjpWYWx1ZSYgam9iak91dCwgdWludDMyX3QgYm94VHlwZSwgdWludDhfdCogcEJveERhdGEsIGludDY0X3QgaWxCb3hEYXRhTGVuKTsKCQlib29sIFBhcnNlTW9vdkJveChKc29uOjpWYWx1ZSYgam9iak91dCwgdWludDhfdCogcEJveERhdGEsIGludDY0X3QgaWxCb3hEYXRhTGVuKTsKCQlib29sIFBhcnNlVHJha0JveChKc29uOjpWYWx1ZSYgam9iak91dCwgdWludDhfdCogcEJveERhdGEsIGludDY0X3QgaWxCb3hEYXRhTGVuKTsKCQlib29sIFBhcnNlTWRpYUJveChKc29uOjpWYWx1ZSYgam9iak91dCwgdWludDhfdCogcEJveERhdGEsIGludDY0X3QgaWxCb3hEYXRhTGVuKTsKCQlib29sIFBhcnNlTWluZkJveChKc29uOjpWYWx1ZSYgam9iak91dCwgdWludDhfdCogcEJveERhdGEsIGludDY0X3QgaWxCb3hEYXRhTGVuKTsKCQlib29sIFBhcnNlU3RibEJveChKc29uOjpWYWx1ZSYgam9iak91dCwgdWludDhfdCogcEJveERhdGEsIGludDY0X3QgaWxCb3hEYXRhTGVuKTsKCQlib29sIFBhcnNlU3RzZEJveChKc29uOjpWYWx1ZSYgam9iak91dCwgdWludDhfdCogcEJveERhdGEsIGludDY0X3QgaWxCb3hEYXRhTGVuKTsKCQlib29sIFBhcnNlQVZDMUJveChKc29uOjpWYWx1ZSYgam9iak91dCwgdWludDhfdCogcEJveERhdGEsIGludDY0X3QgaWxCb3hEYXRhTGVuKTsKCQlib29sIFBhcnNlQVZDQ0JveChKc29uOjpWYWx1ZSYgam9iak91dCwgdWludDhfdCogcEJveERhdGEsIGludDY0X3QgaWxCb3hEYXRhTGVuKTsKCgkJYm9vbCBQYXJzZUFDM0JveChKc29uOjpWYWx1ZSYgam9iak91dCwgdWludDhfdCogcEJveERhdGEsIGludDY0X3QgaWxCb3hEYXRhTGVuKTsKCQlib29sIFBhcnNlQnRydEJveChKc29uOjpWYWx1ZSYgam9iak91dCwgdWludDhfdCogcEJveERhdGEsIGludDY0X3QgaWxCb3hEYXRhTGVuKTsKCQlib29sIFBhcnNlQm94KEpzb246OlZhbHVlJiBqb2JqT3V0LCBjb25zdCBNUDRETVBCT1gmIGRtcEJveCk7CglwdWJsaWM6CgkJYm9vbCBQYXJzZSh1aW50OF90KiBwRGF0YSwgaW50NjRfdCBpbERhdGFMZW4pOwoJcHJpdmF0ZToKCQlib29sIFBhcnNlXyhKc29uOjpWYWx1ZSYgam9iakJveHMsIHVpbnQ4X3QqIHBEYXRhLCBpbnQ2NF90IGlsRGF0YUxlbiwgYm9vbCBiTmVlZENoZWNrID0gdHJ1ZSk7CgkJY29uc3QgSnNvbjo6VmFsdWUqIEZpbmRKc29uTWVtYmVyKGNvbnN0IEpzb246OlZhbHVlJiByb290LCBjb25zdCBjaGFyKiBzdHJLZXksIGJvb2wgYkZpbmRDaGlsZE5vZGUgPSB0cnVlKTsKCXB1YmxpYzoKCQljb25zdCBzdGQ6Om1hcDx1aW50MzJfdCwgSnNvbjo6VmFsdWU+JiBHZXRUcmFrcygpIGNvbnN0OwoJCWNvbnN0IEpzb246OlZhbHVlJiBHZXRJbmZvKCkgY29uc3Q7Cglwcml2YXRlOgoJCXN0ZDo6bWFwPHVpbnQzMl90LCBKc29uOjpWYWx1ZT4gbV9tcFRyYWtzOwoJCUpzb246OlZhbHVlIG1fam9iakJveEluZm9zOwoJcHVibGljOgoJCUNNcDRDb3JydXB0UGFyc2VyKCk7Cglwcml2YXRlOgoJCXZvaWQgSW5pdE1wNEJveFRhZ3MoKTsKCXByaXZhdGU6CgkJc3RkOjpzZXQ8dWludDMyX3Q+IG1fdGFnczsKCX07CgljbGFzcyBDTXA0UmVwYWlyCgl7Cglwcml2YXRlOgoJCXN0ZDo6c3RyaW5nIG1fc3RyT3V0RmlsZWFOYW1lOwoJCXN0ZDo6c3RyaW5nIG1fc3RyQ29ycnVwdEZpbGVOYW1lOwoJCXN0ZDo6c3RyaW5nIG1fc3RyU2FtcGxlRmlsZU5hbWU7CgkJc3RkOjpzdHJpbmcgbV9zdHJUbXBEaXI7CgoJCXN0ZDo6c3RyaW5nIG1fc3RyVG1wVmlkZW9QYXRoOwoJCXN0ZDo6c3RyaW5nIG1fc3RyVG1wQXVkaW9QYXRoOwoJCWJvb2wgbV9iU3RvcDsKCXB1YmxpYzoKCQlDTXA0UmVwYWlyKCk7CgkJfkNNcDRSZXBhaXIoKTsKCXB1YmxpYzoKCQl2b2lkIFNldEZpbGUoY29uc3QgY2hhciogY3N0ck91dEZpbGVhTmFtZSwgY29uc3QgY2hhciogY3N0ckNvcnJ1cHRGaWxlTmFtZSwgY29uc3QgY2hhciogY3N0clNhbXBsZUZpbGVOYW1lID0gTlVMTCk7CgkJdm9pZCBTZXRDb3JydXB0RmlsZShjb25zdCBjaGFyKiBjc3RyRmlsZU5hbWUpOwoJCXZvaWQgU2V0U2FtcGxlRmlsZShjb25zdCBjaGFyKiBjc3RyRmlsZU5hbWUpOwoJCXZvaWQgU2V0T3V0RmlsZShjb25zdCBjaGFyKiBjc3RyRmlsZU5hbWUpOwoJCXZvaWQgU2V0VG1wRGlyKGNvbnN0IGNoYXIqIGNzdHJEaXIpOwoJCWJvb2wgUmVwYWlyKCk7CgkJdm9pZCBTdG9wKCk7CglwdWJsaWM6CgkJc3RkOjpzdHJpbmcgR2V0VG1wRGlyKCk7Cglwcml2YXRlOgoJCXN0ZDo6c3RyaW5nIEdldFRtcFZpZGVvRmlsZVBhdGgoKTsKCQlzdGQ6OnN0cmluZyBHZXRUbXBBdWRpb0ZpbGVQYXRoKCk7Cgl9Owp9Cj09PT09PT09PQojaW5jbHVkZSAiQ01wNFJlcGFpci5oIgojaW5jbHVkZSA8aW8uaD4KI2luY2x1ZGUgIkNGaWxlTWVtb3J5TWFwLmgiCnN0ZDo6c3RyaW5nIE1wNFJlcGFpcjo6Q01wNFJlcGFpcjo6R2V0VG1wRGlyKCkKewoJaWYgKG1fc3RyVG1wRGlyLmVtcHR5KCkpCgl7CgkJaWYgKCFtX3N0ck91dEZpbGVhTmFtZS5lbXB0eSgpKQoJCXsKCQkJc3RkOjpzdHJpbmcgc3RyT3V0RmlsZVBhdGg7CgkJCUNGaWxlOjpHZXRBYnNvbHV0ZVBhdGgoc3RyT3V0RmlsZVBhdGgsIG1fc3RyT3V0RmlsZWFOYW1lLmNfc3RyKCkpOwoJCQltX3N0clRtcERpciA9IHN0ck91dEZpbGVQYXRoOwoJCX0KCQllbHNlCgkJewoJCQltX3N0clRtcERpciA9IENGaWxlOjpHZXRDdXJyZW50RGlyKCk7CgkJfQoJfQoJcmV0dXJuIG1fc3RyVG1wRGlyOwp9CgpzdGQ6OnN0cmluZyBNcDRSZXBhaXI6OkNNcDRSZXBhaXI6OkdldFRtcFZpZGVvRmlsZVBhdGgoKQp7CglpZiAobV9zdHJUbXBWaWRlb1BhdGguZW1wdHkoKSkKCXsKCQlzdGQ6OnN0cmluZyBzdHJGaWxlTmFtZSA9IEdldEN1cnJlbnREYXRlKCIlWSVtJWQlSCVNJVMiKSArIHN0ZDo6dG9fc3RyaW5nKCh1aW50NjRfdCkodGhpcykpICsgIi5oMjY0IjsKCQltX3N0clRtcFZpZGVvUGF0aCA9IENGaWxlOjpKb2luUGF0aChHZXRUbXBEaXIoKSwgc3RyRmlsZU5hbWUpOwoJfQoJcmV0dXJuIG1fc3RyVG1wVmlkZW9QYXRoOwp9CgpzdGQ6OnN0cmluZyBNcDRSZXBhaXI6OkNNcDRSZXBhaXI6OkdldFRtcEF1ZGlvRmlsZVBhdGgoKQp7CglpZiAobV9zdHJUbXBWaWRlb1BhdGguZW1wdHkoKSkKCXsKCQlzdGQ6OnN0cmluZyBzdHJGaWxlTmFtZSA9IEdldEN1cnJlbnREYXRlKCIlWSVtJWQlSCVNJVMiKSArIHN0ZDo6dG9fc3RyaW5nKChpbnQpKHRoaXMpKSArICIuYWNjIjsKCQltX3N0clRtcFZpZGVvUGF0aCA9IENGaWxlOjpKb2luUGF0aChHZXRUbXBEaXIoKSwgc3RyRmlsZU5hbWUpOwoJfQoJcmV0dXJuIG1fc3RyVG1wVmlkZW9QYXRoOwp9CgpNcDRSZXBhaXI6OkNNcDRSZXBhaXI6OkNNcDRSZXBhaXIoKQp7CgltX2JTdG9wID0gZmFsc2U7Cn0KCk1wNFJlcGFpcjo6Q01wNFJlcGFpcjo6fkNNcDRSZXBhaXIoKQp7Cn0KCnZvaWQgTXA0UmVwYWlyOjpDTXA0UmVwYWlyOjpTZXRGaWxlKGNvbnN0IGNoYXIqIGNzdHJPdXRGaWxlYU5hbWUsIGNvbnN0IGNoYXIqIGNzdHJDb3JydXB0RmlsZU5hbWUsIGNvbnN0IGNoYXIqIGNzdHJTYW1wbGVGaWxlTmFtZSkKewoJaWYgKGNzdHJPdXRGaWxlYU5hbWUpCgl7CgkJU2V0T3V0RmlsZShjc3RyT3V0RmlsZWFOYW1lKTsKCX0KCWlmIChjc3RyQ29ycnVwdEZpbGVOYW1lKQoJewoJCVNldENvcnJ1cHRGaWxlKGNzdHJDb3JydXB0RmlsZU5hbWUpOwoJfQoJaWYgKGNzdHJTYW1wbGVGaWxlTmFtZSkKCXsKCQlTZXRTYW1wbGVGaWxlKGNzdHJTYW1wbGVGaWxlTmFtZSk7Cgl9Cn0KCnZvaWQgTXA0UmVwYWlyOjpDTXA0UmVwYWlyOjpTZXRDb3JydXB0RmlsZShjb25zdCBjaGFyKiBjc3RyRmlsZU5hbWUpCnsKCW1fc3RyQ29ycnVwdEZpbGVOYW1lID0gY3N0ckZpbGVOYW1lOwp9Cgp2b2lkIE1wNFJlcGFpcjo6Q01wNFJlcGFpcjo6U2V0U2FtcGxlRmlsZShjb25zdCBjaGFyKiBjc3RyRmlsZU5hbWUpCnsKCW1fc3RyU2FtcGxlRmlsZU5hbWUgPSBjc3RyRmlsZU5hbWU7Cn0KCnZvaWQgTXA0UmVwYWlyOjpDTXA0UmVwYWlyOjpTZXRPdXRGaWxlKGNvbnN0IGNoYXIqIGNzdHJGaWxlTmFtZSkKewoJbV9zdHJPdXRGaWxlYU5hbWUgPSBjc3RyRmlsZU5hbWU7Cn0KCnZvaWQgTXA0UmVwYWlyOjpDTXA0UmVwYWlyOjpTZXRUbXBEaXIoY29uc3QgY2hhciogY3N0ckRpcikKewoJbV9zdHJUbXBEaXIgPSBjc3RyRGlyOwp9Cgpib29sIE1wNFJlcGFpcjo6Q01wNFJlcGFpcjo6UmVwYWlyKCkKewoJQ0ZpbGVNZW1vcnlNYXAgY2xGaWxlTWFwKG1fc3RyQ29ycnVwdEZpbGVOYW1lKTsKCWlmICghY2xGaWxlTWFwLklzT3BlbigpKQoJewoJCXJldHVybiBmYWxzZTsKCX0KCglzdGQ6Om9mc3RyZWFtIG91dEgyNjRWaWRlb1N0cmVhbShHZXRUbXBWaWRlb0ZpbGVQYXRoKCksIHN0ZDo6aW9zOjpiaW5hcnkgfCBzdGQ6Omlvczo6b3V0KTsKCWlmICghb3V0SDI2NFZpZGVvU3RyZWFtLmlzX29wZW4oKSkKCXsKCQlyZXR1cm4gZmFsc2U7Cgl9CglzdGQ6Om9mc3RyZWFtIG91dEFjY0F1ZGlvU3RyZWFtKEdldFRtcEF1ZGlvRmlsZVBhdGgoKSwgc3RkOjppb3M6OmJpbmFyeSB8IHN0ZDo6aW9zOjpvdXQpOwoJaWYgKCFvdXRBY2NBdWRpb1N0cmVhbS5pc19vcGVuKCkpCgl7CgkJb3V0SDI2NFZpZGVvU3RyZWFtLmNsb3NlKCk7CgkJcmV0dXJuIGZhbHNlOwoJfQoKCU1wNFJlcGFpcjo6Q01wNENvcnJ1cHRQYXJzZXIgY2xDb3JydXB0RmlsZUJveFBhc2VyOwoJaWYgKCFjbENvcnJ1cHRGaWxlQm94UGFzZXIuUGFyc2UoKHVpbnQ4X3QqKWNsRmlsZU1hcC5HZXREYXRhKCksIGNsRmlsZU1hcC5HZXRTaXplKCkpKQoJewoJCWNsRmlsZU1hcC5DbG9zZSgpOwoJCXJldHVybiBmYWxzZTsKCX0KCS8v5o2f5Z2P6KeG6aKR55qETVA0IEJPWCDkv6Hmga8KCWNvbnN0IEpzb246OlZhbHVlJiBqb2JqQ29ycnVwdE1wNEJveCA9IGNsQ29ycnVwdEZpbGVCb3hQYXNlci5HZXRJbmZvKCk7CgkvL+inhumikeW6lOivpeS8muWMheWQq+eahOi9qOmBk++8jOWmguaenOacieagt+S+i+inhumike+8jOmCo+S5iOS7juagt+S+i+inhumikeiOt+WPlu+8jOWmguaenOayoeacieagt+S+i+inhumike+8jOmCo+S5iOebtOaOpeS7juaNn+Wdj+aWh+S7tuiOt+WPlgoJc3RkOjptYXA8dWludDMyX3QsIEpzb246OlZhbHVlPiB0YXJrcyA9IGNsQ29ycnVwdEZpbGVCb3hQYXNlci5HZXRUcmFrcygpOwoJLy/lpoLmnpzorr7nva7kuobmoLfkvovop4bpopHvvIzku47moLfkvovop4bpopHojrflj5bovajpgZPnm7jlhbPkv6Hmga/vvIzlpoJTUFMmUFBTIOmfs+mikee8lueggeagvOW8j+WSjOmHh+agt+eOh+etiQoJQ0ZpbGVNZW1vcnlNYXAgY2xTYW1wbGVGaWxlTWFwOwoJaWYgKCFtX3N0clNhbXBsZUZpbGVOYW1lLmVtcHR5KCkpCgl7CgkJY2xTYW1wbGVGaWxlTWFwLk9wZW4obV9zdHJTYW1wbGVGaWxlTmFtZSk7CgkJaWYgKGNsU2FtcGxlRmlsZU1hcC5Jc09wZW4oKSkKCQl7CgkJCU1wNFJlcGFpcjo6Q01wNENvcnJ1cHRQYXJzZXIgY2xTYW1wbGVGaWxlQm94UGFzZXI7CgkJCWNsU2FtcGxlRmlsZUJveFBhc2VyLlBhcnNlKCh1aW50OF90KiljbFNhbXBsZUZpbGVNYXAuR2V0RGF0YSgpLCBjbFNhbXBsZUZpbGVNYXAuR2V0U2l6ZSgpKTsKCQkJdGFya3MgPSBjbFNhbXBsZUZpbGVCb3hQYXNlci5HZXRUcmFrcygpOwoJCX0KCQllbHNlIHsgcHJpbnRmKCJXYXJpbmc6IFNhbXBsZUZpbGUgT3BlbiBmYWlsISBTa2lwISEiKTsgfS8v5qC35L6L6KeG6aKR5omT5byA5aSx6LSl77yM5bCx5b+955Wl5qC35L6L6KeG6aKR55qE5aSE55CGCgl9CglhdXRvIHJlZkF2Y0MgPSB0YXJrcy5maW5kKE1LVEFHKCdhJywgJ3YnLCAnYycsICdDJykpOwoJaWYgKHJlZkF2Y0MgPT0gdGFya3MuZW5kKCkpCgl7CgkJLy/ml6Dms5Xojrflj5ZQUFPlkoxTUFMKCQlyZXR1cm4gZmFsc2U7Cgl9CgkvL+WIhuaekOW5tuWGmeWFpeinhumikeaWh+S7tgoJQ01wNENvcnJ1cHRFeHRyYWN0IG1wNEV4dHJhY3Q7CgoJLy/liJ3lp4vljJblr7zlh7rluKfphY3nva4KCglDTXA0RXh0cmFjdEZyYW1lcyBleHRGcmFtZXM7CgljaGFyIGgyNjRIQ29kZVs0XSA9IHsgMCwwLDAsMSB9OwoJZm9yIChhdXRvIHJlZlRyYWsgPSB0YXJrcy5iZWdpbigpOyByZWZUcmFrICE9IHRhcmtzLmVuZCgpOyByZWZUcmFrKyspCgl7CgkJdWludDMyX3QgdGFnID0gcmVmVHJhay0+Zmlyc3Q7CgkJY29uc3QgYXV0byYgdHJhayA9IHJlZlRyYWstPnNlY29uZDsKCQlpZiAodGFnID09IE1LVEFHKCdhJywgJ3YnLCAnYycsICdDJykpCgkJewoJCQlhdXRvIGphcnJTUFNzID0gdHJha1siU1BTcyJdOwoKCQkJZm9yIChhdXRvIHJlZlNQUyA9IGphcnJTUFNzLmJlZ2luKCk7IHJlZlNQUyAhPSBqYXJyU1BTcy5lbmQoKTsgcmVmU1BTKyspCgkJCXsKCQkJCW91dEgyNjRWaWRlb1N0cmVhbS53cml0ZShoMjY0SENvZGUsIDQpOwoJCQkJdWludDhfdCogcFNQU0RhdGEgPSAodWludDhfdCopKCgqcmVmU1BTKVsiZGF0YXB0ciJdLmFzVUludDY0KCkpOwoJCQkJaW50IGlsU1BTRGF0YUxlbiA9ICgqcmVmU1BTKVsibGVuZ3RoIl0uYXNJbnQoKTsKCQkJCW91dEgyNjRWaWRlb1N0cmVhbS53cml0ZSgoY2hhciopcFNQU0RhdGEsIGlsU1BTRGF0YUxlbik7CgkJCX0KCgkJCWF1dG8gamFyclBQU3MgPSB0cmFrWyJQUFNzIl07CgoJCQlmb3IgKGF1dG8gcmVmUFBTID0gamFyclBQU3MuYmVnaW4oKTsgcmVmUFBTICE9IGphcnJQUFNzLmVuZCgpOyByZWZQUFMrKykKCQkJewoJCQkJb3V0SDI2NFZpZGVvU3RyZWFtLndyaXRlKGgyNjRIQ29kZSwgNCk7CgkJCQl1aW50OF90KiBwU1BTRGF0YSA9ICh1aW50OF90KikoKCpyZWZQUFMpWyJkYXRhcHRyIl0uYXNVSW50NjQoKSk7CgkJCQlpbnQgaWxTUFNEYXRhTGVuID0gKCpyZWZQUFMpWyJsZW5ndGgiXS5hc0ludCgpOwoJCQkJb3V0SDI2NFZpZGVvU3RyZWFtLndyaXRlKChjaGFyKilwU1BTRGF0YSwgaWxTUFNEYXRhTGVuKTsKCQkJfQoJCX1lbHNlIGlmICh0YWcgPT0gTUtUQUcoJ2EnLCAnYycsICctJywgJzMnKSkKCQl7CgkJCXRyeSAKCQkJewoJCQkJdWludDMyX3QgaUJ1ZmZlclNpemVEQiA9IHRyYWtbImJ0cnQiXVsiYnVmZmVyU2l6ZURCIl0uYXNJbnQoKTsKCQkJCW1wNEV4dHJhY3QubV9zdE1wNEFDM1BhcnNlci5TZXRCdWZmZXJTaXplREIoaUJ1ZmZlclNpemVEQik7CgkJCX0KCQkJY2F0Y2ggKGNvbnN0IHN0ZDo6ZXhjZXB0aW9uJiBlKSB7fQoJCX0KCQlleHRGcmFtZXMuaW5zZXJ0KHN0ZDo6cGFpcjx1aW50MzJfdCwgc3RkOjp2ZWN0b3I8TXA0UmVwYWlyOjpETVBGUkFNRT4+KHJlZlRyYWstPmZpcnN0LCB7fSkpOwoJfQoJdWludDhfdCogcE1kYXREYXRhID0gKHVpbnQ4X3QqKShjbEZpbGVNYXAuR2V0RGF0YSgpKTsKCWludDY0X3QgaWxNZGF0TGVuID0gY2xGaWxlTWFwLkdldFNpemUoKTsKCWlmIChqb2JqQ29ycnVwdE1wNEJveC5pc01lbWJlcigibWRhdCIpKQoJewoJCWNvbnN0IEpzb246OlZhbHVlJiBqb2JqTWRhdCA9IGpvYmpDb3JydXB0TXA0Qm94WyJtZGF0Il07CgkJcE1kYXREYXRhID0gKHVpbnQ4X3QqKShqb2JqTWRhdFsiX2RhdGFwdHIiXS5hc1VJbnQ2NCgpKTsKCQlpbE1kYXRMZW4gPSAoam9iak1kYXRbIl9zaXplIl0uYXNJbnQ2NCgpKTsKCX0KCW1wNEV4dHJhY3QuRXh0cmFjdChleHRGcmFtZXMsIHBNZGF0RGF0YSwgaWxNZGF0TGVuLCBtX2JTdG9wLCBbXShpbnQ2NF90IGN1cixpbnQ2NF90IG1heCktPnZvaWQgewoJCXByaW50ZigiJWYgJSVcbiIsIDEwMC4wICogKDEuMCAqIGN1ciAvIG1heCkpOwoJCX0pOwoJY29uc3QgYXV0byYgdmlkZW9GcmFtZXMgPSBleHRGcmFtZXNbTUtUQUcoJ2EnLCAndicsICdjJywgJ0MnKV07Cgl1aW50MzJfdCBtYkNvdW50ID0gMDsKCWZvciAoYXV0byBpdG9yID0gdmlkZW9GcmFtZXMuYmVnaW4oKTsgaXRvciAhPSB2aWRlb0ZyYW1lcy5lbmQoKTsgaXRvcisrKQoJewoJCWNvbnN0IE1wNFJlcGFpcjo6RHVtcEZyYW1lJiBmcmFtZSA9ICppdG9yOwoJCWNoYXIgYnVmWzRdID0geyAwLDAsMCwxIH07CgkJb3V0SDI2NFZpZGVvU3RyZWFtLndyaXRlKGJ1ZiwgNCk7CgkJb3V0SDI2NFZpZGVvU3RyZWFtLndyaXRlKChjaGFyKilmcmFtZS5wRnJhbWVEYXRhLCBmcmFtZS5pRnJhbWVTaXplKTsKCQltYkNvdW50ICs9IGZyYW1lLmlGcmFtZVNpemU7Cgl9CglyZXR1cm4gdHJ1ZTsKfQoKdm9pZCBNcDRSZXBhaXI6OkNNcDRSZXBhaXI6OlN0b3AoKQp7CgltX2JTdG9wID0gdHJ1ZTsKfQoKdWludDMyX3QgTXA0UmVwYWlyOjpDTXA0Q29ycnVwdFBhcnNlcjo6VG9Cb3hUYWcoY29uc3QgY2hhciogY3N0clRhZykKewoJaWYgKGNzdHJUYWcgPT0gTlVMTCkgCgl7CgkJcmV0dXJuIDA7Cgl9CglpZiAoY3N0clRhZ1swXSA9PSAnXDAnKQoJewoJCXJldHVybiAwOwoJfQoJdWludDhfdCB0YWdCdWZbNF0gPSB7J1wwJywnXDAnLCdcMCcsJ1wwJ307Cglmb3IgKGludCBpID0gMDsgaSA8IDQ7IGkrKykKCXsKCQlpZiAoY3N0clRhZ1tpXSA9PSAnXDAnKQoJCXsKCQkJYnJlYWs7CgkJfQoJCXRhZ0J1ZltpXSA9IGNzdHJUYWdbaV07Cgl9CglyZXR1cm4gTUtUQUcodGFnQnVmWzBdLCB0YWdCdWZbMV0sIHRhZ0J1ZlsyXSwgdGFnQnVmWzNdKTsKfQoKc3RkOjpzdHJpbmcgTXA0UmVwYWlyOjpDTXA0Q29ycnVwdFBhcnNlcjo6Qm94VGFnVG9TdHIodWludDMyX3QgdGFnKQp7Cgljb25zdCBjaGFyKiBwVGFnRGF0YSA9IChjaGFyKikoJnRhZyk7CgljaGFyIGNzdHJbNV07Cgljc3RyWzRdID0gJ1wwJzsKCW1lbWNweShjc3RyLCBwVGFnRGF0YSwgNCk7CglyZXR1cm4gc3RkOjpzdHJpbmcoY3N0cik7Cn0KCgp1aW50OF90KiBNcDRSZXBhaXI6OkNNcDRDb3JydXB0UGFyc2VyOjpHZXRCb3hBbmROZXh0KE1QNERNUEJPWCYgc3RCb3gsIGludDY0X3QmIGlGdWxsTGVuLCB1aW50OF90KiBwRGF0YSwgaW50NjRfdCBpbERhdGFMZW4pCnsKCXN0Qm94LmRhdGEgPSBOVUxMOwoJc3RCb3gudHlwZSA9IDA7CglzdEJveC5zaXplID0gMDsKCWlGdWxsTGVuID0gMDsKCWlmIChwRGF0YSA9PSBOVUxMIHx8IGlsRGF0YUxlbiA8IDgpIAoJewoJCXJldHVybiBwRGF0YTsKCX0KCXVpbnQzMl90IGlCb3hUeXBlID0gKigodWludDMyX3QqKShwRGF0YSArIDQpKTsKCWlmICghSXNCb3hUYWcoaUJveFR5cGUpKQoJewoJCXJldHVybiBwRGF0YTsKCX0KCWludDY0X3QgaWxCb3hTaXplID0gMDsKCXVpbnQ4X3QqIHBCb3hEYXRhID0gTlVMTDsKCWludDY0X3QgaWxCb3hEYXRhU2l6ZSA9IDA7CglpbEJveFNpemUgPSBMRTJDdXJFbmRpYW5JMzIoKigodWludDMyX3QqKXBEYXRhKSk7CglpZiAoaWxCb3hTaXplID09IDB4MSkKCXsKCQlpbEJveFNpemUgPSBMRTJDdXJFbmRpYW5JNjQoKigodWludDY0X3QqKSgmcERhdGFbOF0pKSk7CgkJcEJveERhdGEgPSBwRGF0YSArIDggKyA4OwoJCWlsQm94RGF0YVNpemUgPSBpbEJveERhdGFTaXplIC0gOCAtIDg7Cgl9CgllbHNlCgl7CgkJcEJveERhdGEgPSBwRGF0YSArIDg7Ly80ICsgNCDot7Pov4c05a2X6IqC55qE5pWw5o2u5aSn5bCP5qCH6K+G5ZKMVHlwZeexu+Wei+agh+ivhgoJCWlsQm94RGF0YVNpemUgPSBpbEJveFNpemUgLSA4Oy8vaWxCb3hTaXpl5YyF5ousVHlwZeWSjOWkp+Wwj+agh+ivhueahOWkp+WwjwoJfQoJaWYgKGlsQm94U2l6ZSA8IDgpCgl7CgkJcmV0dXJuIHBEYXRhOwoJfQoJaWYgKGlsQm94U2l6ZSA+IGlsRGF0YUxlbikKCXsKCQlyZXR1cm4gcERhdGE7Cgl9CglzdEJveC5kYXRhID0gcEJveERhdGE7CglzdEJveC5zaXplID0gaWxCb3hEYXRhU2l6ZTsKCXN0Qm94LnR5cGUgPSBpQm94VHlwZTsKCWlGdWxsTGVuID0gaWxCb3hTaXplOy8vCglyZXR1cm4gKCZwRGF0YVtpRnVsbExlbl0pOwp9CgppbnQ2NF90IE1wNFJlcGFpcjo6Q01wNENvcnJ1cHRQYXJzZXI6OkR1bXBCb3hzKHN0ZDo6dmVjdG9yPE1QNERNUEJPWD4mIHN0Qm94LCB1aW50OF90KiBwRGF0YSwgaW50NjRfdCBpbERhdGFMZW4pCnsKCXVpbnQ4X3QqIHBUbXBEYXRhID0gcERhdGE7CglpbnQ2NF90IGlsVG1wRGF0YUxlbiA9IGlsRGF0YUxlbjsKCWludDY0X3QgaWxEdW1wTGVuID0gMDsKCU1QNERNUEJPWCBzdE1wNEJveDsKCWludDY0X3QgaWxCb3hGdWxsTGVuID0gMDsKCXBUbXBEYXRhID0gR2V0Qm94QW5kTmV4dChzdE1wNEJveCwgaWxCb3hGdWxsTGVuLCBwVG1wRGF0YSwgaWxUbXBEYXRhTGVuKTsKCWlmIChpbEJveEZ1bGxMZW4gPT0gMCkKCXsKCQlyZXR1cm4gMDsKCX0KCWRvCgl7CgkJc3RCb3gucHVzaF9iYWNrKHN0TXA0Qm94KTsKCQlpbFRtcERhdGFMZW4gLT0gaWxCb3hGdWxsTGVuOwoJCWlsRHVtcExlbiArPSBpbEJveEZ1bGxMZW47CgkJcFRtcERhdGEgPSBHZXRCb3hBbmROZXh0KHN0TXA0Qm94LCBpbEJveEZ1bGxMZW4sIHBUbXBEYXRhLCBpbFRtcERhdGFMZW4pOwoJfSB3aGlsZSAoaWxCb3hGdWxsTGVuICE9IDAgJiYgcFRtcERhdGEgIT0gTlVMTCk7CglyZXR1cm4gaWxEdW1wTGVuOwp9Cgpib29sIE1wNFJlcGFpcjo6Q01wNENvcnJ1cHRQYXJzZXI6OklzQm94VGFnKHVpbnQzMl90IGlUYWcpCnsKCWlmIChtX3RhZ3MuZmluZChpVGFnKSAhPSBtX3RhZ3MuZW5kKCkpCgl7CgkJcmV0dXJuIHRydWU7Cgl9CgkvL2NoYXIqIHBUYWdEYXRhID0gKGNoYXIqKSgmaVRhZyk7CgkvL3N0ZDo6c3RyaW5nIGtleXMgPSAiMTIzNDU2Nzg5MC1AQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5eiI7CgkvL2lmIChrZXlzLmZpbmQocFRhZ0RhdGFbMF0pID09IHN0ZDo6c3RyaW5nOjpucG9zKSByZXR1cm4gZmFsc2U7CgkvL2lmIChrZXlzLmZpbmQocFRhZ0RhdGFbMV0pID09IHN0ZDo6c3RyaW5nOjpucG9zKSByZXR1cm4gZmFsc2U7CgkvL2lmIChrZXlzLmZpbmQocFRhZ0RhdGFbMl0pID09IHN0ZDo6c3RyaW5nOjpucG9zKSByZXR1cm4gZmFsc2U7CgkvL2lmIChrZXlzLmZpbmQocFRhZ0RhdGFbM10pID09IHN0ZDo6c3RyaW5nOjpucG9zKSByZXR1cm4gZmFsc2U7CglyZXR1cm4gZmFsc2U7Cn0KCmJvb2wgTXA0UmVwYWlyOjpDTXA0Q29ycnVwdFBhcnNlcjo6UGFyc2VCb3goSnNvbjo6VmFsdWUgJiBqb2JqT3V0LHVpbnQzMl90IGJveFR5cGUsIHVpbnQ4X3QqIHBCb3hEYXRhLCBpbnQ2NF90IGlsQm94RGF0YUxlbikKewoJYm9vbCBiUmVzdWx0ID0gdHJ1ZTsKCXN3aXRjaCAoYm94VHlwZSkKCXsKCWNhc2UgTUtUQUcoJ20nLCAnbycsICdvJywgJ3YnKTogCgl7CgkJUGFyc2VNb292Qm94KGpvYmpPdXQscEJveERhdGEsIGlsQm94RGF0YUxlbik7Cgl9YnJlYWs7CgljYXNlIE1LVEFHKCd0JywgJ3InLCAnYScsICdrJyk6Cgl7CgkJUGFyc2VUcmFrQm94KGpvYmpPdXQsIHBCb3hEYXRhLCBpbEJveERhdGFMZW4pOwoJfWJyZWFrOwoJY2FzZSBNS1RBRygnbScsICdkJywgJ2knLCAnYScpOgoJewoJCVBhcnNlTWRpYUJveChqb2JqT3V0LCBwQm94RGF0YSwgaWxCb3hEYXRhTGVuKTsKCX1icmVhazsKCWNhc2UgTUtUQUcoJ20nLCAnaScsICduJywgJ2YnKToKCXsKCQlQYXJzZU1pbmZCb3goam9iak91dCwgcEJveERhdGEsIGlsQm94RGF0YUxlbik7Cgl9YnJlYWs7CgljYXNlIE1LVEFHKCdzJywgJ3QnLCAnYicsICdsJyk6Cgl7CgkJUGFyc2VTdGJsQm94KGpvYmpPdXQsIHBCb3hEYXRhLCBpbEJveERhdGFMZW4pOwoJfWJyZWFrOwoJY2FzZSBNS1RBRygncycsICd0JywgJ3MnLCAnZCcpOgoJewoJCVBhcnNlU3RzZEJveChqb2JqT3V0LCBwQm94RGF0YSwgaWxCb3hEYXRhTGVuKTsKCX1icmVhazsKCWNhc2UgTUtUQUcoJ2EnLCAndicsICdjJywgJzEnKToKCXsKCQlQYXJzZUFWQzFCb3goam9iak91dCwgcEJveERhdGEsIGlsQm94RGF0YUxlbik7Cgl9YnJlYWs7CgljYXNlIE1LVEFHKCdhJywgJ3YnLCAnYycsICdDJyk6Cgl7CgkJUGFyc2VBVkNDQm94KGpvYmpPdXQsIHBCb3hEYXRhLCBpbEJveERhdGFMZW4pOwoJfWJyZWFrOwoJY2FzZSBNS1RBRygnYScsICdjJywgJy0nLCAnMycpOgoJewoJCVBhcnNlQUMzQm94KGpvYmpPdXQsIHBCb3hEYXRhLCBpbEJveERhdGFMZW4pOwoJfWJyZWFrOwoJY2FzZSBNS1RBRygnYicsICd0JywgJ3InLCAndCcpOgoJewoJCVBhcnNlQnRydEJveChqb2JqT3V0LCBwQm94RGF0YSwgaWxCb3hEYXRhTGVuKTsKCX1icmVhazsKCWRlZmF1bHQ6Cgl7CgkJYlJlc3VsdCA9IGZhbHNlOwoJfWJyZWFrOwoJfQoJcmV0dXJuIGJSZXN1bHQ7Cn0KCmJvb2wgTXA0UmVwYWlyOjpDTXA0Q29ycnVwdFBhcnNlcjo6UGFyc2VNb292Qm94KEpzb246OlZhbHVlJiBqb2JqT3V0LCB1aW50OF90KiBwQm94RGF0YSwgaW50NjRfdCBpbEJveERhdGFMZW4pCnsKCXJldHVybiBQYXJzZV8oam9iak91dCwgcEJveERhdGEsIGlsQm94RGF0YUxlbixmYWxzZSk7Cn0KCmJvb2wgTXA0UmVwYWlyOjpDTXA0Q29ycnVwdFBhcnNlcjo6UGFyc2VUcmFrQm94KEpzb246OlZhbHVlJiBqb2JqT3V0LCB1aW50OF90KiBwQm94RGF0YSwgaW50NjRfdCBpbEJveERhdGFMZW4pCnsKCXJldHVybiBQYXJzZV8oam9iak91dCwgcEJveERhdGEsIGlsQm94RGF0YUxlbiwgZmFsc2UpOwp9Cgpib29sIE1wNFJlcGFpcjo6Q01wNENvcnJ1cHRQYXJzZXI6OlBhcnNlTWRpYUJveChKc29uOjpWYWx1ZSYgam9iak91dCwgdWludDhfdCogcEJveERhdGEsIGludDY0X3QgaWxCb3hEYXRhTGVuKQp7CglyZXR1cm4gUGFyc2VfKGpvYmpPdXQsIHBCb3hEYXRhLCBpbEJveERhdGFMZW4sIGZhbHNlKTsKfQoKYm9vbCBNcDRSZXBhaXI6OkNNcDRDb3JydXB0UGFyc2VyOjpQYXJzZU1pbmZCb3goSnNvbjo6VmFsdWUmIGpvYmpPdXQsIHVpbnQ4X3QqIHBCb3hEYXRhLCBpbnQ2NF90IGlsQm94RGF0YUxlbikKewoJcmV0dXJuIFBhcnNlXyhqb2JqT3V0LCBwQm94RGF0YSwgaWxCb3hEYXRhTGVuLCBmYWxzZSk7Cn0KCmJvb2wgTXA0UmVwYWlyOjpDTXA0Q29ycnVwdFBhcnNlcjo6UGFyc2VTdGJsQm94KEpzb246OlZhbHVlJiBqb2JqT3V0LCB1aW50OF90KiBwQm94RGF0YSwgaW50NjRfdCBpbEJveERhdGFMZW4pCnsKCXJldHVybiBQYXJzZV8oam9iak91dCwgcEJveERhdGEsIGlsQm94RGF0YUxlbiwgZmFsc2UpOwp9CmJvb2wgTXA0UmVwYWlyOjpDTXA0Q29ycnVwdFBhcnNlcjo6UGFyc2VTdHNkQm94KEpzb246OlZhbHVlJiBqb2JqT3V0LCB1aW50OF90KiBwQm94RGF0YSwgaW50NjRfdCBpbEJveERhdGFMZW4pCnsKCXJldHVybiBQYXJzZV8oam9iak91dCwgcEJveERhdGEsIGlsQm94RGF0YUxlbiwgZmFsc2UpOwp9Cgpib29sIE1wNFJlcGFpcjo6Q01wNENvcnJ1cHRQYXJzZXI6OlBhcnNlQVZDMUJveChKc29uOjpWYWx1ZSYgam9iak91dCwgdWludDhfdCogcEJveERhdGEsIGludDY0X3QgaWxCb3hEYXRhTGVuKQp7CglyZXR1cm4gUGFyc2VfKGpvYmpPdXQsIHBCb3hEYXRhLCBpbEJveERhdGFMZW4sIGZhbHNlKTsKfQoKYm9vbCBNcDRSZXBhaXI6OkNNcDRDb3JydXB0UGFyc2VyOjpQYXJzZUFWQ0NCb3goSnNvbjo6VmFsdWUmIGpvYmpPdXQsIHVpbnQ4X3QqIHBCb3hEYXRhLCBpbnQ2NF90IGlsQm94RGF0YUxlbikKewoJam9iak91dFsiX3NpemUiXSA9IGlsQm94RGF0YUxlbjsKCWpvYmpPdXRbIl9kYXRhcHRyIl0gPSAodWludDY0X3QpcEJveERhdGE7Cglqb2JqT3V0WyJjb25maWd1cmF0aW9uVmVyc2lvbiJdID0gKGludClwQm94RGF0YVswXTsKCWpvYmpPdXRbIkFWQ1Byb2ZpbGVJbmRpY2F0aW9uIl0gPSAoaW50KXBCb3hEYXRhWzFdOwoJam9iak91dFsicHJvZmlsZV9jb21wYXRpYmlsaXR5ICJdID0gKGludClwQm94RGF0YVsyXTsKCWpvYmpPdXRbIkFWQ0xldmVsSW5kaWNhdGlvbiJdID0gKGludClwQm94RGF0YVszXTsKCWpvYmpPdXRbImxlbmd0aFNpemVNaW51c09uZSJdID0gKGludClwQm94RGF0YVs0XTsKCWpvYmpPdXRbInJlc2VydmVkIl0gPSAoaW50KSgweEUwICYgcEJveERhdGFbNV0pOwoJaW50IGlTcHNDb3VudCA9ICgweDFGICYgcEJveERhdGFbNV0pOy8vU1BT55qE5Liq5pWwCglqb2JqT3V0WyJuYl9TUFNfbmFsdXMiXSA9IGlTcHNDb3VudDsKCglKc29uOjpWYWx1ZSBqYXJyU1BTcyhKc29uOjpWYWx1ZVR5cGU6OmFycmF5VmFsdWUpOwoJdWludDhfdCogcFRtcERhdGEgPSAmcEJveERhdGFbNl07CglpbnQ2NF90IGlsVG1wRGF0YUxlbiA9IGlsQm94RGF0YUxlbiAtIDY7Cglmb3IgKGludCBpID0gMDsgaSA8IGlTcHNDb3VudDsgaSsrKQoJewoJCUpzb246OlZhbHVlIGpvYmpTUFMoSnNvbjo6VmFsdWVUeXBlOjpvYmplY3RWYWx1ZSk7CgkJdWludDE2X3QgaVNwc0xlbiA9IExFMkN1ckVuZGlhbkkxNigqKCh1aW50MTZfdCopcFRtcERhdGEpKTsKCQlqb2JqU1BTWyJsZW5ndGgiXSA9IGlTcHNMZW47CgkJam9ialNQU1siZGF0YXB0ciJdID0odWludDY0X3QpKCZwVG1wRGF0YVsyXSk7CgkJam9ialNQU1siYjY0X2RhdGEiXSA9IGJhc2U2NF9lbmNvZGUoJnBUbXBEYXRhWzJdLCBpU3BzTGVuKTsKCQlwVG1wRGF0YSArPSAoaVNwc0xlbiArIDIpOwoJCWphcnJTUFNzLmFwcGVuZChqb2JqU1BTKTsKCX0KCWludCBpUFBTQ291bnQgPSAoaW50KXBUbXBEYXRhWzBdOwoJam9iak91dFsibmJfUFBTX25hbHVzIl0gPSBpUFBTQ291bnQ7CglKc29uOjpWYWx1ZSBqYXJyUFBTcyhKc29uOjpWYWx1ZVR5cGU6OmFycmF5VmFsdWUpOwoJcFRtcERhdGErKzsKCWZvciAoaW50IGkgPSAwOyBpIDwgaVBQU0NvdW50OyBpKyspCgl7CgkJSnNvbjo6VmFsdWUgam9ialBQUyhKc29uOjpWYWx1ZVR5cGU6Om9iamVjdFZhbHVlKTsKCQl1aW50MTZfdCBpUHBzTGVuID0gTEUyQ3VyRW5kaWFuSTE2KCooKHVpbnQxNl90KilwVG1wRGF0YSkpOwoJCWpvYmpQUFNbImxlbmd0aCJdID0gaVBwc0xlbjsKCQlqb2JqUFBTWyJkYXRhcHRyIl0gPSAodWludDY0X3QpKCZwVG1wRGF0YVsyXSk7CgkJam9ialBQU1siYjY0X2RhdGEiXSA9IGJhc2U2NF9lbmNvZGUoJnBUbXBEYXRhWzJdLCBpUHBzTGVuKTsKCQlwVG1wRGF0YSArPSAoaVBwc0xlbiArIDIpOwoJCWphcnJQUFNzLmFwcGVuZChqb2JqUFBTKTsKCX0KCWpvYmpPdXRbIlBQU3MiXSA9IGphcnJQUFNzOwoJam9iak91dFsiU1BTcyJdID0gamFyclNQU3M7CglyZXR1cm4gdHJ1ZTsKfQoKYm9vbCBNcDRSZXBhaXI6OkNNcDRDb3JydXB0UGFyc2VyOjpQYXJzZUFDM0JveChKc29uOjpWYWx1ZSYgam9iak91dCwgdWludDhfdCogcEJveERhdGEsIGludDY0X3QgaWxCb3hEYXRhTGVuKQp7CglyZXR1cm4gUGFyc2VfKGpvYmpPdXQsIHBCb3hEYXRhLGlsQm94RGF0YUxlbik7Cn0KCmJvb2wgTXA0UmVwYWlyOjpDTXA0Q29ycnVwdFBhcnNlcjo6UGFyc2VCdHJ0Qm94KEpzb246OlZhbHVlJiBqb2JqT3V0LCB1aW50OF90KiBwQm94RGF0YSwgaW50NjRfdCBpbEJveERhdGFMZW4pCnsKCWpvYmpPdXRbIl9zaXplIl0gPSBpbEJveERhdGFMZW47Cglqb2JqT3V0WyJfZGF0YXB0ciJdID0gKHVpbnQ2NF90KXBCb3hEYXRhOwoJam9iak91dFsiYnVmZmVyU2l6ZURCIl0gPSBMRTJDdXJFbmRpYW5JMzIoKigodWludDMyX3QqKXBCb3hEYXRhKSk7Cglqb2JqT3V0WyJtYXhCaXRyYXRlIl0gPSBMRTJDdXJFbmRpYW5JMzIoKigodWludDMyX3QqKShwQm94RGF0YSArIDQpKSk7Cglqb2JqT3V0WyJhdmdCaXRyYXRlIl0gPSBMRTJDdXJFbmRpYW5JMzIoKigodWludDMyX3QqKShwQm94RGF0YSArIDgpKSk7CglyZXR1cm4gdHJ1ZTsKfQoKCmJvb2wgTXA0UmVwYWlyOjpDTXA0Q29ycnVwdFBhcnNlcjo6UGFyc2VCb3goSnNvbjo6VmFsdWUmIGpvYmpPdXQsIGNvbnN0IE1QNERNUEJPWCYgZG1wQm94KQp7CglyZXR1cm4gUGFyc2VCb3goam9iak91dCwgZG1wQm94LnR5cGUsIGRtcEJveC5kYXRhLCBkbXBCb3guc2l6ZSk7Cn0KCmJvb2wgTXA0UmVwYWlyOjpDTXA0Q29ycnVwdFBhcnNlcjo6UGFyc2UodWludDhfdCogcERhdGEsIGludDY0X3QgaWxEYXRhTGVuKQp7CgltX2pvYmpCb3hJbmZvcyA9IEpzb246OlZhbHVlOjpudWxsOwoJbV9tcFRyYWtzLmNsZWFyKCk7Cglib29sIGJTdWMgPSBQYXJzZV8obV9qb2JqQm94SW5mb3MsIHBEYXRhLCBpbERhdGFMZW4pOwoJc3RkOjp2ZWN0b3I8c3RkOjpzdHJpbmc+IHRyYWtUYWdzID0geyAiYXZjQyIgLCJtcDRhIiwicnRtZCIsInR3b3MiLCJhYy0zIiB9OwoJSnNvbjo6VmFsdWUmIGpvYmpUYWNrUm9vdCA9IG1fam9iakJveEluZm9zLmlzTWVtYmVyKCJtb292IikgPyBtX2pvYmpCb3hJbmZvc1sibW9vdiJdIDogbV9qb2JqQm94SW5mb3M7Cglmb3IgKGF1dG8gaXRvciA9IHRyYWtUYWdzLmJlZ2luKCk7IGl0b3IgIT0gdHJha1RhZ3MuZW5kKCk7IGl0b3IrKykKCXsKCQljb25zdCBKc29uOjpWYWx1ZSoganZhbCA9IEZpbmRKc29uTWVtYmVyKGpvYmpUYWNrUm9vdCwgaXRvci0+Y19zdHIoKSk7CgkJaWYgKGp2YWwpCgkJewoJCQltX21wVHJha3MuaW5zZXJ0KHN0ZDo6cGFpcjx1aW50MzJfdCwgSnNvbjo6VmFsdWU+KFRvQm94VGFnKGl0b3ItPmNfc3RyKCkpLCpqdmFsKSk7CgkJfQoJfQoJcmV0dXJuIGJTdWM7Cn0KCmJvb2wgTXA0UmVwYWlyOjpDTXA0Q29ycnVwdFBhcnNlcjo6UGFyc2VfKEpzb246OlZhbHVlJiBqb2JqQm94cywgdWludDhfdCogcERhdGEsIGludDY0X3QgaWxEYXRhTGVuLGJvb2wgYk5lZWRDaGVjaykKewoKCWlmIChwRGF0YSA9PSBOVUxMIHx8IGlsRGF0YUxlbiA8IHNpemVvZih1aW50NjRfdCkpCgl7CgkJcmV0dXJuIGZhbHNlOwoJfQoJc3RkOjp2ZWN0b3I8TVA0RE1QQk9YPiB2ZWNEbXBCb3hzOwoJZm9yIChpbnQ2NF90IGkgPSAwOyBpIDwgaWxEYXRhTGVuOyBpKyspCgl7CgkJdmVjRG1wQm94cy5jbGVhcigpOwoJCWludDY0X3QgaWxEdW1wTGVuID0gRHVtcEJveHModmVjRG1wQm94cywgJnBEYXRhW2ldLCBpbERhdGFMZW4gLSBpKTsKCQlpZiAoYk5lZWRDaGVjayAmJiBpbER1bXBMZW4gPD0gMCAmJiB2ZWNEbXBCb3hzLnNpemUoKSA8IDIpCgkJewoJCQljb250aW51ZTsKCQl9CgkJaSArPSBpbER1bXBMZW47CgoJCS8v5YiG5p6Q6aG25bGCQk9YCgkJZm9yIChzaXplX3QgaiA9IDA7IGogPCB2ZWNEbXBCb3hzLnNpemUoKTsgaisrKQoJCXsKCQkJdWludDMyX3QgdHlwZSA9IHZlY0RtcEJveHNbal0udHlwZTsKCQkJaW50NjRfdCBzaXplID0gdmVjRG1wQm94c1tqXS5zaXplOwoJCQlzdGQ6OnN0cmluZyBzdHJUeXBlID0gQm94VGFnVG9TdHIodHlwZSk7CgkJCUpzb246OlZhbHVlIGpvYmpCb3goSnNvbjo6VmFsdWVUeXBlOjpvYmplY3RWYWx1ZSk7CgkJCWpvYmpCb3hbIl9zaXplIl0gPSBzaXplOwoJCQlqb2JqQm94WyJfZGF0YXB0ciJdID0gKHVpbnQ2NF90KSh2ZWNEbXBCb3hzW2pdLmRhdGEpOwoJCQkvL1RPRE8g6Kej5p6QCgkJCVBhcnNlQm94KGpvYmpCb3gsIHR5cGUsIHZlY0RtcEJveHNbal0uZGF0YSwgdmVjRG1wQm94c1tqXS5zaXplKTsKCgkJCUpzb246OlZhbHVlJiBqdmFsT2xkQm94ID0gam9iakJveHNbc3RyVHlwZV07CgkJCWlmIChqdmFsT2xkQm94LmlzQXJyYXkoKSkKCQkJey8v5aaC5p6c5Y6f5pys5piv5pWw57uE77yMIOa3u+WKoOWIsOe7hAoJCQkJanZhbE9sZEJveC5hcHBlbmQoam9iakJveCk7CgkJCX0KCQkJZWxzZSBpZiAoanZhbE9sZEJveC5pc051bGwoKSkKCQkJey8v5aaC5p6c5LmL5YmN5rKh5pyJ6L+Z5LiqCgkJCQlqdmFsT2xkQm94ID0gam9iakJveDsKCQkJfQoJCQllbHNlCgkJCXsKCQkJCS8v5aaC5p6c5LmL5YmN5a2Y5Zyo5LiA5qC355qES0VZICzovazlnovkuLpBcnJheQoJCQkJLy/lpoI6IHRyYWNr5Y+v5pyJ5aSa5Liq5Luj6KGo6L2o6YGTCgkJCQlKc29uOjpWYWx1ZSBqYXJyQm94cyhKc29uOjpWYWx1ZVR5cGU6OmFycmF5VmFsdWUpOwoJCQkJamFyckJveHMuYXBwZW5kKGp2YWxPbGRCb3gpOwoJCQkJamFyckJveHMuYXBwZW5kKGpvYmpCb3gpOwoJCQkJanZhbE9sZEJveCA9IGphcnJCb3hzOwoJCQl9CgkJCXByaW50ZigiQm94VHlwZTolcywgRGF0YVNpemU6JWQgXG4iLCBzdHJUeXBlLmNfc3RyKCksIChpbnQpc2l6ZSk7CgkJfQoJfQoJcmV0dXJuIHRydWU7Cn0KCmNvbnN0IEpzb246OlZhbHVlKiBNcDRSZXBhaXI6OkNNcDRDb3JydXB0UGFyc2VyOjpGaW5kSnNvbk1lbWJlcihjb25zdCBKc29uOjpWYWx1ZSYgcm9vdCxjb25zdCBjaGFyKiBjc3RyS2V5LCBib29sIGJGaW5kQ2hpbGROb2RlKQp7CglpZiAocm9vdC50eXBlKCkgIT0gSnNvbjo6VmFsdWVUeXBlOjphcnJheVZhbHVlICYmIHJvb3QudHlwZSgpICE9IEpzb246OlZhbHVlVHlwZTo6b2JqZWN0VmFsdWUpCgl7CgkJcmV0dXJuIE5VTEw7Cgl9Cgljb25zdCBKc29uOjpWYWx1ZSogcmV0ID0gTlVMTDsKCWlmIChyb290LnR5cGUoKSA9PSBKc29uOjpWYWx1ZVR5cGU6Om9iamVjdFZhbHVlICYmIHJvb3QuaXNNZW1iZXIoY3N0cktleSkpCgl7CgkJcmV0ID0gJihyb290W2NzdHJLZXldKTsKCX0KCWVsc2UgaWYgKGJGaW5kQ2hpbGROb2RlKQoJewoJCWZvciAoYXV0byBpdG9yID0gcm9vdC5iZWdpbigpOyBpdG9yICE9IHJvb3QuZW5kKCk7IGl0b3IrKykKCQl7CgkJCXJldCA9IEZpbmRKc29uTWVtYmVyKCppdG9yLCBjc3RyS2V5LCBiRmluZENoaWxkTm9kZSk7CgkJCWlmIChyZXQpCgkJCXsKCQkJCWJyZWFrOwoJCQl9CgkJfQoJfQoJcmV0dXJuIHJldDsKfQoKY29uc3Qgc3RkOjptYXA8dWludDMyX3QsIEpzb246OlZhbHVlPiYgTXA0UmVwYWlyOjpDTXA0Q29ycnVwdFBhcnNlcjo6R2V0VHJha3MoKSBjb25zdAp7CglyZXR1cm4gbV9tcFRyYWtzOwp9Cgpjb25zdCBKc29uOjpWYWx1ZSYgTXA0UmVwYWlyOjpDTXA0Q29ycnVwdFBhcnNlcjo6R2V0SW5mbygpIGNvbnN0CnsKCXJldHVybiBtX2pvYmpCb3hJbmZvczsKfQoKTXA0UmVwYWlyOjpDTXA0Q29ycnVwdFBhcnNlcjo6Q01wNENvcnJ1cHRQYXJzZXIoKQp7CglJbml0TXA0Qm94VGFncygpOwp9Cgp2b2lkIE1wNFJlcGFpcjo6Q01wNENvcnJ1cHRQYXJzZXI6OkluaXRNcDRCb3hUYWdzKCkKewoKCS8vc3RkOjpzZXQ8dWludDMyX3Q+IHRhZ3M7CgltX3RhZ3MuaW5zZXJ0KFRvQm94VGFnKCJhdmNDIikpOwoJbV90YWdzLmluc2VydChUb0JveFRhZygiZnR5cCIpKTsKCW1fdGFncy5pbnNlcnQoVG9Cb3hUYWcoIm1vb3YiKSk7CgkvL21fdGFncy5pbnNlcnQoVG9Cb3hUYWcoImZyZWUiKSk7CgltX3RhZ3MuaW5zZXJ0KFRvQm94VGFnKCJtZGF0IikpOwoJbV90YWdzLmluc2VydChUb0JveFRhZygibXZoZCIpKTsKCW1fdGFncy5pbnNlcnQoVG9Cb3hUYWcoInRyYWsiKSk7CgltX3RhZ3MuaW5zZXJ0KFRvQm94VGFnKCJ0a2hkIikpOwoJbV90YWdzLmluc2VydChUb0JveFRhZygiZWR0cyIpKTsKCW1fdGFncy5pbnNlcnQoVG9Cb3hUYWcoImVsc3QiKSk7CgltX3RhZ3MuaW5zZXJ0KFRvQm94VGFnKCJtZGlhIikpOwoJbV90YWdzLmluc2VydChUb0JveFRhZygibWRoZCIpKTsKCW1fdGFncy5pbnNlcnQoVG9Cb3hUYWcoImhkbHIiKSk7CgltX3RhZ3MuaW5zZXJ0KFRvQm94VGFnKCJtaW5mIikpOwoJbV90YWdzLmluc2VydChUb0JveFRhZygidm1oZCIpKTsKCW1fdGFncy5pbnNlcnQoVG9Cb3hUYWcoImRpbmYiKSk7CgltX3RhZ3MuaW5zZXJ0KFRvQm94VGFnKCJkcmVmIikpOwoJbV90YWdzLmluc2VydChUb0JveFRhZygidXJsIikpOwoJbV90YWdzLmluc2VydChUb0JveFRhZygic3RibCIpKTsKCW1fdGFncy5pbnNlcnQoVG9Cb3hUYWcoInN0c2QiKSk7CgltX3RhZ3MuaW5zZXJ0KFRvQm94VGFnKCJzdHNkIikpOwoJbV90YWdzLmluc2VydChUb0JveFRhZygiYXZjMSIpKTsKCW1fdGFncy5pbnNlcnQoVG9Cb3hUYWcoImF2Y0MiKSk7IC8v6KeG6aKRCgltX3RhZ3MuaW5zZXJ0KFRvQm94VGFnKCJwYXNwIikpOwoJbV90YWdzLmluc2VydChUb0JveFRhZygicGFzcCIpKTsKCW1fdGFncy5pbnNlcnQoVG9Cb3hUYWcoInN0dHMiKSk7CgltX3RhZ3MuaW5zZXJ0KFRvQm94VGFnKCJzdHNzIikpOwoJbV90YWdzLmluc2VydChUb0JveFRhZygiY3R0cyIpKTsKCW1fdGFncy5pbnNlcnQoVG9Cb3hUYWcoInN0c2MiKSk7CgltX3RhZ3MuaW5zZXJ0KFRvQm94VGFnKCJzdHN6IikpOwoJbV90YWdzLmluc2VydChUb0JveFRhZygic3RjbyIpKTsKCW1fdGFncy5pbnNlcnQoVG9Cb3hUYWcoInN0Y28iKSk7CgltX3RhZ3MuaW5zZXJ0KFRvQm94VGFnKCJtcDRhIikpOwoJbV90YWdzLmluc2VydChUb0JveFRhZygiZXNkcyIpKTsKCW1fdGFncy5pbnNlcnQoVG9Cb3hUYWcoInVkdGEiKSk7CgltX3RhZ3MuaW5zZXJ0KFRvQm94VGFnKCJtZXRhIikpOwoJbV90YWdzLmluc2VydChUb0JveFRhZygiZGFjMyIpKTsKCW1fdGFncy5pbnNlcnQoVG9Cb3hUYWcoImJ0cnQiKSk7CgltX3RhZ3MuaW5zZXJ0KFRvQm94VGFnKCJ1dWlkIikpOwoJLy/pn7PpopHovajpgZPnsbvlnosKCW1fdGFncy5pbnNlcnQoVG9Cb3hUYWcoInR3b3MiKSk7CgltX3RhZ3MuaW5zZXJ0KFRvQm94VGFnKCJydG1kIikpOwoJbV90YWdzLmluc2VydChUb0JveFRhZygiYWMtMyIpKTsKCgltX3RhZ3MuaW5zZXJ0KFRvQm94VGFnKCJpbHN0IikpOwoJbV90YWdzLmluc2VydChUb0JveFRhZygidGFwdCIpKTsKCW1fdGFncy5pbnNlcnQoVG9Cb3hUYWcoImVkdHMiKSk7Cn0KCg==
